<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2022-11-30T04:20:28.134Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Twitter 实习生 George Hotz</title>
    <link href="http://catcoding.me/p/geohot/"/>
    <id>http://catcoding.me/p/geohot/</id>
    <published>2022-11-29T17:29:07.000Z</published>
    <updated>2022-11-30T04:20:28.134Z</updated>
    
    <content type="html"><![CDATA[<p>经过一轮又一轮的裁员，Twitter 大批骨干离职。</p><p>有人戏称：现在 Twitter 办公室里只剩下两个最“硬核”的程序员了。</p><p><img src="/images/ob_pasted-image-20221130121508.png" alt=""></p><p>这两个人中一个自然是老板 Elon Musk。</p><p>另外一个则是 33 岁的 George Hotz，一个周薪 2000 美元的 Twitter 实习生。</p><p>这位实习生的年龄着实大了一点儿，并且缺乏前端相关的经验，不得不从了解 GraphQL 开始，一点点学习 Twitter 使用的编程语言 Java 和 Scala，还得写一些 JavaScript，他甚至在网络上直播自己如何弄明白<a href="https://www.youtube.com/watch?v=z6xslDMimME">Twitter 如何工作的</a>。</p><p>这样的人怎么可能入得了 Elon Musk 的法眼呢？怎么可能逆行加入 Twitter 呢？</p><p><img src="/images/ob_07147c2e7e77357fbc29369945348fb.jpg" alt=""></p><p>原因很简单，George Hotz 是一位超级技术大牛。</p><p>2007 年 8 月 21 日，当时 17 岁的 George Hotz 在自己博客宣布成功破解 iPhone，手机不再局限于 AT&amp;T 网络，而是支持其他 GSM 网络，并在博客上发布了详细的解锁过程和视频，最终这部破解的 iPhone 在换了一部跑车和三部新的 iPhone，让他在黑客圈子里声名鹊起。</p><p>2009 年，他又开始解锁 PlayStation 3，后来被 Sony 起诉，最终因为黑客圈最大组织 Anonymous 施予的强大压力下和 Hotz 和解。随后他去了高校潜心研究机器学习。</p><p>2014 年 7 月，他加入 Google 的 Project Zero，短暂工作后退出。</p><p>2015 年，专注于驾驶辅助技术，在网上免费发布了他的自主驾驶代码“openpilot”，声称可以用最小的成本做出个更好的自动驾驶技术。</p><p><img src="/images/ob_pasted-image-20221129114516.png" alt=""></p><p>George Hotz 选择这时候加入 Twitter，部分原因可能是因为他理解到 Elon Musk 和他是一类人，他喜欢混乱和挑战，他最近一个多月才开始频繁发推，并且开始体会到社交网络的乐趣。</p><p>可能因为他没经过 996 的毒打，他很想体验一把鸡血的高强度推特工作。当那封名为 <code>A fork in the Road</code> 的美国版奋斗者邮件发出后，Geroge Hotz 评论到：</p><blockquote><p>This is the attitude that builds incredible things. Let all the people who don’t desire greatness leave.</p></blockquote><p>随后表示自己不想远程办公，想去旧金山进行全职的实习生工作，正好 Elon Musk 也认为远程工作不靠谱：</p><p><img src="/images/ob_pasted-image-20221129120931.png" alt=""></p><p>另外，他正在从自己创办的公司中退出，似乎是对<a href="https://geohot.github.io/blog/jekyll/update/2022/10/29/the-heroes-journey.html">自动驾驶失去了兴趣</a>。当然这并不意味着 comma.ai 失败了，而是他觉得自己对运营一个更为庞大的公司没有兴趣：</p><blockquote><p>It’s no longer a race car, it’s a boat. And steering a boat requires too much damn <em>planning</em> and <em>patience</em>.</p></blockquote><p>所以在这个空档期找一些没做过的事情试试，就是这么任性。在一个代码直播中，他自称多年前也做过一些老派的互联网技术，那时候主要还是用 PHP，现在这些互联网相关的技术他之前没怎么实战过，后台开发、前端、微服务，对些他来说都是没折腾过的，所以称之为 <code>For the glory of the technical challenge</code>。</p><p>至于有的人对此表示不理解，他的回复是优秀的程序员想干什么就干什么，不需要什么理由：<br><img src="/images/ob_pasted-image-20221129122457.png" alt=""></p><p>作为顶尖黑客，geohot 在互联网上有很多轶事。他如何做到如此出色和有创造力，普通人能从他身上学到些什么？</p><p>最近几个月，我在业余时间会去看 George Hotz 的<a href="https://www.youtube.com/@geohotarchive">油管视频</a>，感觉非常有趣。他在直播里通常会把自己的思路自言自语说出来，而且会时不时停下来谈谈自己对一些事情的看法，语速比较快，很有节奏感，有时候可当作 rap 来听，有时候还会哼点小曲。</p><p>强烈推荐你也去观摩一把，看看顶尖程序员如何工作的，他也是一个非常直率的人，说话风趣。这大概是 Learn by doing 和 Learn in Public 的最好的实践。他通常会每次定一个最小目标，然后连续数小时的持续学习，比如：</p><ul><li>自己开发的小巧的类似 pytorch 的深度学习框架 <a href="https://github.com/geohot/tinygrad">geohot/tinygrad</a> 很多时候都是直播中开发的</li><li>在没看过 Clang 和 LLVM 的情况下去尝试实现 C 语言的一个新的语法逻辑</li><li>实现一个和自己下国际象棋的 <a href="https://www.youtube.com/watch?v=RFaFmkCEGEs">AI 程序</a></li><li>看论文，调试各种机器学习的模型，玩 diffusion</li></ul><p>顶尖程序员并不是人坐下代码就噼里啪啦出来了，而是也可能和普通人一样，需要不断地 Google 和翻阅文档，一样可能会混淆行和列，从教程中拷贝粘贴代码，看着报错信息饶头皱眉 wtf，还有程序跑出来正确结果那种孩童般的欢呼雀跃。</p><p>这种观感就如同一些观众评论到：</p><blockquote><p>That exact same thing happens to me EVERYTIME. Nice to see someone 10 times smarter than me do the same.</p></blockquote><blockquote><p>It’s encouraging to see that someone as ridiculously genius as George Hotz still has to Google Python and even struggles with the way stuff works in his program. It definitely made me realize I have just been focusing on memorizing too much stuff when it comes to programming. I just need to make more projects and have more fun doing them! Thanks Geohot!</p></blockquote><blockquote><p>Dude has an IQ of &gt; 9000<br>Confuses rows and columns like a normal human Finally,<br>    I feel less shitty now.</p></blockquote><p>当然有的时候你也能看到他速度非常快，敲代码就如同电影里那样 (之前用 Vi，最近改用 VsCode 了)，他看文档经常扫一样就知道个大概，这是积累下来的能力，可以快速迁移到任何项目上：</p><blockquote><p>this guy programs like how hollywood thinks people program</p></blockquote><p>在这些直播中，我觉得一些比较有趣的观点和片段是：</p><ul><li>不折腾编辑器和屏幕，这些不影响效率。</li><li>工作中你也许用不到数学，但学习数学和物理给人一种 Knowing the secrets 的感受，那些给你教条的家长、老师他们可能没你懂世界是如何运行的。</li><li>不喜欢远程办公，这让工作感觉像度假，喜欢去公司和同事一起当面工作。</li><li>为什么 30 多岁来还去当实习生，薪酬 2000 美金一周，<a href="https://www.youtube.com/watch?v=nvtoOxNfDQo&amp;t=855s">what the fuck, who cares？</a></li><li>我经常搜索一些看起来简单的问题，在别人看来我就是个新手，这不重要。<a href="https://www.youtube.com/watch?v=nvtoOxNfDQo&amp;t=1080s">别担心别人的看法</a>，关注自己的能力，而不是外在的印象。因为印象和人设是很容易改变的，而能力才是最重要的。</li><li>开源代码比内部代码有用，<a href="https://www.youtube.com/watch?v=nvtoOxNfDQo&amp;t=1940s">很多公司会把好的代码开源出来</a>，而那些内部用的代码质量其实很低。</li><li>开发过程中喜欢把主要的步骤用 plain text 写下来。</li><li>如何学习编程，想一个自己感兴趣的项目，直接开干，Learn by doing，看编程视频没法学会编程。</li><li>推荐的编程语言：Assembly,C,Python，外加 Haskell 和 Verilog，你不用对 Assembly 非常精通，但只有懂了 Assembly 才懂计算机底层在干什么，才知道 C 的精妙之处，懂了 C 之后才知道 Python 帮你做了什么，这三门语言是抽象的不同层次。学一下 Haskell 可以帮助你理解编程语言的设计，学些 Verilog 让你知道硬件如何运行。</li><li><a href="https://www.youtube.com/watch?v=nvtoOxNfDQo&amp;t=9570s">C++ 太复杂，Golang 是给学不会 C++ 的 Google 程序员用的🤣</a></li><li>我们处于编程 2.0 时代，Machine learning 就像是数据驱动编程。</li><li>什么是编程，面向新手讲解 <a href="https://www.youtube.com/watch?v=N2bXEUSAiTI">what is programming?</a></li><li>相信技术奇异点，两篇改变自己人生的文章，推荐 <a href="http://www.fairpoint.net/~jpierce/staring_into_the_singularity.htm">Staring Into The Singularity</a> 和 <a href="https://www.unqualified-reservations.org/">Unqualified Reservations by Mencius Moldbug</a>。</li></ul><p>通过观看这些视频，我感受到他和普通人的强烈区别是：<strong>极其强烈的好奇心和空杯心态，强大的学习能力和持续专注的能力</strong>，这也许是最值得我们学习的。而他去 Twitter 折腾，正如他在博客上写的那样：</p><blockquote><p>I hope that there’s people in the world who get joy from actually <em>doing</em> the thing and not just solving the problem.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过一轮又一轮的裁员，Twitter 大批骨干离职。&lt;/p&gt;
&lt;p&gt;有人戏称：现在 Twitter 办公室里只剩下两个最“硬核”的程序员了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20221130121508.png&quot; alt=&quot;
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="程序员" scheme="http://catcoding.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>译：阅读的必要性</title>
    <link href="http://catcoding.me/p/read/"/>
    <id>http://catcoding.me/p/read/</id>
    <published>2022-11-26T22:49:07.000Z</published>
    <updated>2022-11-30T04:20:28.138Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://paulgraham.com/read.html">The Need to Read (paulgraham.com)</a><br>作者：Paul Graham<br>2022 年 11 月</p><p>在我小时候读的科幻小说中，总有比阅读更有效率的方式获取知识，神秘的 “磁带” 如程序加载到计算机一般植入人的大脑中。</p><p>这种事不太可能很快实现。这不仅是因为我们很难找到阅读的替代品，而且因为即使存在，它也是不够的。阅读关于 <code>x</code> 的内容并不只是教你了解 <code>x</code>，同时还教你如何写作 [^1]。</p><p>那又怎样？如果我们找到了更为快速的方式来替代阅读，大家就没必要写得好了，不是吗？</p><p>更重要的原因是，写作不仅仅是一种传达想法的方式，也是一种创造想法的方式。</p><p>一个好的作家不只是思考，然后写下他的想法，作为一种记录。好的作家几乎总是会在写作的过程中发现新的东西。而据我所知，这种发现是无可替代的。与其他人讨论是发现想法的一个好方法。但即使这样做了，当你坐下来写作时，你仍然会发现新的想法。这种思考只能通过<a href="http://paulgraham.com/words.html">写作</a>来完成。</p><p>当然，也有一些思考是可以不通过写作完成的。如果你不需要太深入地研究一个问题，你可以不通过写作也能解决。例如，如果你正在考虑如何连接两台机器的部件，也许写作是无用的；而当一个问题可以被很正式地描时，你可以在头脑中解决；但如果你需要解决一个复杂的、定义不清的问题，写出来总是会有帮助。反过来，这意味着不擅长写作的人在解决这类问题时几乎总处于劣势。</p><p>不能写好就不能思考好，不读好就不能写好。这里的 “读好” 是指两个层面上的，你必须善于阅读，而且要读好的东西 [^2]。</p><p>如果你只是想获取信息，那有很多其他方法。但是，对于想要获得想法的人来说，阅读是必不可少的。</p><p><sub>[^1] 有声读物可以提供优秀写作的例子，但听别人朗读并不能像自己阅读一样教会你写作。</sub></p><p><sub>[^2] 这里的”善于阅读”不是指善于机械地阅读，相比起快速阅读，获取文字的含义更为重要。</sub></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文：&lt;a href=&quot;http://paulgraham.com/read.html&quot;&gt;The Need to Read (paulgraham.com)&lt;/a&gt;&lt;br&gt;作者：Paul Graham&lt;br&gt;2022 年 11 月&lt;/p&gt;
&lt;p&gt;在我小时候读的科幻小说中，总
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>和 Rust Compiler 开发者面基</title>
    <link href="http://catcoding.me/p/talk-with-compiler-hacker/"/>
    <id>http://catcoding.me/p/talk-with-compiler-hacker/</id>
    <published>2022-11-23T23:56:12.000Z</published>
    <updated>2022-11-30T04:20:28.142Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有更新博客了，最近两个月我在开心地写代码，今天想写篇文章，赶紧抓住这个冲动。</p><p>上周和 Rust compiler 的一个核心开发 <a href="https://github.com/compiler-errors">compiler-errors</a> 约了个线上面基。今天想写写我们沟通的主要几个方面，因为大部分都是技术相关的问题，所以我觉得写出来和大家分享一下没关系。</p><p>他对 Rust 项目贡献时间刚好满一年，这期间做了 <a href="https://github.com/rust-lang/rust/pulls?q=is%3Apr+is%3Amerged+author%3Acompiler-errors+sort%3Acreated-asc">400 多个 PR</a>，效率实在太高。我在 Rust 社区混了两个月了，这期间提交的很多 PR 都是他帮忙 Review 的，开发过程中碰到问题我也会向他请教。有次偶然看到他 Twitter 放开了自己的时间表，任何对 Rust compiler 的开发者都可以约个时间聊聊，所以我就约了个线上会议。</p><p>首先我问了一个比较宽泛的问题：你如何调试编译器，因为我发现你解决问题非常快。</p><p>compiler-errors: 首先对于一个问题，我会尝试构建一个最小能重现问题的代码用例，根据报错信息或者代码栈看源代码，rust-analyzer 对看代码帮助非常大，我们基本可以很快跳转到任何变量或者函数的定义。使用 VsCode 的 terminal 运行命令，错误栈里的文件信息里面有源代码的路径，ctrl 按下去可以直接跳转到对应的代码行。我对 compiler 的很多部分都了解一些，主要是因为看了不少代码，有时候一看错误信息就能大致判断出问题的位置，如果有必要再去看运行的日志。</p><p><em>VsCode terminal 运行命令直接跳转文件位置这个我学到了，我之前一直习惯在系统终端运行命令，VsCode 只是用来编辑代码。</em></p><p>我：你是否使用 GDB 之类的调试器？<br><strong>compiler-errors:</strong> 我基本不用这个，因为使用 GDB 调试需要另外开一些编译选项，这会让编译变得很慢，而且运行的时候也会变得很慢。我记得很早之前使用过一次，感觉不太好。</p><p>我：我进行了两个月的 Rust compiler 开发，所以接触到了很多语言的细节，给我的感受是 Rust 像是一个大杂烩，我能看到 Ruby 的影子，比如链式调用这样的风格，也能看到很多函数式编程的影子，所以这很独特，但我会担心 Rust 未来的发展，是否会太过独特而导致只有一小群人在使用。</p><p><strong>compiler-errors:</strong> 对此我也不是很确定，确实 Rust 比较复杂，有很多问题还没解决，初学者上手的难度比较高，但一个开发者不用掌握所有 Rust 的边边角角也能开始开发，我很肯定，Rust 对于编写和维护大型的、对性能、安全型要求高的项目来说是非常合适的。比如 Rust compiler 这个项目本身，这么庞大的项目我们在 Review 代码的时候其实是比较简单的，主要看实现的逻辑是否有问题，而不会担心内存方面的问题，而且我们也有信心不断地对代码进行重构。Rust 从学术界的编程语言借鉴了不少东西，比如 OCaml 是一门很精美的语言，但是很多年一来一直对并行这块支持不好，工业界的使用范围也比较少。</p><p><em>这些感受和我基本一致，在这么多年我断断续续的学习 Rust 过程中，我从未掌握过 Rust 的所有内容，但我发现从代码层面理解一个 Rust 项目非常容易，我接触过的几个领域的项目都是如此，比如 wasmer, youki, compiler，因为 Cargo 和统一的代码组织方式，还有 rust-analyzer 这样的工具辅助，理解代码相对来说容易很多。</em></p><p>接着我让他帮忙简单看了看我正在做的一个相对比较大的 PR，而后聊了一下他在 aws 工作的情况，这些就不细写了。</p><p>期间也问了一个我觉得自己看代码还没理解的部分，就是 method lookup 的相关实现，他说最好在一个 session 里面来分享这些，这样其他人也可以看到。Compiler team 会定时组织一些技术分享，视频都会上传到 Youtube，感兴趣的可以在这里看：<a href="https://www.youtube.com/results?search_query=RustcContributor%3A%3Aexplore">RustcContributor::explore - YouTube</a></p><p>我觉得这种线上面基的经历不错，可以认识一些人，得到一些交流。这一年我基本都在家办公，现实中除了和同事沟通，认识新人的机会比较少。所以我也打算搞一个线上预约，如果想和我交流的可以在这里选择一个时间，我们沟通半小时：<a href="https://calendly.com/cyukang/30min">https://calendly.com/cyukang/30min</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久没有更新博客了，最近两个月我在开心地写代码，今天想写篇文章，赶紧抓住这个冲动。&lt;/p&gt;
&lt;p&gt;上周和 Rust compiler 的一个核心开发 &lt;a href=&quot;https://github.com/compiler-errors&quot;&gt;compiler-errors&lt;/
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>无意识偏见</title>
    <link href="http://catcoding.me/p/unconscious-bias/"/>
    <id>http://catcoding.me/p/unconscious-bias/</id>
    <published>2022-10-21T19:50:07.000Z</published>
    <updated>2022-11-30T04:20:28.142Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到 Hao Chen 在 Twitter 上分享了无意识偏见，<a href="https://twitter.com/haoel/status/1566636122330959872">Hao Chen on Twitter: “Unconscious Bias 无意识偏见</a></p><p><img src="/images/ob_pasted-image-20220906074202.png" alt=""></p><p>在外企中这确实算一个必修课，微软入职的时候这是着重培训的一块内容。多元和包容的职场环境，需要员工关注这些细节。</p><p>在经过培训之前，“无意识偏见”对我来说很陌生，但回想起来我其实是有过这样的经历的。</p><p>我联想到了前公司的一件事情。当时我们在做企业的 IT 安全，解决公司数据的安全问题。我们安全相关的团队经过了一些讨论，我需要把这些东西形成文档。其中有一块是员工的安全管理，我们当时的结论是对于外包人员，需要着重管理，因为外包人员素质和安全意识差，人员流动性高，所以接触的数据需要分级等等。</p><p>这些都是我们讨论的东西，所以我写在了我们团队的 Conflence 页面。我刚编辑完 (我猜他是无意间看最近编辑页面发现的)，一个外包员工给我发私信，言语中透露着愤怒，谁说的外包人员素质差？</p><p>我一下意识到，这样写对他造成了很大的伤害。后来这个员工就离职了，我不确定是不是具体因为这件事导致他的离职，但我很肯定，外包在公司里面会感受到各种隐形的歧视的。</p><p>不止我的前公司，我也见过很多其他公司的外包人员的各种待遇，比如同在一个办公室里，但节日礼品、文化衫这些只有正是员工有，如此等等。当然可以从公司角度考虑，需要节省成本，但从工作环境和对人的关怀来说，我们应该努力减少偏见对人的伤害。</p><p>其实无意识歧视非常普遍，主要是因为人们习惯用标签和惯性思维。例如一个 HR 筛选简历，他最基本的一个筛选条件是学历、专业等等能迅速做出判断的条件，这也许主要是为了效率。当 HR 把筛选条件扩大到年龄、地域、性别等，我们通常会觉得过分了，但这些规则在社会上一直隐形运行着。</p><p>人们通常会对自己的受歧视经历印象深刻，但如果你是歧视者，就会自己做出的歧视行为毫无知觉，大多数人会难以发现自己带着习惯形成的偏见。正如耗子所说，偏见不止是对他人会造成伤害，对自己的认知和进步也会形成阻碍。比如技术上的偏见，抛去应用场景和需求谈技术栈，就会让自己的偏见无意识占了主导，从而做出不好的选择。</p><p><strong>我认为偏见主要是会扼杀了好奇心和求知欲，当你把一个对立的标签贴上之后，就认为自己已经足够了解，从而会丢掉去了解的好奇心和动力。</strong></p><p>没人会是一个毫无偏见的人，除非他抛去所有生活经验的总结，但尽量客观地看待人和事这个习惯值得培养，于人于己都有好处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看到 Hao Chen 在 Twitter 上分享了无意识偏见，&lt;a href=&quot;https://twitter.com/haoel/status/1566636122330959872&quot;&gt;Hao Chen on Twitter: “Unconscious Bias 无
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>我曾经干了 3 年 EDA</title>
    <link href="http://catcoding.me/p/3-years-in-eda/"/>
    <id>http://catcoding.me/p/3-years-in-eda/</id>
    <published>2022-08-28T22:01:11.000Z</published>
    <updated>2022-11-30T04:20:28.130Z</updated>
    
    <content type="html"><![CDATA[<p>这周末在上海和几个前同事聚了聚，勾起我的一股回忆。</p><p>今天就写写 EDA，因为我的第一份工作就是加入了上海的一个创业公司，我们做的就是 EDA 行业中自动化形式验证工具。</p><p>这个行业如今被卡脖子，资本涌入，有人称之为国内的风口，但我加入的那时候就像是一个老鼠洞。我毕业那会儿正好看了《黑客与画家》，所以选择了一个创业公司，走了一条更少人走的路。</p><p>不过短短三年，我也只是在这个行业浅尝辄止。下面这些谈谈我的经历和感受，凭回忆写写有可能不够准确。</p><p>不得不说，美国人卡得很准，中国不是要大力发展芯片么，没有 EDA 这种工具要做芯片简直就是天方夜谭，EDA 软件实际上已经成为中国高端芯片的命门所在。</p><p><img src="/images/ob_pasted-image-20220825005953.png" alt=""></p><p>电子设计自动化（Electronic design automation，缩写：EDA），这个行业的发展伴随着 1980 年后的芯片革命和硅谷的崛起。芯片本质上是很多个物理逻辑门的组合，在芯片的早期，因为复杂度和集成度远不如现在，设计人员还可以手动完成电路设计和布线。</p><p>然后芯片的复杂度越来越高，自然人们开始想，如果能够使用软件来描述硬件设计就好了。1986 年，硬件描述语言 Verilog 推出，1987 年 VHDL 推出，各种仿真器开始出现，这些仿真器可以解析 Verilog/VHDL，并对设计的芯片进行仿真，这样使得芯片设计可以在真正被应用前进行严格的验证。</p><p>如今，EDA 工具已经成为芯片设计行业的标准工具，涵盖了芯片设计、布线、验证和仿真的所有流程。</p><p>EDA 行业的三巨头是 Synopsys、Cadence、Mentor，这些公司比我们大部分现在的程序员年龄都大，其中 Mentor 成立于 1981 年，另外两个分别成立于 1985 和 1986，这些公司如今已经成为事实上的垄断，占据 80% 左右的市场份额。</p><p>2011 年，我加入 NextOp 的时候，公司已经创立了 5 年并开始进入了稳定期。市场人员在美国，主要研发人员在上海，这种模式和现在 zoom 这类公司很像。两个创始人都是 90 年左右去美国，读了博士之后进入了这个行业。</p><p>他们发现了一个比较细分的市场，因为日常工作中经常需要人为地去写 Property，所以就想如何能在仿真器运行之后自动生成 Property 就好了。Property 类似于我们写程序中的断言，可以当作硬件的一部分 spec，也可以用于硬件开发中的 regression testing，如果一个断言被触发了，可能是一个 Bug，也可能是一个之前漏掉的 coverage。因为硬件的 Bug 非常非常值钱，如果能在芯片设计阶段发现 Bug，那么这个工具将非常有用，我们的产品名称就叫做 BugScope。</p><p>我记得当时我们的一个重要里程碑就是找到了苹果的 Bug，可以感受到公司上下都非常有成就感，因为发现一个苹果的硬件 Bug  可以减少很多可能的损失，这非常能证明工具的价值。</p><p>这里面有很多技术上的难点，自动生成 Property 可以用到的输入有两方面，仿真器的运行数据和 Verilog/VDHL 代码。如何把仿真器里的运行数据搞出来，如何节省磁盘，我当时看着那些几十年的 C 头文件，去调试仿真器的 hook 函数，有时候盯着下面这种信号仿真看，如今想来都头大。</p><p><img src="/images/ob_pasted-image-20220825005451.png" alt=""></p><p>更难的是如何去自动发现数据里的规律，结合 Verilog 代码去生成 Property，如何写出足够简单而不会自相矛盾的 Property。这些会涉及到 Model checking、<a href="https://en.wikipedia.org/wiki/SAT_solver">SAT solver</a> 之类的算法，Model checking 的开山鼻祖  <a href="https://en.wikipedia.org/wiki/E._M._Clarke" title="E. M. Clarke">E. M. Clarke</a> 为创始人的博士生导师，所以作为了公司的顾问。他因为 Model checking 的开拓性工作获得了 2007 年的图灵奖。</p><p>虽然公司很小，但技术氛围很好，有些像个实验室，开发人员基本都是来自中科大、上交大、电子科大。作为刚毕业的小白，我在这个公司待的三年还是能学到了不少东西。里面的代码主要是几十万行的 C/C++，任何产品的 crash 都是在客户的机器上，所以对代码质量要求很高。回想起来 Software Engineering 做得非常不错，代码测试覆盖率几乎 100%，还有一堆 fuzz testing，为了解决内存问题 valgrind 在自动化测试中用了很多。</p><p>这个行业门槛太高，因为涉及到多个方面，需要一些硬件背景，最好有一些芯片从业经验，还需要好的软件工程能力。具体到我们的问题，比如 Property 怎么生成，就需要不少行业积累和手工打磨，一个个 case 去琢磨，当时公司 10 来个人也只有两三个做这块。我跟着做过一小段时间，发现自己做不来，我的耐心和相关知识都不够。</p><p>EDA 行业那时候就已经非常稳定，黄金时期已经过去。有个老板经常感叹，整个 EDA 行业的大小好不如香蕉行业。</p><p>我们那时候已经有一些稳定的客户，最大的客户应该是苹果，在上海的时候我也去 Marvell、中兴这些公司做现场调试。</p><p>2013 年我们公司被印度人主导的公司 <a href="https://semiengineering.com/atrenta-buys-nextop/">Atrenta 收购了</a>，过了几年 Atrenta 又被 Synopsys 收购了，我在 2014 年因为想去深圳就离职了。在这个稳定的行业，如果想做也是可以一直做下去的，我之前的同事们，有一部分还在 Synopsys 做，有一部分去了美国，有一部分在国内出来创业一圈，随着我国大力支持 EDA 行业，他们又回到了这个行业继续奋斗。</p><p>我国是否能自研出来这些 EDA 工具？我们几十亿，几百亿地往里面砸钱，总能激起一些浪花，民族之光华为总能做出来吧？</p><p>我不确定，能不能做出来是一回事，好不好用或者能到什么深度又是另一回事。比如现在国内 EDA 工具的领头华大九天能做出部分 5 nm 芯片的国产替代，但 3nm 及以下的高端芯片就被美国卡脖子了。</p><p>EDA 这类工具在硅谷自然生长出来，而不是资本催生出来的，也不是一个或者两个公司做出来的。</p><p>行业迅猛发展有其时代的背景，因为有了些实际的需求和一定的行业积累，自然会有些人去解决问题和创新，完善的产权保护机制让人能够去解决一些看似小的问题，成为创业企业养活自己，比如像 Verilog/VHDL 这类的 Parser 是一个小公司 Verific 做的，我现在还记得是因为他们每年给客户送上一张巨大的卡通硅谷地图。</p><p>像我所在的公司这种一再被并购，大鱼吃小鱼的过程一直在发生，这些 EDA 巨头就是从无数个收购中发展起来的。</p><p>我国不缺软件开发人才和资金，但缺既有软件开发能力和这个行业背景，又能解决一些基础数学问题的人，据说国内 Synopsys 已经被挖走了一大半。也许我们短时间能好好追赶一阵，但彻底解决卡脖子的问题估计需要更多年了。</p><p>如今想起还有些怀念，单纯的一段技术工作体验。我那时候还是浮躁，要是能更多一些纯粹的好奇心就好了，这样会有更深入的体验。</p><p>但这次我们这几个聚会的同事，大多都跳出了这个行业，主要因为我们对这行没有特别大的兴趣和优势，另外想法比较多吧，总之跳了出来就不可能再回去了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这周末在上海和几个前同事聚了聚，勾起我的一股回忆。&lt;/p&gt;
&lt;p&gt;今天就写写 EDA，因为我的第一份工作就是加入了上海的一个创业公司，我们做的就是 EDA 行业中自动化形式验证工具。&lt;/p&gt;
&lt;p&gt;这个行业如今被卡脖子，资本涌入，有人称之为国内的风口，但我加入的那时候就像是
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>为 Rust 做些小贡献</title>
    <link href="http://catcoding.me/p/contribute-to-rust/"/>
    <id>http://catcoding.me/p/contribute-to-rust/</id>
    <published>2022-08-18T22:22:10.000Z</published>
    <updated>2022-11-30T04:20:28.134Z</updated>
    
    <content type="html"><![CDATA[<p>有一段时间没有写文章了，最近沉迷于<a href="https://github.com/rust-lang/rust/pulls/chenyukang">给 Rust Compiler 做些贡献</a>，这里分享一下自己的收获和感受。</p><p>契机是那天 Rust Issue 到了 <a href="https://github.com/rust-lang/rust/issues/100000">100000</a>这个里程碑，我点进去看了看。想起去年花了一周业余时间做过一个去重复的 diagnostics PR，就顺便看了看些最近的一些 issue，我发现有一个看起来比较适合的 issue，就 assign 给了自己。</p><p>过了两天居然在 Teams 收到公司的同事的消息，他问我这个 issue 什么时候能解决，因为 raw-dylib 功能要稳定了，他还在等这个 issue。我平时工作基本不会被催，没想到随便接个开源 issue 会被催，哈哈。于是我很快发了 PR，另外看了看这个 <a href="https://github.com/rust-lang/rust/issues/58713">raw-dylib 功能</a>，这涉及到 Rust 链接 dll 相关的，Windows 上不少 Rust 问题依赖这个 RFC。</p><p>后面我接着做了几个 diagnostics 方面的 issue，这类问题是最适合 compiler 开发新手的，因为通常来说修复并不复杂。我在这个过程中基本看完了 Rust Parser 这部分的代码。</p><p>初学 Rust 一个很重要的技能就是理解 Rust 的报错信息，很多时候是编译器在提示我们写程序。编译器的报错信息特别重要，太少则说明不了问题，太详细则让人抓狂。Rust compiler 在报错这方面真的非常好，基本都是源自于开发者发现了更好的报错方式，自己加上去。</p><p>我在做的过程中，发现 Rust 编译器的提示很人性化，比如 Parser 发现你该写 <code>pub</code> 的地方写了个 <code>public</code> ，则会提示你是不是应该写 <code>pub</code>，比如你写了个 <code>import mod</code>，则会提示你是不是应该写 <code>use</code>，甚至发现不容易显示的 Unicode chars，则会提示这里要注意哦。关于生命周期的提示，有的还会加上各种好看的图线标识。</p><p>甚至，他们最近开始做 diagnostics 的语言本地化了<a href="https://github.com/rust-lang/rust/issues/100717">Diagnostic Translation</a></p><p>另外 Rust 的提示在类型推导后也可以加上更多有用信息，如果我们确定这里的提示就是唯一的修复方法，则可通过 rust-fix 自动修复，所以你能看到 Rust compiler 这个 repo 的单元测试里面有很多 .fix 后缀的对比文件。</p><p>我最近在修的<a href="https://github.com/rust-lang/rust/pull/100502">另外一个 Bug</a> 是来自 Tikv 项目发现的，当函数参数中有 <code>Arc::default()</code>的时候，从类型分析的结果看，这个参数可以满足多个其他参数，这样在分析缺少的参数给出合适的提示时就会有问题，那个算法导致死循环。我花了比较多时间写出最小化的测试用例，最后给出了一个修复。我还挺喜欢分析这类 Bug，像小说一般充满了悬疑。</p><p>在这段时间里，我也和一些公司里全职做 Rust 相关的同事聊了聊，发现微软已经有几个组在全职做了，主要集中在 Rust 和 Windows、开发工具相关方面。另外和社区里其他几个开发者沟通了一下，华为的也有一些。</p><p>Rust 纯粹是互联网上自由生长出来的一门语言，创始人早已经退出主导，主要的核心成员都是社区自由组成的，这里并没有一个绝对意义上的独裁者。我碰到的几乎都是在凭热情做贡献，比如最近一年很活跃的 <a href="https://github.com/compiler-errors">compiler-errors</a> 这个开发者，有一次我催他 review PR，他说我不是全职在做 Rust，所以时间需要自己安排，不要催。我接着和他聊了聊，他的日常工作和 Rust 完全无关，花这么多时间就是爱好而已。</p><p>这里足够开放，基本上你想参与到 Rust 开发中来，这个门槛是不高的。</p><p>我并不是鼓吹 Rust 有多好，Rust 自然还有很多问题，学习成本比较陡峭，而且也并不适合很多日常项目。如果从功利角度考虑，投入产出比不高。</p><p>我只觉得 Rust 很好玩，又足够开放，吸收了多年编程语言方面的理论，完全出自开源社区和一线开发者，一切讲究实用，所以又没有 OCaml、Haskell 那种学究气，对编程语言感兴趣的朋友可以多关注一下。</p><p>为什么我能沉下去做一些看似繁琐的开源工作，这里有几个方面：</p><p>第一，我本身对编程语言的实现挺有兴趣的，几年前我基本看完了 EOPL 这本书，也做了很多里面的小解释器。可以说，编译这块算是程序员的一个小浪漫。带着问题看代码比较容易看进去，看完 Parser 这块之后，我打算再看看类型分析。</p><p>第二，Rust 这几年工具链有很大提高，比如 Rust compiler 这样的大项目，VSCode + Rust Analyzer 就能很好应对，几乎能做到所有的变量跳转，函数调用跳转和调用关系分析，类型提示等等。Rust 在这样的大型项目和多人维护的项目上能体现出优势，有编译器的和类型系统的帮助，查阅代码和写代码体验和效率都好很多，这与我日常工作中需要在一堆年代久远的 PowerShell 中翻来覆去爽太多了。</p><p>第三，最近两年在日常工作中，我接触到了大量历史悠久的代码，这些代码其实很丑陋，但每年能为公司赚不少钱。我们常说提高编程技能需要向优秀的代码学习，但我发现被迫接触一些丑陋的历史代码对编程的心性大有裨益，因为今后你看很多代码都美得很，编程和调试时候的耐心好了很多。</p><p>感兴趣的可以交流交流🙌</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有一段时间没有写文章了，最近沉迷于&lt;a href=&quot;https://github.com/rust-lang/rust/pulls/chenyukang&quot;&gt;给 Rust Compiler 做些贡献&lt;/a&gt;，这里分享一下自己的收获和感受。&lt;/p&gt;
&lt;p&gt;契机是那天 Rust 
      
    
    </summary>
    
    
      <category term="Programming" scheme="http://catcoding.me/tags/Programming/"/>
    
      <category term="Rust" scheme="http://catcoding.me/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>让 Obsidian 朗读你的文字</title>
    <link href="http://catcoding.me/p/obsidian-speech/"/>
    <id>http://catcoding.me/p/obsidian-speech/</id>
    <published>2022-07-28T17:31:10.000Z</published>
    <updated>2022-11-30T04:20:28.138Z</updated>
    
    <content type="html"><![CDATA[<p>让写作更好的一个简单粗暴的办法是成为自己的读者，不断重读自己的文字，不断地去修改。</p><p>这不止是让文字变得更易读，也是一个和自己对话的过程，Paul Graham 在<a href="http://www.paulgraham.com/words.html">Putting Ideas into Words</a>中写道：</p><blockquote><p>The real test is reading what you’ve written. You have to pretend to be a neutral reader who knows nothing of what’s in your head, only what you wrote. When he reads what you wrote, does it seem correct? Does it seem complete? If you make an effort, you can read your writing as if you were a complete stranger, and when you do the news is usually bad. It takes me many cycles before I can get an essay past the stranger.</p></blockquote><p>我习惯使用微信读书的 AI 语音来听书，后来我发现微信读书还能订阅公众号，所以尝鲜用 AI 语音来朗读自己写的文章，感觉很神奇，像是请了一个旁人来朗读。</p><p>我们通常写了文章之后会自己在心里默读，但一个真实的声音读出来会更容易发现问题：</p><ul><li>You will find your voice.</li><li>You will find mistakes and unnecessary words and sentences.</li><li>You will make your writing easy for reading.</li></ul><p>所以，我前段时间写了个 Obsidian 插件来实现朗读功能，代码在这里<a href="https://github.com/chenyukang/obsidian-speech">obsidian-speech</a></p><p>写完之后我想提交到官方插件市场，这时才发现已经有人做了个同样功能的插件，然后就不想提交了。但我还是喜欢自己的实现，因为里面有些小优化。</p><p>优化一，在阅读的过程中自动判断出英文段落，因为用中文语音去朗读英文会显得不够协调。</p><p>优化二，高亮当前朗读的段落，这样就能快速定位。</p><p>但 Obsidian 浏览器里的 AI 语音质量明显没有微信读书里的自然，支持的语音种类也少，微信读书应该是做了不少优化。</p><p>这个小插件还有不少可以继续细化的地方，比如自动跳过内嵌的代码部分，如果你感兴趣一起来完善吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;让写作更好的一个简单粗暴的办法是成为自己的读者，不断重读自己的文字，不断地去修改。&lt;/p&gt;
&lt;p&gt;这不止是让文字变得更易读，也是一个和自己对话的过程，Paul Graham 在&lt;a href=&quot;http://www.paulgraham.com/words.html&quot;&gt;Pu
      
    
    </summary>
    
    
      <category term="开发" scheme="http://catcoding.me/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="obsidian" scheme="http://catcoding.me/tags/obsidian/"/>
    
      <category term="TypeScript" scheme="http://catcoding.me/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>第 21 期：维护自己的 dotfiles；Could Facebook move faster；你和你的研究</title>
    <link href="http://catcoding.me/p/weekly-21/"/>
    <id>http://catcoding.me/p/weekly-21/</id>
    <published>2022-07-23T23:34:10.000Z</published>
    <updated>2022-11-30T04:20:28.142Z</updated>
    
    <content type="html"><![CDATA[<p>这两天我开始练习双拼输入法，目前已经找到一些感觉。双拼只需要按键两次就能输入一个汉字，我认为这种设计明显更合理，熟练后应该会比全拼快的，另外节奏感会更好些。</p><p>换一个陌生的输入法之后，似乎有那种刚使用电脑的感觉，这大概也能锻炼一下脑子，希望顺便纠正一下我前后鼻音不分的问题。</p><p>刻意对习以为常的东西做些改变，过段时间就会有不同的体验。</p><h2 id="维护自己的-dotfiles"><a href="#维护自己的-dotfiles" class="headerlink" title="维护自己的 dotfiles"></a>维护自己的 dotfiles</h2><p><a href="https://www.owenyoung.com/blog/web3-to-dotfiles/">通过创建 dotfiles,  我终于拥有了一个 web3 身份</a></p><p>owen 的博客非常棒，可以说是静态博客的典范了。我从他这里借鉴了一些理念和想法，比如把自己的博客当作一个日常都会维护的数字花园，有个不错的主页，统计自己写了多少字等小细节。</p><p>他的博客里面有很多平时收集的内容，比如<a href="https://www.owenyoung.com/quotes/">收集发人深省的话</a>，比如 <a href="https://www.owenyoung.com/sources/">探索互联网上高质量的内容 - Owen 的博客</a>，值得去看看。</p><p>程序员为什么热衷于玩博客？其实博客虽然本质上是个简单站点，但可以玩的方式很多，又不受什么约束，比如 owen 写的<a href="https://www.owenyoung.com/blog/add-search/">给 Zola 博客增加搜索功能</a>，比如<a href="https://www.joshwcomeau.com/blog/how-i-built-my-blog/">How I Built my Blog using MDX, Next.js, and React</a>。</p><p>dotfiles 是 Linux/Unix 系统里的各种配置文件，这些加上密码可称之为个人赛博空间的根基。这篇文章里详细介绍了如何长期维护这些配置，目的是减少重复工作，并保持轻量，可重现，可持续化。</p><p>虽然我之前在 Github 上看到过这类项目，但自己一直没花时间去整理自己的 dotfiles，回想起来我的 Github 账号的 ssh key 都有 20 来个了，所以看到这篇文章之后，我就开始着手干了起来。</p><p><a href="https://github.com/comtrya/comtrya">comtrya/comtrya</a>这个 Rust 写的小工具并不是非常成熟，因为还在快速开发中，其文档和实际有些出入。我在使用的过程中踩了一些坑，看源代码才解决。所以如果你也想撸起袖子干起来，选择<a href="https://www.chezmoi.io/">chezmoi</a>会更省事。</p><p>另外一个体会是，很多东西要做到自动化，首先要对重复劳动敏感，得找出规律，然后就是<strong>约定优于配置</strong>(<strong>convention over configuration</strong>)，用程序去做重复的事，而留出配置应对改变。</p><h2 id="Could-Facebook-move-faster"><a href="#Could-Facebook-move-faster" class="headerlink" title="Could Facebook move faster ?"></a>Could Facebook move faster ?</h2><p><a href="https://twitter.com/TechEmails/status/1550168842378170368">Mark Zuckerberg: Could Facebook move faster? March 30, 2012</a></p><p>Internal Tech Emails 这个推特账号经常爆料些科技公司的内部邮件。</p><p>前两天看到这个邮件，Zuckerberg 2012 年在北京待了一段时间。期间和人人网创始人和李彦宏进行了友好学习，然后他发邮件给公司几个高管，写道 Facebook 能否能像这些中国公司一样，更快地推进。</p><p><img src="/images/ob_2022-07-22-170945.png" alt=""></p><p>从邮件内容上看，Zuckerberg 对人人网所展示的一些在研发的产品表示艳羡，并能看出来他们在抄 Pinterest，在抄 Tumblr，对比之下 Facebook 简直太慢了。”<strong>Move Fast and Break Things</strong>“ 是 Facebook 所倡导的理念，但我想中国人显得更快因为我们加班更猛。</p><p>最后写道，他们确实是从其他人那里克隆想法，但是我们围绕信息、照片做的这些产品确实也没什么非常多原创想法。</p><p><img src="/images/ob_2022-07-22-171315.png" alt=""></p><p>这个推里面还有几个管理者的回复，有的比较长，主要是在思考如何做到 copying vs. innovating 的平衡。</p><p>也有人积极响应，Let’s ‘copy’ (aka super-set) Pinterest!  🤣</p><p>彼时，正是移动互联网爆发前夕，Zuckerberg 也注意到了刚上线没多久的微信，幸好他没有学到人人网和百度的精髓，不然 Facebook 可能也会泯然于众。</p><p>2011 年人人网始于校内网，也是从克隆 Facebook 开始的。我原来在学校那会儿，印象很深刻的是他们在食堂旁边摆了个摊子，注册一个账号送一个鸡腿，真鸡腿！我就是为了鸡腿去注册了个账号。</p><p>2010 年前确实好多人用校内网，2009 人人网宣布注册用户量超过 1 亿，而当年的中国网民总数量只有 3.8 亿，可以说人人网是当年最大的社交网络平台。</p><p>2011 年 5 月人人网在纽交所上市，甚至早于 Facebook，但这其实已经是公司的顶点了。人人网确实什么火做什么，却没赶上移动互联网的大船。后来更是做互联网金融、区块链，可能真是由于其浮躁最终把自己的基本盘给搞没了，<a href="https://www.huxiu.com/article/271949.html">人人网为什么没能成为中国的 Facebook?</a></p><p>公司和人一样，大抵就是创始人的化身。什么热追什么，可能是不明白自己到底想要什么，也不明白自己擅长什么。</p><p>十年光景，恍若隔世。十年对于迅速发展的互联网行业确实已经太长了，其实很多事情我们都无法预测。</p><h2 id="你和你的研究"><a href="#你和你的研究" class="headerlink" title="你和你的研究"></a>你和你的研究</h2><p><a href="https://www.cs.virginia.edu/~robins/YouAndYourResearch.html">You and Your Research</a></p><p><a href="https://www.ruanyifeng.com/blog/2016/04/you-and-your-research.html">理查德·汉明《你和你的研究》 - 阮一峰的精简版本</a></p><p>这篇文章我也是在《纳瓦尔宝典》长长的推荐列表里看到的，他说这不是专门为做学术的读者写的，适合所有想做成大事的人。</p><p>理查德 · 卫斯理 · 汉明（Richard Wesley Hamming）是美国数学家，图灵奖得主，其贡献了汉明码、汉明距离和汉明谱窗以及数值方法。关于这个主题他谈论过很多次，之前也为研究生开设过一门名 The Art of Doing Science and Engineering: Learning to Learn 的课程。互联网上也有一个相关的视频：<a href="https://www.youtube.com/watch?v=a1zDuOPkMSw">Hamming, “You and Your Research” June 6, 1995</a>。</p><p><img src="/images/ob_2022-07-22-182038.png" alt=""></p><p><a href="https://www.notion.so/6bbb616bba2b45649f46e30e6ac8c493">你和你的研究</a>这个翻译加评注版本非常好，值得好好品读，这里很多内容都值得任何想做创造性工作的人思考：</p><blockquote><p>Knowledge and ability are much like compound interest – the more you do the more you can do, and the more the opportunities are open for you.</p></blockquote><p>做出卓越的研究也需要情感上的倾入：</p><blockquote><p>Deep emotional commitment seems to be necessary for success. The reason is obvious. The emotional commitment keeps you thinking about the problem morning, noon and night, and that tends to beat out mere ability.</p></blockquote><p>这段让我想到张益唐，他对物质生活追求极低，很长时间都靠朋友接济，在朋友家打地铺，一边在 Subway 打工，一边却思考着最深入的数学难题，最终大器晚成做出惊人成果，<a href="https://www.youtube.com/watch?v=3YyxCF3rmaA">Yitang Zhang Counting from Infinity</a>。张益唐的故事如果拍成电影应该比 Nash 的还精彩。</p><p>作为一个平凡人，我羡慕那些能为人类智力边界做出拓展的人，即使是历史的注脚，也意味着在历史长河中留下了点痕迹。</p><p>但确实，学术界大部分人也是为了谋求一份生计。我曾在学校见过几个博士，他们吃了午饭后总是会去买彩票，我想经过科学训练的人应该会明白概率这回事，为什么要去买彩票，于是我就问他们，其中一个回答：虽然中奖概率极低，但是总能有个小盼头。</p><p>如今，就业越来越难，更多的人本科毕业就去读研了，读研之后还可能去读博，而很多人其实不适合做研究的，最近我看到这篇很不错的文章，<a href="https://zhuanlan.zhihu.com/p/542319901">清华姚班教授劝退文：我见过太多 PhD，精神崩溃、心态失衡、身体垮掉、一事无成</a>，读博之前认真思考一下吧。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://www.theblock.co/post/156038/how-a-fake-job-offer-took-down-the-worlds-most-popular-crypto-game">How a fake job offer took down the world’s most popular crypto game</a> </p><p><a href="https://roninblockchain.substack.com/p/back-to-building-ronin-security-breach">Back to Building: Ronin Security Breach Postmortem</a></p><p>社会工程学是终极入侵，这个剧情很精彩！北韩的黑客组织虚构了不存在的公司，通过 Linkedin 和 WhatsApp 勾搭了 Axie 的高级工程师，然后安排面试并且开出待遇优厚的 Offer。但是！发送的 PDF Offer 文件有病毒，于是成功拿下 9 个验证节点中的 4 个，然后发现某个 RPC 节点的漏洞，这样就成功侵入 Axie 系统，盗走 5.4 亿美元的数字资产。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-07-22-184823.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天我开始练习双拼输入法，目前已经找到一些感觉。双拼只需要按键两次就能输入一个汉字，我认为这种设计明显更合理，熟练后应该会比全拼快的，另外节奏感会更好些。&lt;/p&gt;
&lt;p&gt;换一个陌生的输入法之后，似乎有那种刚使用电脑的感觉，这大概也能锻炼一下脑子，希望顺便纠正一下我前后鼻音
      
    
    </summary>
    
    
      <category term="周刊、写作、程序员" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A%E3%80%81%E5%86%99%E4%BD%9C%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>第 20 期：Side Project 指南；打造私人搜索引擎；Ev 不再担任 Medium CEO</title>
    <link href="http://catcoding.me/p/weekly-20/"/>
    <id>http://catcoding.me/p/weekly-20/</id>
    <published>2022-07-17T14:16:10.000Z</published>
    <updated>2022-11-30T04:20:28.142Z</updated>
    
    <content type="html"><![CDATA[<p>最近我意识到周刊越写越长，往好处想说明自己乐在其中，我把介绍的东西当成写作的入口，以自己的经验和感受去发散和关联其他内容。</p><p>但是坏的方面可能是我在自嗨，文章长不一定好，太长了可能会让读者阅读压力大。所以，我打算控制一下长度，也节省读者的时间。</p><h2 id="Side-Project-指南"><a href="#Side-Project-指南" class="headerlink" title="Side Project 指南"></a>Side Project 指南</h2><p><a href="https://sideproject.guide/">Side Project 指南</a></p><p>不少程序员都有着做 Side Project 的激情，有的甚至踹怀着做出项目来养活自己的小梦想。而现实却很残酷，能靠业余项目达到一定收入的少之又少。</p><p>即使如此，我仍然认为做 Side Project 是程序员保持活力和创造力的好办法，程序员最理想的状态就是创造者，用编程构造一个小工具、小产品和小世界。</p><p>有的 Side Project 只是用来学习，这也没问题，我就实现过很多小的项目来纯学习，精通各种语言、各种姿势的 Hello World 🤣。</p><p>但我最近几年体会到光学习用处不大，计算机这行现在有太多的细化领域，囫囵吞枣地去不断学习是没有尽头的。更聚焦、更可能出成果的实践是找些问题、需求和方向，试着用技术思维去解决，或者是为了创作一个作品去学习相关技术，也就是结果导向、按需学习。</p><p>上周刚好看到这个尤雨溪的采访文章，<a href="https://blog.csdn.net/liurendonews/article/details/123415099">尤雨溪的作品和作品意识</a>一直是他人生的杠杆，为他创造机会，放大效益。</p><p><img src="/images/ob_2022-07-17-143048.png" alt=""></p><p>作者  <a href="https://blog.t9t.io/">timqian</a> 是一个独立开发者，他写过文章记录 <a href="https://blog.t9t.io/t9t-year1-2020-05-18/">一年独立开发经历</a>。这个小指南写得很好，覆盖了如何评估你的点子、如何快速实现、如何获取用户、如何收费这几个方面。</p><p>如果你抱着验证想法的初衷做 Side Project，最好以最小的代价来做尝试：</p><blockquote><ol><li>不写代码 </li><li>只写前端代码（包括 DAPP）</li><li>如果必须有后端服务，使用可以 Serverless 方式部署的写法</li><li>维护一个服务器<br>简而言之，对于开发来讲，优化的目标应当是让自己当前和未来的劳动越少越好。如果一定要写代码来解决，使用你最熟悉的工具。</li></ol></blockquote><h2 id="打造私人搜索引擎"><a href="#打造私人搜索引擎" class="headerlink" title="打造私人搜索引擎"></a>打造私人搜索引擎</h2><p><a href="https://thesephist.com/posts/monocle/">Building Monocle, a universal personal search engine for life</a></p><p><a href="https://thesephist.com/posts/browser/">The web browser as a tool of thought</a></p><p>Linus 是个独立开发者，从自我介绍上看主要对知识管理、效率、语言和书写工具这些方面特别有兴趣，他做了 100 来个各式各样的<a href="https://thesephist.com/projects/">开源项目</a>。他的头像看起来是一个中国人，我仔细看了简历发现是个韩国人。</p><p>我对这些工具也非常感兴趣，类比起来就像是我上学的时候对钢笔的兴趣，统称为工具痴迷吧。</p><p>我之前也提到过<sub>(可能是”孕妇效应“)</sub>，东方人对于这类工具类产品显得更痴迷些，比如 Markdown 编辑器大多是东方人做得好，Notion、logseq、Obsidian 都是华人做出来的，我前段时间发现还有个  <a href="https://wiki.dendron.so/">Dendron</a> (类似 foam) 的 VS Code 插件也是个华人发起的。</p><p>回到这两篇文章，Linus 介绍了他做的一个原型，把自己的很多数据 (blog, notes, Twitter, contact) 汇集放到一个数据源里，自制搜索引擎来检索。这是一个专属于自己赛博空间的搜索器，使用了一段时间之后，他认为体验非常好，任何自己曾经写过的东西都非常容易找到。</p><p>你可以去看看他做的这个原型，看起来还是挺有趣的。</p><p>第二篇文章做了一些拓展思考。我们现在通常会切换于各个 App 之间，虽然能在一定程度上做一些数据同步，但是<strong>no single app can be my second brain</strong>。</p><p>笔记软件帮我们能快速回忆，但更重要的是产生新的想法：</p><blockquote><p>We can take down information into apps like Roam Research or Notion and recall them easily later, but it’s an overstatement to call them tools for <em>thought</em>. Recollection is such a small, basic part of thinking! There is so much more to thinking than simply remembering something accurately. I think we can acknowledge the benefits these apps bring while also admitting that better tools for thought should help us do more with ideas than just remember and recall.</p></blockquote><p>他认为浏览器可以当作思维工具：</p><blockquote><p>The vision of the web browser that excites me the most is one where the browser is a medium for creativity, learning, and thinking deeply that spans personal and public spheres of knowledge.</p></blockquote><p>我觉得第二篇文章有些想法不错，Linus 的个人博客上还有很多好文章，值得阅读。 </p><p>但我还是认为浏览器主要是信息接收窗户，我的信息汇总的地方在 Obsidian，同时也是一个我处理信息和写作的地方。</p><p>我之前介绍过，自从用了网页标注工具 <a href="https://hypothes.is">hypothes.is</a>，像是打开了另一扇门，国内的产品 <a href="https://cubox.pro/">Cubox 个人碎片知识库</a> 是有些类似的。这周我发现还有个最近开源的实现 <a href="https://github.com/betterRunner/context-note">betterRunner/context-note</a>。</p><h2 id="Ev-Williams-不再担任-Medium-CEO"><a href="#Ev-Williams-不再担任-Medium-CEO" class="headerlink" title="Ev Williams 不再担任 Medium CEO"></a>Ev Williams 不再担任 Medium CEO</h2><p><a href="https://www.platformer.news/p/ev-williams-gives-up">Ev Williams gives up - by Casey Newton</a></p><p><a href="https://ev.medium.com/new-decade-new-ideas-faee8e712589">New Decade, New Ideas</a></p><p>Ev Williams  是美国科技创业者，很少有人像他这样深刻地影响了在线社交和媒体。他 1999 年联合创办的 Blogger 网站迎来了博客时代，Blogger 后来卖给了 Google；2006 年他联合创办了 Twitter，并于 2008 年成为 Twitter CEO；2012 年创立 Medium，一直到上周卸任。</p><p>2012 年，Ev Williams 认为互联网上分享信息已经非常方便，人们习惯了通过 Twitter 这样的短文来分享，但因为 Ads 这类盈利模式，互联网上的大多数内容都是低质量的，吸引眼球的内容。</p><p>我们需要一个专注于阅读体验和高质量的内容平台，所以 Medium 既有“媒介”之意，又意味“中等”长度的内容。</p><blockquote><p>“Now that we’ve made sharing information virtually effortless, how do we increase <em>depth of understanding</em>, while also creating a level playing field that encourages ideas that come from anywhere?”</p><p>“A beautiful space for reading and writing — and little else,  The words are central.”</p></blockquote><p>这十年间，Medium 发展并不是完全不好，事实上在创建后的前几年里 Medium 确实为互联网的一股清流，在沉浸式“读”和“写”方面做到了极致，上面的大多数文章质量高，甚至也吸引了一大批社会名流在上面写作，Obama 至今仍在上面发布内容。</p><p>Medium 从一开始就是 Ev Williams 理想化的产物，他不断地在上面实验各种想法。甚至在 2016 年 Medium 高速发展的那段时间，Ev Williams 仍然会反思公司的走向是否违背了初衷，广告模式即使在商业上做到成功，但这正是他所厌恶的东西。所以 Medium 完全放弃掉了广告的盈利模式，并且裁员 1/3。</p><blockquote><p>We believe people who write and share ideas should be rewarded on their ability to enlighten and inform, not simply their ability to attract a few seconds of attention.</p></blockquote><p>Medium 走的是内容付费模式，用户可以选择支付 5 美元的月费，即可浏览全站的内容，这些费用则将根据算法分摊交至创作者手中，形成「消费-生产」闭环。很多人对这种收费模式嗤之以鼻，可以说 Medium 走了一条更艰难的路。</p><p>这篇文章提到，Medium 2021 年将近有 700,000 的付费用户，每个月付 5 美金。但是内部数据显示，并不是高质量的内容带来了用户，而是被 Google、Facebook 的算法推荐了的爆款文章带来了付费用户，通过流量来赚钱不是 Medium 所期望的。</p><p>我倒认为增量用户通过搜索引擎来并没什么问题，问题是如何保留住作者和付费用户。这些年 Medium 一直都在变化，为了刺激作者用了很多办法：</p><ul><li>根据付费用户阅读时间累计付费给创作者</li><li>雇佣自己的编辑创造内容 </li><li>让大的 Publisher 自定义域名 </li><li>每月给靠前的创作者发额外的奖金</li><li>……..</li></ul><p>我之前也分享过，2020 年我开始在 Medium 上面<a href="https://catcoding.me/p/my-writing-story-on-medium/">锻炼英文写作</a>，收获不少，所以我对 Medium 有些感情的。但我看到越来越多的作者不再在上面发布文章了，<a href="https://tomkuegler.medium.com/why-ive-stopped-writing-on-medium-52cbf4c0db44">Why I’ve Stopped Writing On Medium</a>。</p><p>随着近两年短视频和 Newsletter 的兴起，Medium 显然进入了瓶颈期。我的感受是，这里面有些难以做到兼顾的地方。</p><p>Medium 注重内容质量，所以平台的算法倾向于大的专栏，导致个人作者很难建立起自己稳定的读者群，followers 多对于阅读量帮助也不大。我们要想让自己的文章有更多的流量，就得通过大专栏去分发，所以写完之后得给专栏投稿。这会让那些想要长期写下去的作者产生抗拒和不安全感，他们希望有稳定的读者，因此不少人去了 Substack 或者自己收集读者邮件创建 Newsletter。</p><p>另一个原因是，互联网发展到今天，愿意为内容付费的终究是少数，大部分人已经把自己的信息源交给了推荐算法，这是没法改变的大趋势。</p><p>这几年就像是一个节点，互联网上高质量的中长文内容会进一步萎缩，<a href="https://www.zhihu.com/question/49684783">中文互联网这个现象更为严重</a>。Medium 当年的国内克隆产品，比如十五言根本没起来，简书现在也基本沉没了，知乎这个专注于高质量回答内容的社区同样需要沙里淘金。</p><p>在中文互联网中，微信生态瓜分去了一大波流量，但公众号的改版却也是朝着流量广告、推荐算法的方向去了，最终把内容农场的事再在移动端重演了一次。</p><p>为什么 Newsletter 会兴起，<strong>显然读者和创作者都不想被平台和算法主导</strong>。Substack 虽然是个平台，但只要 Email 列表可以导出，创作者随时都可以带着读者离开这个平台，这是和公众号的区别，另一个区别是 Substack 没有推荐算法。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-07-17-134058.png" alt="来源 Programmer&#39;s Joke channel"><span class="image-caption">来源 Programmer&#39;s Joke channel</span></p><hr><p>这期看起来又不短，先这样吧！</p><p>我的这个周刊终于写到了第 20 期，在接近半年的时间里，一共有接近 2500 位公众号读者，也有些人通过 RSS 订阅我的博客。</p><p>这个量级当然不值一提，但我还比较满意这个里程碑，因为都是自然增长带来了各位读者。感谢大家的一路陪伴！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近我意识到周刊越写越长，往好处想说明自己乐在其中，我把介绍的东西当成写作的入口，以自己的经验和感受去发散和关联其他内容。&lt;/p&gt;
&lt;p&gt;但是坏的方面可能是我在自嗨，文章长不一定好，太长了可能会让读者阅读压力大。所以，我打算控制一下长度，也节省读者的时间。&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="写作、程序员、周刊" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98%E3%80%81%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>第 19 期，写出更好的文章；Telegram 创始人的建议；我们应该教孩子什么</title>
    <link href="http://catcoding.me/p/weekly-19/"/>
    <id>http://catcoding.me/p/weekly-19/</id>
    <published>2022-07-09T23:03:10.000Z</published>
    <updated>2022-11-30T04:20:28.142Z</updated>
    
    <content type="html"><![CDATA[<p>《纳瓦尔宝典》书后有很多参考资料和链接，我选了一些书和链接继续看。</p><p>进而我想到参考链接对读者帮助很大，因为这像是作品的源头，所以我也给自己的博客加了个 <a href="https://catcoding.me/links/">links</a> 页面，打算放一些自己喜欢的博客、文章、书籍、工具等等，以后不定期更新。</p><h2 id="写出更好的文章"><a href="#写出更好的文章" class="headerlink" title="写出更好的文章"></a>写出更好的文章</h2><p><a href="https://dilbertblog.typepad.com/the_dilbert_blog/2007/06/the_day_you_bec.html">The Dilbert Blog: The Day You Became A Better Writer</a></p><p>这篇就是纳瓦尔提到的一篇文章，教人如何写出更好的文章。当然，这里指我们日常分享、沟通交流的这类文章，比如博文。</p><p>这篇文章如此之短，我可以把它全放在这里，内嵌我的理解：</p><blockquote><p>I went from being a bad writer to a good writer after taking a one-day course in “business writing.” I couldn’t believe how simple it was. I’ll tell you the main tricks here so you don’t have to waste a day in class.</p><p><strong>Business writing is about clarity and persuasion. The main technique is keeping things simple. Simple writing is persuasive.</strong> A good argument in five sentences will sway more people than a brilliant argument in a hundred sentences. Don’t fight it.</p></blockquote><p>注重清晰度和说服力，保持简单。简单的写作是有说服力的，一个五句话的好论点会比一百句话的精彩论点更能打动人。为什么格言、箴言这类文字容易让人接受，与简洁、直白也有些关系。</p><blockquote><p><strong>Simple means getting rid of extra words</strong>. Don’t write, “He was very happy” when you can write “He was happy.” You think the word “very” adds something. It doesn’t. Prune your sentences.</p></blockquote><p>这个例子我认为更适用英语写作，当你写完之后请扫视一下其中的 very，大部分都是多余的，Grammarly 这类工具会帮你检测出这类词。中文中表示程度的修饰词非常多，“很”，”非常“，”异常”，“极其”，有时候这个程度的修饰是需要的，但清理不必要的副词和形容词，这点中英文通用。</p><blockquote><p>Humor writing is a lot like business writing. It needs to be simple. The main difference is in the choice of words. For humor, don’t say “drink” when you can say “swill.”</p></blockquote><p>为了让文章生动有趣，当你可以写成”痛饮“的时候，就不要用 “喝”，这样更形象。</p><blockquote><p>Your first sentence needs to grab the reader. Go back and read my first sentence to this post. I rewrote it a dozen times. It makes you curious. That’s the key.</p></blockquote><p>文章的第一句话很重要，要抓住读者的兴趣和注意力，你看这篇文章的开头就写得很棒，作者修改了好几次才写成这样。读者会好奇，哇，什么神奇操作能让我这么短时间内提高写作，继而会读下去。</p><blockquote><p><strong>Write short sentences</strong>. Avoid putting multiple thoughts in one sentence. Readers aren’t as smart as you’d think.  </p></blockquote><p>  写短句，这样能让更多读者更容易理解。如果你看我的文章觉得容易读懂，这也是因为我在用短句的这个技巧。</p><blockquote><p>Learn how brains organize ideas. Readers comprehend “the boy hit the ball” quicker than “the ball was hit by the boy.” Both sentences mean the same, but it’s easier to imagine the object (the boy) before the action (the hitting). All brains work that way. (Notice I didn’t say, “That is the way all brains work”?)</p></blockquote><p>不要用被动，主语在前通常更容易理解。</p><p>这点在英文写作中是特别犯的错误  =&gt; 新手在英文写作中容易犯这个错误。</p><p>看我上面这句，左边是我初稿写的，右边是我改的，看来中文写作中用这个方法也会让文章更清晰，对吧？</p><blockquote><p>That’s it. You just learned 80% of the rules of good writing. You’re welcome.</p></blockquote><hr><p>这篇文章确实简单易懂，如果你平时也写东西，可以实践一下看看效果。我最近半年看过 6、7 本关于写作的书，大概是这些：</p><p><img src="/images/ob_2022-07-08-101200.png" alt=""></p><p>我之前从未看过这类书，这次看完后有不少收获，因为自己实践过后再看自然会理解更深刻，我的博客已经写了 20 多万字：</p><p>所有文章：215 篇，总共写了：211437</p><p>原来 20 万字都这么难写出来！这也印证了那个关于”数量“的理论：</p><blockquote><p>所有的我们以为的质量问题，大多本质是数量问题。因为数量不够，差几个数量级而已。</p><p>数量就是最重要的质量。大部分质量问题，在微观上看，就是某个地方的数量不够。</p><p>最大的误区是，明明是数量不够的问题，因为错误地以为瓶颈在于质量，幻想在不增加数量的前提下，用某种奇技淫巧，偷工减料达到目的。这时候玄学，迷信和各种无病呻吟就出现了。数量不够，底子不够厚时，很多事情时做不到的。即使有时看似有捷径，欠的账迟早是要还的。</p></blockquote><p>另外，我这周发现 Obsidian 的这个插件 <a href="https://github.com/zhaohongxuan/obsidian-weread-plugin">obsidian-weread-plugin</a>，登录后可以把微信阅读上的笔记和标注同步到 Obsidian，非常方便！</p><h2 id="Telegram-创始人的建议"><a href="#Telegram-创始人的建议" class="headerlink" title="Telegram 创始人的建议"></a>Telegram 创始人的建议</h2><p><a href="https://t.me/durov/137">As I’m turning 36, some people ask how I manage to look younger than my age.</a></p><p><a href="https://tlgrm.eu/channels/@Durov/171">As I am turning 37, I put together a list of 3 undervalued and 7 overvalued things in life</a></p><p>Telegram 和 VK 的联合创始人 Pavel Durov 就像是现实版的黑客帝国男主角，他也是经常一身黑衣。</p><p><img src="/images/ob_2022-07-08-104726.png" alt=""></p><p>这看起来不像是 37 岁的男人，对吧？这两年生日的时候，Pavel  Durov 都会在自己的 Telegram 频道上发文章分享自己的心得。第一篇分享了如何让保持保养身体，一共有 7 条，你可以点进去看看，总结起来一句话就是：</p><p><strong>避免酒精、多睡、不要吃得过饱、锻炼、限制压力、不要吃肉、独自生活。</strong></p><p>“避免酒精”这点在开头和结尾都着重强调，不喝酒这对于俄罗斯人来说确实不容易。“不要吃得过饱”这点我深表赞同，我已经实践了快一个月了，晚上少吃或者不吃让我精神更好，这难道就是传说中的 Stay Hungry 😁。</p><p>“独自生活”这点看来我没法实践了，不过现在的年轻人似乎看透了这点，能不结婚就不结、能不生孩就不生，他们这种做法确实很养生。</p><p>第二篇是一些人生建议，他认为社交网络是有害的。社交媒体上源源不断的垃圾信息充斥着我们的大脑，降低了我们的幸福感和创造力。考虑到他也是一个社交网络的缔造者，不得不说这有点讽刺。</p><p><a href="https://tech.ifeng.com/a/20151006/41485655_0.shtml">Telegram 传奇：一个关于俄罗斯富豪、黑客、极权和阴谋的创业故事</a> 这篇文章值得一读，描述了 Pavel  和他哥哥因为不配合审查，被俄罗斯赶出自己创建的社交网络 vk：</p><blockquote><p>Pavel Durov 并没屈服。普京对他的要求很简单，要么听话，要么把所持有的 VK 股份，卖给普京亲信所掌握的基金或者其他关联公司。Pavel 仍然拒绝出售股份，只是这一次，他回旋的余地越来越小了，在前面几年中，普京亲信的基金们一直在从 VK 其他股东手里收购股份。董事会里面 Durov 兄弟终于成了孤家寡人，最后被迫卖出股份，放弃了他创造的一切。</p></blockquote><p>看起来俄罗斯政府确实算是相对文明了，至少是花了钱。</p><blockquote><p>在被查水表的那些年里面，Pavel 已经开始逐渐实施他理想的生活模式，其中最重要的一点是放弃所有固定资产。他卖掉房子、家具、车…到他卖出 VK 股份的时候，他已经不再持有任何固定的资产了，只有大量的钱。差不多也是在这段时间里面，他和哥哥 Nikolai 完成了 Telegram 最早期的工作。</p></blockquote><p>正因为 Pavel 被俄罗斯政府监听搞怕了，Telegram 非常注重用户的隐私安全。当年 Facebook 宣布收购即时通讯软件 Whatsapp，在之后的 5 天里面 Telegram 增加 800 万用户。最近两年，疫情之后 Telegram 用户激增，现在全世界月活已经达到了 6 亿。</p><p>我虽然注册 Telegram 很早，但最近才成为我日常都会使用的工具。我发现除了用来沟通，上面也有一些不错的内容，比如频道这东西，有点类似于群，但又没有群那么聒噪。如果你有些有趣的 Telegram 资源，请推荐给我。</p><h2 id="我们应该教孩子什么"><a href="#我们应该教孩子什么" class="headerlink" title="我们应该教孩子什么"></a>我们应该教孩子什么</h2><p><a href="https://www.wired.co.uk/article/yuval-noah-harari-extract-21-lessons-for-the-21st-century">Yuval Noah Harari on what 2050 has in store for humankind</a></p><p><img src="/images/ob_2022-07-08-172548.png" alt="图片来源 WIRED"><span class="image-caption">图片来源 WIRED</span></p><p>这篇文章写得稍微有些正式，所需要地词汇量相对大些，但我认为写得非常好，内容也比较深入。如果你想锻炼一下自己的英文阅读，可以试着去读读。</p><p>现在出生的小孩们，参加工作的时候大概是 2050 年，他们甚至很可能会活到 2200 年。我们该教小孩什么，才能让他们更好地应对越来越快的变化？</p><p>过去很长时间里，我们在教学中通常会不断地给小孩灌输信息，因为信息是有价值而匮乏的。而如今信息唾手可得，并且多到让人无法消化，我们应该教的是让小孩理解信息，最重要的是把大量信息融合成一个广阔的世界图景。</p><blockquote><p>Instead, people need the ability to make sense of information, to tell the difference between what is important and what is unimportant, and above all to combine many bits of information into a broad picture of the world.</p></blockquote><p>我们的教学也是倾向于传授具体的技能，比如我初中的时候，老师教计算机老师让我们背词根，这是为了练习打字。同样，我们现在教小孩的技艺，在未来几十年是否也会同样用处不大？</p><p>文中写道，为了应对变化，我们应该塑造的是通用能力：批判性思维、沟通、协作、创造力。</p><blockquote><p>So what should we be teaching? Many pedagogical experts argue that schools should switch to teaching “the four Cs” – <strong>critical thinking, communication, collaboration and creativity.</strong> More broadly, schools should downplay technical skills and emphasise general-purpose life skills. Most important of all will be the ability to deal with change, to learn new things and to preserve your mental balance in unfamiliar situations. In order to keep up with the world of 2050, you will need not merely to invent new ideas and products – you will above all need to reinvent yourself again and again.</p></blockquote><p>同样，对于我们自己，在这个不断变化的世界中要做到不断地进化自己，虽然对成年人来说更困难一些：</p><blockquote><p>To survive and flourish in such a world, you will need a lot of mental flexibility and great reserves of emotional balance. You will have to repeatedly let go of some of what you know best, and feel at home with the unknown.</p></blockquote><p>这让我想到了智力复利的概念 <a href="https://threadreaderapp.com/thread/940411657842434048">intellectual compounding</a>，大部分人在一定年龄之后 (通常是毕业后工作几年)，就停止了能力和智力方面的增长。人就像是计算机一样，要保持更新 Growth mindset 和 Motivation mindset 非常重要。</p><p>之前听到过这么一句话：当一个老年人对你说什么事是可以做的，他说的大多是对的，而当他对你说什么事是做不到的，他说的很可能是错的。</p><p>这话有点拗口，不过值得琢磨。在过去，跟随年长者的建议是一个相对安全的选择，因为他们非常了解这个世界，世界也变化得很慢。但现在不同了，由于变化的速度越来越快，你无法确定他们告诉你的是永恒的智慧还是过时的偏见。</p><p>前段时间有件小事，让我感受到不同时代的人之间的鸿沟。一个老奶奶卖自己种的菜，结账的时候她和我说只能收现金，我已经没有身上带现金的习惯了。而后，我拉着女儿的手，想到在她的观念里，手机和二维码是出生时就存在的。</p><p>关于时代大变迁下人的命运和感受，我印象比较深刻的是贾樟柯的一系列电影，比如《小武》、《站台》、《山河故人》等。</p><p>在《山河故人》中，发了财的张晋生带儿子移民澳洲，平时交流一个用中文一个用英文，吵架需要用翻译软件。儿子说我不知道要做什么，什么都没兴趣，他爸说你给老子先把中文学好。</p><p>这些场景看起来让人悲伤和无奈。终有一天，我们也可能被时代抛弃，生活在边缘，并且我们也无法完全理解下一代。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd">A complete overview of SSL/TLS and its cryptographic system</a>，关于 SSl/TLS 和加密方面非常详细的解释。</p><p><a href="https://www.cliveshd.com/">Clive SHD｜Sailing in Web3</a>, 思维模型、生产力工具、web3 等相关的话题。如果你像我一样观望着 web3，应该会很喜欢他的 web3 周刊。</p><p><a href="https://m.weibo.cn/status/4788211404768630">安全这事，当一个公司没有在这事上吃过亏，是很难重视起来的</a>，某天早上我爬起来就乱写了一通，结果被大 v 转到微博并传播开来了，直到那天下午一个远方亲戚问我，这个作者是你么。我才知道这个帖子好像破圈了，我第一次尝试 Twitter 这种 thread 式的写法，感觉比较自由，另一个好处是你需要每段把一个事情说明白，而且不能太长，这看起来也是个锻炼写作的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《纳瓦尔宝典》书后有很多参考资料和链接，我选了一些书和链接继续看。&lt;/p&gt;
&lt;p&gt;进而我想到参考链接对读者帮助很大，因为这像是作品的源头，所以我也给自己的博客加了个 &lt;a href=&quot;https://catcoding.me/links/&quot;&gt;links&lt;/a&gt; 页面，打算放
      
    
    </summary>
    
    
      <category term="周刊、写作、程序员" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A%E3%80%81%E5%86%99%E4%BD%9C%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
</feed>
