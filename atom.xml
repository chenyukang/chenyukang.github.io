<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2022-05-26T07:26:09.958Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>推荐一些播客</title>
    <link href="http://catcoding.me/p/podcast/"/>
    <id>http://catcoding.me/p/podcast/</id>
    <published>2022-05-26T15:07:06.000Z</published>
    <updated>2022-05-26T07:26:09.958Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_2022-05-26-150812.png" alt=""></p><p>最近半年我花了些时间听播客。播客的好处在于声音能很好地传递情感，有的创作者的声音非常好听。另一个好处是带娃、做饭、散步的时候都可以听，就当时听人唠嗑。我觉得阅读久了眼睛和脖子都酸，但听内容没有这个问题。</p><p>这段时间听下来，我觉得有些内容都非常好，听了有收获。</p><p>我主要使用了两个 App，一个是 Google 播客用来听些英文内容，另一个是小宇宙。</p><p><sub>耳机设备用韶音骨传导耳机，这个耳机我之前主要用来跑步的，已经用了三年左右。骨传导耳机的最大好处是长久戴也不觉得难受。我记得 2016 年左右，有个前同事几乎每天都戴着这东西，我一度认为他戴的是个助听器，所以和他聊天会下意识提高一下嗓音。后来我才知道，这东西叫骨传导耳机。</sub></p><p><sub>顺便夸赞一下韶音这个品牌，前段时间我的耳机里面的一个零件有点松动，走起路来有异响，我就联系了他们的客服。售后让我寄回去看看，虽然已经过了质保期，他们还是免费给更换了零件。</sub></p><p>下面推荐一些我喜欢的内容。</p><h2 id="英文播客"><a href="#英文播客" class="headerlink" title="英文播客"></a>英文播客</h2><p>英文播客里首推 Lex Fridman，他的访谈对象通常都很大牌。Lex 的说话方式我很喜欢，显得很正派、又真诚，比如访谈 Zuckerberg 那期，在开头那段为乌克兰所说的话，可以听出来非常动情，而他是个俄罗斯裔。</p><p>另一个推荐的是微软的  Scott Hanselman， <a href="https://www.hanselminutes.com/">Hanselminutes Technology Podcast</a>。他的角色类似技术布道师（Technical Advocates），这个角色有点像产品，但也写文章、做播客、宣传之类的。</p><h2 id="中文播客"><a href="#中文播客" class="headerlink" title="中文播客"></a>中文播客</h2><p>我听得比较多的是这些：</p><ul><li>孟岩 - 无人知晓，主要是些个人成长、商业、理财</li><li>Steve 说，偏综合类，心理学、访谈</li><li>三五环，访谈类</li><li>奇想驿 by 产品沉思录，少楠，产品和成长类</li><li>快乐三十分，happyxiao 的播客，工具、写作、效率、个人成长等</li><li>乱翻书，科技类</li><li>从零道一，IT 类，嘉宾通常是些技术行业领袖</li><li><a href="https://avocadotoast.live/">牛油果烤面包（Avocado Toast）</a>， IT 类访谈</li><li><a href="https://bytetalk.fm/">ByteTalk</a>，技术、开源等</li></ul><h2 id="一些印象深刻的"><a href="#一些印象深刻的" class="headerlink" title="一些印象深刻的"></a>一些印象深刻的</h2><p><strong>Steve 说 274 期 - 陈楸帆 - 理性工作交给 AI，人类走向意识深处</strong></p><ul><li>关于 AI，科幻等等</li><li>在收听这期的时候我想到，科幻也许对缓解压力和焦虑特别有用，因为科幻小说让人超越时空维度，用想象，从更广的维度来理解世界，当我们意识到人类是如此渺小时，生活中的很多平时觉得非常重要的事情就显得不那么重要了</li><li>这期推荐了一些科幻方面的好书，我打算今后找来看看</li><li>我最近看了刘慈欣的《赡养人类》，里面的故事看起来荒诞，但逻辑上似乎说得通</li></ul><p><strong>E09 孟岩对话黄海：让更多人知道你，还是让爱你的人更爱你</strong></p><ul><li>关于如何做品牌，人们去星巴克不是为了咖啡，而是为了那个环境以及朋友之间的交流</li><li>在做品牌早起的时候，一种策略是让爱你的人更爱你，而不是让更多人知道你，因为解决了第一个问题，第二个问题也就好办了</li><li>关于星巴克创始人霍华德·舒尔茨的书《将心注入》也许值得一读</li></ul><p><strong>E10 无人知晓：让万物穿过自己</strong></p><ul><li>这期非常推荐，孟岩即兴发挥，但是听起来效果特别棒</li><li>这期他谈了很多，有内容创作、生活、投资等方面的个人体验</li></ul><p><strong>E12 孟岩对话池建强：人生最有价值的时刻，也许是那些对未来充满期待与不安之时</strong></p><ul><li>虽然之前也看过一些池建强的文章，但通过这期更深入了解他了</li><li>我很赞成他的一些生活方式，比如乐观，保持迟钝感</li></ul><p><strong>奇想驿 by 产品沉思录：关于死亡：生命并不是永不干枯的井，而死亡会随时到达</strong></p><ul><li>一些关于死亡的思考，引起我的共鸣，选的音乐也好听</li></ul><hr><p>我觉得播客是个很好的创作内容的方式，像少楠、孟岩、池建强这些人在创业，而花时间来录制这些内容，我想现在这个年代，好的内容是获取信任的重要渠道。人们更愿意相信鲜活的个体，声音介于文字和视频之间，刚刚好。</p><p>如果你有好的播客内容，欢迎推荐给我。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_2022-05-26-150812.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近半年我花了些时间听播客。播客的好处在于声音能很好地传递情感，有的创作者的声音非常好听。另一个好处是带娃、做饭、散步的时候都可以听，就当时听人唠嗑。我觉得
      
    
    </summary>
    
    
      <category term="播客" scheme="http://catcoding.me/tags/%E6%92%AD%E5%AE%A2/"/>
    
      <category term="资料" scheme="http://catcoding.me/tags/%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>第 14 期，找出人生中真正重要的事；PowerShell 的故事；好玩的个人主页</title>
    <link href="http://catcoding.me/p/weekly-14/"/>
    <id>http://catcoding.me/p/weekly-14/</id>
    <published>2022-05-22T20:47:07.000Z</published>
    <updated>2022-05-26T07:26:09.962Z</updated>
    
    <content type="html"><![CDATA[<p>最近在一封邮件看到这段话：</p><blockquote><p>After a certain point, your goal is no longer to build a writing habit.</p><p>Your goal becomes falling so in love with interesting ideas that you <em>can’t not write about them</em>.</p><p>Curiosity breeds compulsion, and that’s far more important than forced consistency when trying to make work that’s fresh and inspired.</p></blockquote><p>从读者角度来说，频繁更新的博客不一定值得频繁阅读，我们需要的是启发人的观点，而不是为了更新去写的内容，因为没有人能定时产生有价值的想法。</p><p>这段话来自 Julian Shapiro，就是我今天分享的第一篇文章的作者。</p><h2 id="找出人生中真正重要的事"><a href="#找出人生中真正重要的事" class="headerlink" title="找出人生中真正重要的事"></a>找出人生中真正重要的事</h2><p><a href="https://www.julian.com/blog/life-planning">How to figure out what to do with your life</a></p><p>Julian Shapiro 是一个软件开发者，创建过一个比较流行的 JavaScript 库<a href="https://github.com/julianshapiro/velocity">julianshapiro/velocity</a>，也做过创业公司。</p><p>我订阅了他的 newsletter，他分享写作和个人成长方面的内容，文章都非常棒，你可以看看他的个人网站 <a href="https://www.julian.com/">Julian Shapiro</a>。</p><p>这篇文章中，他分享了如何确定不同人生阶段重大事项的优先级。我们需要定期去思考这些，因为随着年龄的增长，人的关注点和追求会改变。最近发现有的朋友也开始了第二人生，我想他们应该经过了类似的评估。</p><p>作者的方法包含以下几个维度：</p><p><img src="/images/ob_2022-05-20-122353.png" alt=""></p><p>他基于这个方法评估出，自己不想再把做公司和挣钱放在第一位了，而写作优先级更高。但心里还有些犹豫，直到他看到 <a href="https://www.youtube.com/watch?v=jwG_qR6XmDQ">Jeff Bezos 的一个访谈</a>后有所顿悟。</p><p>Jeff Bezos 当时决定做亚马逊线上卖书的时候，使用了一个自称为 Regret Minimization Framework 的方法，简而言之就是：<strong>假设当你 80 岁回首往事时，你会不会为不做这个事而遗憾？当你将未来的遗憾最小化时，你会睡得很香，因为你知道你在最大化地实现自己。</strong></p><p>这个词语有点技术化，不过和《钢铁是怎样炼成的》里的这句话是相同的：</p><blockquote><p>人最宝贵的东西是生命。生命对人来说只有一次，因此，人的一生应当这样度过：当一个人回首往事时，不应虚度年华而悔恨，也不应碌碌无为而羞愧。</p></blockquote><p>文章后面接着谈到钱的重要性和正确认知，这和我之前介绍过的<a href="https://catcoding.me/p/weekly-10/">最高形式的财富</a>是一致的，钱能让人更自由，拒绝那些自己不想做的事。</p><p>人应该花更少的精力试图变得超级富有，而花更多的精力建立亲密关系、挚友圈，这些可以陪伴我们直到老去。</p><p>最后谈到 groupthink，每个人都属于自己所处的圈子，而这个圈子的人会对自己的认知造成很大的影响。为了打破趋同思维，我们需要不断问自己类似这样的问题：如果人生重来一次我想怎样？如果不缺钱我想做什么？</p><blockquote><p>I’ve noticed that many people compete in games they don’t understand because they are modeling the behavior of people around them. Most common is the competition for wealth as a proxy for happiness.   </p><p>—Michael Seibel</p></blockquote><p>从个人的经历来说，我似乎进入了低物欲的阶段，对电子产品都没兴趣了。最近花了很多时间看小说，把余华的主要作品看了一遍，我觉得这个年代的普通人都好幸福。</p><p>物欲的衰退也许是年龄和激素在作怪，谁知道呢，我觉得这样挺好。</p><h2 id="PowerShell-的故事"><a href="#PowerShell-的故事" class="headerlink" title="PowerShell 的故事"></a>PowerShell 的故事</h2><p><a href="https://twitter.com/jsnover/status/1523010444570419200">Jeffrey Snover on Twitter</a></p><p><img src="/images/ob_2022-05-20-143948.png" alt=""></p><p>Jeffrey Snover 是微软 Technical Fellow，这是不做管理的纯技术人员在微软的顶点，根据<a href="https://en.wikipedia.org/wiki/Category:Microsoft_technical_fellows">维基上的记录</a> ，目前一共只有 18 人。</p><p>Snover 在上面那个推特上回忆了自己最初做 PowerShell 原型而被降级的往事。这个故事也许你在其他新闻媒体上看到了，我们从技术角度来了解一下整个故事。</p><p>曾经，微软内部把开源和 Linux 视为敌人，对命令行这种风格的工具也是不屑一顾，甚至视为异己的：</p><blockquote><p>At the time, the “shell” project was viewed as a Linux-compete checkbox item of no importance whatsoever.</p></blockquote><p>但 Snover 觉得自动化很重要，而 GUI 不适合做这方面，所以他做了这个 PowerShell 的原型，结果就是违反了公司主流而被降级。</p><p>Snover 坚持住了，他没有一味的把 Linux 那套 Shell 搬过来，而是借鉴了一些思想，然后根据 Windows 的环境和风格做了创新。光有理念和原型不够，也得有策略，在那些被压迫的日子里，他找到了公司内部的大用户 exchange，当真金白银投入到这个技术上之后，降级也不怕，没几年他就被晋升了。</p><p>他在这个<a href="https://evrone.com/jeffrey-snover-interview">访谈</a>中回顾了更多当时的细节，Unix/Linux 的很多设计是基于文件和文本的，而 Windows 的设计是基于对象和 API 的，所以 PowerShell 管道中传递的是 Object 而不是文本，管道中也不像 Linux 那样都是跑的多个进程。</p><blockquote><p>Why invent PowerShell, why not just use ksh or bash? I’m a long time Unix dev so that was my first instinct. I tried and failed. There is a core architectural difference between Unix and Windows. Linux is a file-oriented OS and Windows is an API-oriented OS. In Linux, if you can modify a file and run a process, you can manage anything. That is why awk, sed, and grep are management tools. At the time, nothing on Windows worked that way. Everything was behind an API which returned a structured object.</p></blockquote><p>后来 PowerShell 开始在微软自动化方面张露头角，并且随着新的 CEO Satya 宣布拥抱 Linux 和开源，以及微软整体上云的大趋势，PowerShell 成为不可缺少的基础设施和工具。</p><p>刚来微软的时候，我也觉得 PowerShell 好像挺奇怪的，熟悉了之后就觉得这东西很好！我们可以用命令行操作一个个对象，这些对象和 .Net Object 是对应的，PowerShell 也可以和 .Net 来交互，比如用 C# 来实现命令，而且现在也是开源跨平台了。</p><p>正在开发的 nushell 借鉴了 PowerShell 的这一理念 <a href="https://github.com/nushell/nushell">nushell: A new type of shell</a></p><h2 id="好玩的个人主页"><a href="#好玩的个人主页" class="headerlink" title="好玩的个人主页"></a>好玩的个人主页</h2><p><a href="https://henryheffernan.com/">Henry Heffernan - Portfolio 2022</a></p><p>我非常羡慕那些既能编程又能做些设计的人，比如这位年轻的程序员，他的个人主页让人眼前一亮，强烈推荐你点进去看看：</p><p><img src="/images/ob_2022-05-21-083853.png" alt=""></p><p>主页所有代码也是开源的：<a href="https://github.com/henryjeff/portfolio-website">henryjeff/portfolio-website</a>，使用了 TypeScript 、three.js。类似的主页还有 <a href="https://bruno-simon.com/">🚗 bruno-simon.com</a><br><img src="/images/ob_2022-05-21-084855.png" alt=""></p><p>即使是个人网站这样的小项目，这些人也能投入这么大精力和热情，玩出这么多花样。比如另一个前端工程师 Josh Comeau 这篇文章里分享了自己如何设计和实现个人网站<a href="https://www.joshwcomeau.com/blog/how-i-built-my-blog/">How I Built my Blog using MDX, Next.js, and React</a>，其中那个动画人物的设计花了 500 美金。使用 MDX 可以构建出一些更具交互性的文章，这里面不仅有文字，还有对应的代码动画，比如 <a href="https://www.joshwcomeau.com/animation/a-friendly-introduction-to-spring-physics/">Spring Physics animation in JavaScript</a>。</p><p>这让我想起自己在知乎回答的 <a href="https://www.zhihu.com/question/502884696/answer/2296787480">为什么中国程序员不如外国程序员有创造性</a>，只有当我们有足够多的业余时间才能做出更多创造性的东西，这些创造性的东西可能不是为了名利，不是为了 KPI，只是为了好玩和分享，而那些伟大的项目 Linux、Ruby、Python 的源头都是 Just for fun。</p><p>再联想到 gitee 最近的代码审核，不禁心生悲哀。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>30 年软件开发学到了什么： <a href="https://blog.juliobiason.me/thoughts/things-i-learnt-the-hard-way/">Julio Biason</a></p></li><li><p>最近因为居家带娃上班，我需要带着笔记本去小区滑滑梯，所以使用触摸板时间多了，Thinkpad 的触摸板感觉比 Mac 差不少，但键盘体验很好。我就想着如何能提高效率，试着用了一下 Thinkpad 的小红帽，适应了一段时间感觉还不错，后来搜索发现了这个程序员的浏览器插件。如果你使用 VIM 和快捷键工具肯定会很喜欢这个 <a href="https://github.com/philc/vimium">philc/vimium: The hacker’s browser.</a></p></li></ul><h2 id="言论"><a href="#言论" class="headerlink" title="言论"></a>言论</h2><p><img src="/images/ob_2022-05-21-091310.png" alt=""></p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-05-18-223422.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在一封邮件看到这段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After a certain point, your goal is no longer to build a writing habit.&lt;/p&gt;
&lt;p&gt;Your goal becomes fallin
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>送一套 Java 好书 🙌</title>
    <link href="http://catcoding.me/p/book-on-java/"/>
    <id>http://catcoding.me/p/book-on-java/</id>
    <published>2022-05-18T08:07:06.000Z</published>
    <updated>2022-05-26T07:26:09.950Z</updated>
    
    <content type="html"><![CDATA[<p>我写公众号的一个初衷就是认识更多不同的人，写了几个月确实结识了些线上朋友。这不，图灵出版社的编辑送了我一套书，因为物流的问题导致他们多发了一套，所以我们打算在公众号里送出去一套。</p><p>On Java 基础卷和进阶卷，两本总共价值 <strong>259</strong> 元。</p><p><img src="/images/ob_2022-05-17-184505.png" alt=""></p><p>顺便说说我对 Java 的一些想法。从毕业到工作这么多年，我在工作中使用 Java 的机会不多，不过在搞安全的那段时间，我发现使用 Java 开发的项目比想象中多得多，特别是在电商、金融这些企业级开发领域。</p><p>这些年 Java 一直发展得也很不错，Java 开发岗位一直都是做多的。JVM 本身是个很好的虚拟机平台，经过多年的优化性能上没有问题，还衍生了  Scala、Kotilin、Clojure 等多门语言，所以花些时间学习一下 Java 还是很有必要的。</p><p>这本 On Java 是百万畅销书 Thinking in 系列作者 Bruce Eckel 的最新力作。我记得上学的时候看过他的 Thinking in C++。Bruce Eckel 这么多年来一直笔耕不缀，你可以看到他的博客持续更新了 17 年：</p><p><a href="https://www.artima.com/weblogs/">Artima Weblogs</a><br><a href="https://www.bruceeckel.com/">Computing Thoughts</a></p><p>一些老文章比如这篇 <a href="https://www.artima.com/weblogs/viewpost.jsp?thread=259358">A Career in Computing</a> 对职业发展的建议如今看来仍然非常有价值。</p><p>收到这本书后，我花了些看时间了一遍基础卷，本书的几个译者都是有多年一线开发经验的工程师，所以翻译质量没什么问题。我觉得要是短句更多些会更易读，不过翻译这事每个人的体验有差异，过于追求完美就太耗费时间。你可以在 <a href="https://www.ituring.com.cn/book/2935">On Java 中文版 - 基础卷</a> 阅读前几章感受一下。</p><p>这套书非常厚，两本加起来一共 1360 页，其中很多部分可作为 Java 学习的参考书，需要的时候再细看。这么厚不止因为 Java 的知识点多，对编程中的一些共有主题，比如泛型、测试、异常、并发、设计模式等都有涉及。</p><p>我觉得更好的是 Bruce Eckel 写了些语言设计者角度的思考，有的部分是以开放式的讨论语调在写，这里没有给你一个绝对的解决方案，而是在讨论不同方案的优劣。书中也不止在介绍 Java ，还写了些 C++、Go 等语言的设计选择，<strong>站在设计者的角度考虑就明白，没有完美的编程语言，只有不断地取舍</strong>。</p><p>另外，这本书的用料很不错，装帧精致：</p><p><img src="/images/ob_2022-05-17-212000.png" alt=""></p><p><img src="/images/ob_2022-05-17-212038.png" alt=""></p><p>我对公众号抽奖不太熟悉，所以就定个简单规则：<strong>文章发布后到明天晚上 8 点前，留言点赞数最多的朋友就获得这套书</strong>。</p><p>留言写些什么都行，气氛搞起来😉，我手里还有些自己看过的计算机书籍，说不定以后继续送。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我写公众号的一个初衷就是认识更多不同的人，写了几个月确实结识了些线上朋友。这不，图灵出版社的编辑送了我一套书，因为物流的问题导致他们多发了一套，所以我们打算在公众号里送出去一套。&lt;/p&gt;
&lt;p&gt;On Java 基础卷和进阶卷，两本总共价值 &lt;strong&gt;259&lt;/stro
      
    
    </summary>
    
    
      <category term="书籍" scheme="http://catcoding.me/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="Java" scheme="http://catcoding.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第 13 期，工程师的修炼与成长；Niche 程序员；Sun 的第 8 号员工</title>
    <link href="http://catcoding.me/p/weekly-13/"/>
    <id>http://catcoding.me/p/weekly-13/</id>
    <published>2022-05-16T08:40:06.000Z</published>
    <updated>2022-05-26T07:26:09.962Z</updated>
    
    <content type="html"><![CDATA[<p>这是上周写的周刊，昨天忙着带娃忘记发了。苏州第三次尝试恢复正常，幼儿园计划 23 号开学，希望这次能结束我居家带娃上班的生活。</p><h2 id="软件工程师的修炼与成长"><a href="#软件工程师的修炼与成长" class="headerlink" title="软件工程师的修炼与成长"></a>软件工程师的修炼与成长</h2><p><a href="https://vgod.medium.com/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E4%BF%AE%E7%85%89%E8%88%87%E6%88%90%E9%95%B7-10-%E5%9B%9B%E7%B6%AD%E7%9A%84%E6%8A%80%E8%A1%93%E8%83%BD%E5%8A%9B-1602882aec33">軟體工程師的修煉與成長</a></p><p>这是一位软件工程师 vgod 写的好文，他在台湾成长，后来去了 MIT 读书，毕业后在硅谷工作。我很早之前看过一些他博客的文章，最近通过 <a href="http://weekly.codelc.com/">野生架构师</a> 的 Newsletter 发现他在 Medium 上写作了。</p><p>在 <a href="https://vgod.medium.com/%E8%BF%BD%E6%B1%82%E7%A5%9E%E4%B9%8E%E5%85%B6%E6%8A%80%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E4%B9%8B%E9%81%93-2022%E9%87%8D%E7%B7%A8%E7%89%88-7cccc3c68f1e">追求神乎其技的程式設計之道 — 2022 重編版</a> 这篇长文中他分享了自己学习编程的经历和感悟，非常值得一读。他最近写的 <a href="https://vgod.medium.com/list/e731a8ecf20d">《软件工程师的修炼与成长》</a> 系列里有技术成长、公司选择、职业发展等各个话题。</p><p>为什么有的人通过几个月的培训和刷题后就能做软件开发，而另外一些人经过了近 10 年的科班训练也是做软件开发，这两者有何区别？</p><blockquote><p> <strong>高手對技術的理解是四維的</strong></p><p>我在 D 社看過不少非常厲害的工程師，他們的共同特點是對於軟體系統的理解是「四維」的。如果把我們用來開發的程式語言和框架比喻成整個系統最上層的「二維表面」，在這個表面下面其實還有非常多層的抽象介面，就像一個千層蛋糕一樣，一層一層疊起來變成現在大家看到簡單易用畫面又精美的軟體。</p><p>厲害的工程師並不是不用常見的程式語言或框架，而是他們在用這些工具的同時，也可以往下多看到好幾層的系統內部發生了什麼事。這個對於系統「深度」的掌握，就是第一個維度的差別。</p></blockquote><blockquote><p>軟體界有個說法，所有重要的核心概念其實在 30 年前就都已經發明完了。現在很多「新技術」只是用新語言、新框架、新系統來重新實做和組合這些舊想法而已。</p></blockquote><p>文中举例在浏览器里输入一个地址后，会发生什么。这个问题也经常出现在各个面试中，面试官喜欢出这个问题是想看看候选人的深度和广度。这个问题很开放，我们可以从广度上列举很多点，经验越丰富的人能看到的就越多，而面试官也可以就某个点去不断探视候选人的深度。</p><p>这个 Github repo <a href="https://github.com/alex/what-happens-when">what-happens-when</a> 就是用这个问题来串出各个知识点，值得一看。</p><h2 id="Niche-Programmer"><a href="#Niche-Programmer" class="headerlink" title="Niche Programmer"></a>Niche Programmer</h2><p><a href="https://ano.ee/blog/the-niche-programmer">The Niche Programmer</a></p><p>Niche 就是小众，这里指使用小众技术栈的程序员。我查了一下才了解到，Niche 来源于法语，法国人信奉天主教，在建造房屋时，常常在外墙上凿出一个不大的神龛，以供放圣母玛利亚。它虽然小，但边界清晰，洞里乾坤，因而后来被引来形容大市场中的缝隙市场。</p><p>这个作者因为阴差阳错的机会去了一个使用 Clojure 的小公司，他吭哧吭哧干了 3 年，然后公司决定从 Clojure 换成 TypeScript，因为 Clojure 太难招人了。作者觉得 Clojure 肯定是一个正在衰落的语言，想着以后找工作再回到主流技术栈好了。</p><p>没几个月他想换工作了，于是开始求职，他发现 Clojure 竞争很小而薪水也不错，而且这些公司面试会不考 Leetcode 之类的，主要是看你的经验和技能，他们会仔细看你的 Github 主页。</p><blockquote><p>Anyway, this is all to say that being a niche programmer is not bad at all. Pay is great, competition is low and the interview processes for the most part very humane. If Clojure ever makes it mainstream, I’ll find a new niche language to specialize in.</p></blockquote><p>这就是差异化竞争吧，也许在内卷的人才市场上这是个策略。我觉得在国内也可以试试，因为很多小众技术栈的公司允许远程，但最好前提是英语足够好，因为这种采用小众技术栈的公司大多在国外。</p><p>我之前面试过一个做 SEO 工具的公司 (Ahrefs)，做 SEO 的朋友应该都听过这个公司。他们就是采用小众技术栈 OCaml。</p><p>我 2020 年试着投递了简历，然后居然就收到了面试邀请，我猜测也是投递的人数太少。第一面就是公司的 CTO，人在乌克兰，他的英语口音还我听不太懂，所以他就说得很慢，很有耐心地解释他们公司和技术挑战。后面给我留了一个小项目，需求很清楚但也可以自己发挥，我当时写的代码在这 <a href="https://github.com/chenyukang/ocaml-chat">ocaml-chat</a>。</p><p>后面又进行了一轮长的面试，两个面试官，另外一个是法国人 (OCaml 现在的大部分热衷者都是法国人)。这轮我英语的不足表现出来了，因为大多是开放性的问题，我的口语还不足以自由表达，加上法国人的英语我也不太听得懂，所以沟通还是有些困难。</p><p>尽管最终没有面成功，这是个不错的面试经历，也让我有了更大的动力来提高英语水平。我觉得小众技术栈有些挺好玩，如果能找到对应的工作就很好。</p><h2 id="Sun-的第-8-号员工"><a href="#Sun-的第-8-号员工" class="headerlink" title="Sun 的第 8 号员工"></a>Sun 的第 8 号员工</h2><p><a href="https://twitter.com/aka_pugs/status/1521489115585421314">Tom Lyon - on Twitter: 40 years ago today: I joined a tiny startup called Sun Microsystems</a></p><p>Tom Lyon 在这个 Twitter thread 里讲述了他 40 年前加入 Sun 的故事，顺带讲了一些 IT 历史故事。</p><p><img src="/images/ob_2022-05-14-151400.png" alt=""></p><p>1978 年他开始在硅谷工作，主要是把 Unix 移植到大型机上。他那时候会去 Berkeley 听 Bill Joy 的讲座，自称是第一个实现 Unix 里面的 select 接口的。虽然最终 Unix 没有采用他的版本，但这也让 Bill Joy 记住了他，为后来进入 Sun 瞒下伏笔。</p><p>他找工作时和 Valid Logic Systems 聊过，这是第一个 EDA (electronic design automation) 商业公司。我第一份工作也是做 EDA 工具，当时我所在的那个公司在中国研发，美国销售。那已经是 2011  年了，EDA 在美国已经成为大家口中的夕阳行业。而最近几年，因为被卡脖子的事，中国兴起了一波自研 EDA 工具的公司，可这整整已经差了 40 年。</p><p>1982 年作者去了 Sun 面试，那时候 Bill Joy 已经以联合创始人的身份加入了 Sun，Bill Joy 给了一个 20 人左右的名字让人去挖，他就是其中一个。</p><p>他当时的 offer 是每月 2000 美金，另有 4 位数的股票。当时美国的家庭年收入大概是 2 万多美金，可见当时 IT 行业的薪水并不像现在这样如此突出。</p><p>Sun 最开始被称为硬件公司，卖工作站和 Unix 类的系统，但后来开发了 Java。创建没几年后，Sun 公司就很快开始盈利，并一路高飞猛进，但巅峰就定格在了 2000 年，当时市值超过 2000 亿美金。当 2000 年互联网泡沫破碎时，以服务器和工作站为主的硬件业务便急转直下，Sun 没抓住 x86 这波机会，立马被微软反超了。</p><p><a href="https://www.networkworld.com/article/2268096/the-downfall-of-sun-microsystems.html">The downfall of Sun Microsystems</a> 这篇文章有些 Sun 为什么突然陨落的分析：</p><blockquote><p>Sun actually did sell x86-based systems in the 1980s, but concentrated its efforts on Sparc for most of the 90s. In King’s view, Sun treated x86 systems as nice toys, but not platforms that could be used to power a serious corporate data center. Sun did increase its presence in the x86 market in the years following the dot-com bust with AMD- and Intel-based servers, but it seems to have been too little, too late.</p></blockquote><p>Sun 公司从创建到巅峰花了 18 年，陨落也就在两三年，2009 年被 Oracle 以 56 亿美金收购，令人唏嘘。</p><h2 id="言论"><a href="#言论" class="headerlink" title="言论"></a>言论</h2><p><a href="https://twitter.com/LBacaj/status/1523442239003062272">Louie Bacaj on Twitter</a></p><blockquote><p>The biggest lie of the information age:<br>You can’t trust your intuition, but you can fully trust the data.</p></blockquote><blockquote><p>Looking back, almost every good decision i’ve made in my life has been based on instincts:<br>– who to marry<br>– where to live<br>– when to quit and so on.<br>Yet, the modern world would have us believe we need data for that. Don’t believe it, your intuition knows best.</p></blockquote><p>人生中的很多好决定不是数字能量化的，反而是靠直觉。</p><p><a href="https://twitter.com/dvassallo/status/1523445550598660096">Daniel Vassallo 回复到</a></p><blockquote><p>The biggest nuisance I had when I was an employee was having to justify all my decisions with data.</p></blockquote><p>Daniel Vassallo 是我之前介绍过的自由职业者，他说 Amazon 的唯一能用 gut feel 做决策的是 Bezos。<strong>gut feel</strong>直译是肠道感觉，这个词真合适，指身体内在的感受。</p><p>把工作中的决策和成果用数字来量化，很有必要，但有时候很难，相信每个在大厂工作过的都感同身受。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-05-14-161337.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是上周写的周刊，昨天忙着带娃忘记发了。苏州第三次尝试恢复正常，幼儿园计划 23 号开学，希望这次能结束我居家带娃上班的生活。&lt;/p&gt;
&lt;h2 id=&quot;软件工程师的修炼与成长&quot;&gt;&lt;a href=&quot;#软件工程师的修炼与成长&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>两个有趣的数学 Puzzle</title>
    <link href="http://catcoding.me/p/two-math-puzzles/"/>
    <id>http://catcoding.me/p/two-math-puzzles/</id>
    <published>2022-05-13T22:35:06.000Z</published>
    <updated>2022-05-26T07:26:09.958Z</updated>
    
    <content type="html"><![CDATA[<p>前些天在老码农群里看到一个数学 Puzzle，让我联想到另一个红眼睛蓝眼睛的问题，感觉都涉及到一点递归和博弈的意思，仔细思考一下有些趣味，分享给大家。</p><h2 id="Sum-and-Product"><a href="#Sum-and-Product" class="headerlink" title="Sum and Product"></a>Sum and Product</h2><p><a href="https://news.ycombinator.com/item?id=31293611">Sum and Product</a></p><p>随机选择两个数字，都是小于 100 的正整数。Sandy 被告知数字的总和，而 Peter 被告知数字的乘积，假设两个人都是足够理智的情况下，Sandy 和 Peter 之间发生了这个对话：</p><pre class="line-numbers language-none"><code class="language-none">Peter: I don&#39;t know the numbers.  Sandy: I don&#39;t know the numbers.  Peter: I don&#39;t know the numbers.  Sandy: I don&#39;t know the numbers.  Peter: I don&#39;t know the numbers.  Sandy: I don&#39;t know the numbers.  Peter: I don&#39;t know the numbers.  Sandy: I don&#39;t know the numbers.  Peter: I don&#39;t know the numbers.  Sandy: I don&#39;t know the numbers.  Peter: I don&#39;t know the numbers.  Sandy: I don&#39;t know the numbers.  Peter: I don&#39;t know the numbers.  Sandy: I don&#39;t know the numbers.  Peter: I do know the numbers.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么这两个数字是多少？</p><p>先自己别看屏幕想个几分钟😏</p><p>注意前提是两个人都聪明和理智，知道如何通过目前的情况去推算。</p><p>从 1 到 100 两两组合一共有 4590 对数字。Sandy 说<em>我不知道</em>，其实里面隐含着一些信息，因为他知道两个数字之和，所以他说<em>我不知道</em>意味着肯定不是 1 + 1, 1 + 2 … 这种组合，因为这些组合的和在这 4590 对数字中是唯一的。因此 Peter 可以根据 Sandy 的信息排除掉这些组合。</p><p>类似的 Peter 每次说<em>我不知道</em>的情况下也可以排除一些组合，依次类推如果经过七轮之后，Peter 说我知道了那个组合，也就有了答案。</p><p>通过下面这个 Python 程序更容易理解，源处 <a href="https://gist.github.com/jacobgardner/ea202587e46672a89b43">Peter And Sandy</a> ：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token comment"># build pairs</span>pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pairs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">singles_operation</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>        results<span class="token punctuation">[</span>f<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    singles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> results<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># We want to return only the product/sum with one result because if</span>        <span class="token comment"># peter/sandy have this product/sum, then they'll know the two numbers</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            singles<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token comment"># Sorted for readability</span>    <span class="token keyword">return</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>singles<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_products</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    singles <span class="token operator">=</span> singles_operation<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'peter removed'</span><span class="token punctuation">,</span> singles<span class="token punctuation">)</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> singles<span class="token punctuation">:</span>        pairs<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_sums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    singles <span class="token operator">=</span> singles_operation<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sandy removed'</span><span class="token punctuation">,</span> singles<span class="token punctuation">)</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> singles<span class="token punctuation">:</span>        pairs<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    remove_products<span class="token punctuation">(</span><span class="token punctuation">)</span>    remove_sums<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># This is the result because it returns the only pair with a product</span><span class="token comment">#   not created by anything else left in the list.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> singles_operation<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红眼睛、蓝眼睛悖论"><a href="#红眼睛、蓝眼睛悖论" class="headerlink" title="红眼睛、蓝眼睛悖论"></a>红眼睛、蓝眼睛悖论</h2><p>此问题最早据说是澳大利亚的华裔数学神童陶哲轩在网上贴出来的：</p><ul><li><a href="https://www.zhihu.com/question/21262930">红眼睛、蓝眼睛</a></li><li><a href="https://terrytao.wordpress.com/2008/02/05/the-blue-eyed-islanders-puzzle/">The blue-eyed islanders puzzle</a></li></ul><p>一个岛上有 100 个人，其中有 5 个红眼睛，95 个蓝眼睛。这个岛有三个奇怪的宗教规则。  </p><ol><li>他们不能照镜子，不能看自己眼睛的颜色。  </li><li>他们不能告诉别人对方的眼睛是什么颜色。  </li><li>一旦有人知道了自己的眼睛颜色，他就必须在<strong>当天夜里</strong>自杀。</li></ol><p>注：<strong>虽然题设了有 5 个红眼睛，但岛民是不知道具体数字的。</strong>  </p><p>某天，有个旅行者到了这个岛上。由于不知道这里的规矩，所以他在和全岛人一起狂欢的时候，不留神就说了一句话：<strong>你们这里有红眼睛的人。</strong></p><p>最后的问题是：假设这个岛上的人足够聪明，每个人都可以做出缜密的逻辑推理。请问这个岛上将会发生什么？</p><p>这个问题不简单，这个游客说的话看起来没提供什么新的信息，但却能导致诡异的结果，因为 “大家都知道”和“大家知道大家都知道”是不一样的。</p><p>李永乐的这个讲解非常好，感谢 <a href="https://github.com/SedationH">SedationH</a>  在评论区推荐给我：</p><p><a href="https://www.bilibili.com/video/BV1Ws411N77m">你真的看懂《皇帝的新装》了吗？心知肚明和说出来有啥区别？李永乐老师讲“呐喊”的力量</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前些天在老码农群里看到一个数学 Puzzle，让我联想到另一个红眼睛蓝眼睛的问题，感觉都涉及到一点递归和博弈的意思，仔细思考一下有些趣味，分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;Sum-and-Product&quot;&gt;&lt;a href=&quot;#Sum-and-Product&quot; class
      
    
    </summary>
    
    
      <category term="技术" scheme="http://catcoding.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数学" scheme="http://catcoding.me/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>22 年前，我曾不够勇敢</title>
    <link href="http://catcoding.me/p/brave/"/>
    <id>http://catcoding.me/p/brave/</id>
    <published>2022-05-11T22:48:06.000Z</published>
    <updated>2022-05-26T07:26:09.950Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间看到王建硕的文章：<br><a href="https://mp.weixin.qq.com/s/RAGlENQPnnyJz14hCMjrig">我们在历史的洪流中，应该如何确保 20 年后，不成为自己在历史书上痛恨的人？</a></p><p>让我想起自己 22 年前的怯懦。其实不是想起，因为即使过了这么多年，我依然羞愧于当时的自己不够勇敢，那么这段回忆必然还会一直跟随我，心有介怀。</p><p>也许，我写出来会少些内疚？</p><p>那时候我正在上初三，在毕业前几个月吧，一个市重点高中要来校提前招生考试。某天，我们班同学被逐个拉去班主任办公室，每个人都是过几分钟就出来了。并没有人告知我进去具体是做什么，我推测可能是高中面试访谈之类的事。</p><p>不一会儿就轮到我了，我进去之后就看到一个长桌，两个老师并排坐。并不是什么面试，老师没说两句就直奔主题：“你知道你们班谁是复读生吗？”</p><p>我根本没料到这个问题，愣了一会儿，然后对方说：”如果你知道谁是复读生，需要告诉我们，录取的时候会重点关注。”</p><p>看我还不太明白，他就继续解释：“比如复读生的录取分数线要高一些，因为我们想招的是天分好的，而不是通过复读来提高分数的，这样对你们应届生也会有好处。”</p><p>这时候我明白了， 同时心里也有两个小人在对话：</p><ul><li>小红人：应该说啊，我们班确实有一个复读生，老师让说就说呗，说了对我们没复读的好啊</li><li>小绿人：为什么要说，这样对复读生不利，也不公平，复读一年为什么就该该更难录取？</li><li>小红人：你和这个人又不算是很好的朋友，只是一般同学而已，告诉老师不会有什么问题的</li><li>小绿人：虽然不是朋友，也是同班同学，别人复读关我什么事，为什么要给人添堵</li><li>小红人：告诉老师，自己不说别人也不知道，这不会有什么关系</li><li>小绿人：虽然不知道，但总感觉不应该做，这样像是告密者，人在做天在看</li></ul><p>这两个小人在我内心不断争吵，我记得自己的脸是火热的。我不想说，内心总觉得肯定有什么不对劲，但是说出来却好像是政治正确的，特别是当我面对的是两个老师的权威角色时，毕竟对我这个年龄段来说老师的指示是不能质疑的。</p><p>我最终不够勇敢，说出了那位复读生的名字。那短短的两三分钟于我而言好像过了很久。</p><p>在我转身准备离开办公室的时候，我发现有个排队的女生伏在窗前，在往办公室里面望，我不确定她是否听到了我的回答，反正我肯定是红着脸走出了办公室。</p><p>虽然这件事已经过去了这么久，但我仍然记得如此清晰。我记得那个窗边女同学的神情，也记得被我告发的同学的样子，他和我最后都考进了那所重点高中，后来并无交集了。</p><p>最后没有对他造成实际上的影响，也会减轻了些我内心的愧疚。这些往事虽然不至于对心理造成创伤，但会偶尔跳出来”骚扰“一下自己。</p><p>我有时候会怀疑，是否这只是我做的一个奇怪的梦，或者是我的一个臆想？</p><p>为什么会有现在看来如此诡异的事情发生，这些老师就这样轮流单独询问学生，我们班有多少比例的人会告发这位同学？并且如此措辞，那当那个复读生被问到会是何种感受？他又会如何回答？他会承认自己就是复读生吗？如果不承认则是说谎，如果承认则和我一样需要勇敢。</p><p>这些我不知道……</p><p>我只意识到，这个世界有时候就是这么恶意。有些复读的学生还为此修改自己的名字，如今看起来是如此荒谬，复读一年像是做了什么大恶之事，要受人区别对待。</p><p>我不太清楚现在初升高是什么情况，对于高考而言复读生歧视也许没有了，但类似歧视在社会上无处不在，比如第一学历歧视，我们这个社会似乎对于“脱离正轨”容忍度很小，比如你去离职休养一年，问题随之而来，再去找工作就要面临你去哪儿了的灵魂拷问。</p><p>这不正常……</p><p>大学时，我看到《闻香识女人》这部电影，深受震撼。查理是一个普通的中学生，他见证了一件恶作剧但又不想出卖朋友，于是面临着一道艰难的选择题 —— 要么坦白，要么被学校勒退。</p><p>查理犹豫是否要把搞恶作剧的人告发出来，他收到了他人的威胁或收买，他甚至发现同学已经提前出卖了自己，他似乎有足够理由说出来。</p><p>但内心还是有一个声音在说，这样做不对。幸运的是他碰到了那位名为史法兰的退伍军官，他虽然失明颓废，却心明如镜：</p><blockquote><p>It’s just some things you just can’t do.<br>You’re gonna have a tough time in this world, Charlie.</p></blockquote><p>在史法兰的鼓励下和帮助下，查理勇敢地选择了正确的道路，他没有告密。史法兰军官最后为查理的辩护震耳发聩：</p><blockquote><p>如今我走到人生的十字路口，我总是清楚哪条路是对的，毫无例外，我都清楚，但我从不走。知道为什么吗？因为太他妈难了。</p><p>而查理，他也走到了十字路口。他选择了对的路，这是一条正确的路，充满原则，通往个性之道，让他继续他的行程吧。他的前途掌握在你们手里，诸公。绝对是有价值的前途，相信我，别毁了它，保护好它，支持它。有一天你们会深感自豪的，我保证。</p></blockquote><p>几十年前，以及现在的疫情期间，在某些荒谬的规则下自会出现让人内心斗争的特殊时刻，这时候就像斯蒂文森的小说《化身博士》里所写的，每个人心里都有一个恶的“海德先生”和一个善的“杰基尔博士”，这种时刻在你内心争吵，两股角色的拉扯让人性复杂。</p><p>追随大众，机械服从，择优选择是本能，而遵从自己的良知则需要莫大的勇气。罗翔说过：“<strong>在人类所有的美德中，勇敢是最稀缺的，当命运之神，把你推向勇敢的时刻，希望你能够像你想象中那么勇敢</strong>。”</p><p>希望在这些特殊时刻，我们能保护好内心的圣殿，以免如我一样留下个长久的疤痕。</p><p>共勉！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间看到王建硕的文章：&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/RAGlENQPnnyJz14hCMjrig&quot;&gt;我们在历史的洪流中，应该如何确保 20 年后，不成为自己在历史书上痛恨的人？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;让我想起自己 22 
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>第 12 期，高效阅读技术书籍；工程师的产品思维；可视化生活数据</title>
    <link href="http://catcoding.me/p/weekly-12/"/>
    <id>http://catcoding.me/p/weekly-12/</id>
    <published>2022-05-08T15:14:06.000Z</published>
    <updated>2022-05-26T07:26:09.962Z</updated>
    
    <content type="html"><![CDATA[<p>这个周刊大概就是分享些能触发我分享欲的东西，每次三到四个主题。我觉得不单纯是那种聚合类的信息收集，而很多是自己的相关见解，这样可读性更好点，而且也不至于让我看起来像是一个收集信息的机器人。</p><p>如果有建议请告诉我，这样也许能做得更好。</p><h2 id="如何高效阅读技术书籍"><a href="#如何高效阅读技术书籍" class="headerlink" title="如何高效阅读技术书籍"></a>如何高效阅读技术书籍</h2><p><a href="https://recepinanc.com/How-to-read-technical-books-effectively/">How to Read Technical Books Effectively</a></p><p>我上学的时候经常读技术书籍，感觉那时候好的技术书籍非常多。现在我看技术书少些了，而且很多时候都是看电子版，没了那种浸润书香的感觉。</p><p>这篇文章谈到如何高效地阅读技术书，高效意味着以最短的时间获取书里的价值。文中谈到，首先要区分的是“参考书” 和 “非参考书”。</p><p>参考书我们可以快速浏览，在脑海中建立知识索引，具体细节可以再回来翻阅。比如：</p><ul><li><a href="https://www.amazon.ca/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Design Patterns: Elements of Reusable Object-Oriented Software</a></li><li><a href="https://www.amazon.ca/dp/B0096BYG7C">Practical Object-Oriented Design in Ruby: An Agile Primer</a></li></ul><p>非参考书：</p><ul><li><a href="https://www.amazon.ca/Pragmatic-Programmer-journey-mastery-Anniversary/dp/0135957052">The Pragmatic Programmer: your journey to mastery</a></li><li><a href="https://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code: A Handbook of Agile Software Craftsmanship</a></li></ul><p>作者的这个举例我不太赞同，一本书是否列为参考类别，取决于读者的时间和积累，比如上面那本设计模式的书，在学校学生有时间从头到尾读一读会很好。</p><p>而对于已近建立了知识索引、或者有经验的工程师，一本书中可能部分是参考的，部分是非参考的，比如我最近在看《JavaScript 高级程序设计》，我觉得其中 JavaScript 面向对象部分值得精读，而另外几章比如 Canvas 之类的，对我而言就是参考章节，等我需要的时候来翻翻。</p><p>所以拿到一本书，最好是能有个大致类似地图的索引知识，否则从头到尾读收效甚微。</p><p>作者最后提到一点我很赞同，就是用自己的话来解释新学到的东西，这很重要也不容易达成。另外我认为如果能在实践中用到才算真正掌握，否则都是纸上谈兵。</p><p>工作年数多一些之后，我觉得学技术的焦虑没了，大概是意识到了自己永远无法掌握所有技能，也意识到了学习能力更为重要。还有就是，工作和生活中的事远比单纯的技术学习艰难、复杂多了🤣</p><h2 id="具有产品思维的工程师"><a href="#具有产品思维的工程师" class="headerlink" title="具有产品思维的工程师"></a>具有产品思维的工程师</h2><p><a href="https://blog.pragmaticengineer.com/the-product-minded-engineer/">The Product-Minded Software Engineer - The Pragmatic Engineer</a></p><p>之前分享过刘建硕关于创造者和实施者的文章：<a href="https://catcoding.me/p/weekly-6/">创造者和实施者</a>。这篇英文文章里阐述了工程师的产品思维。</p><p>具有产品意识的工程师是对产品本身非常感兴趣的开发人员。他们想要了解如何做决策，人们如何使用产品，并且喜欢参与到产品决策中去。如果他们放弃工程的乐趣，可能成为一个优秀的产品经理。上次听播客《聊微信 8.0 和产品经理如何成长》中，张小龙谈到自己更多还是工程师思维，而工程师思维在做产品的时候非常重要，这包括逻辑推理能力，数据分析能力等。</p><p>稀有的能力往往是组合起来的，技术和管理、产品、运营任何一个组合起来都能提高自己的稀缺性。</p><p>如果你想要变成一个更具有产品思维的开发者，有如下建议：</p><ul><li>理解你所在公司的商业逻辑，为什么成功或失败</li><li>和产品经理达成更为密切的联系，而不是他让你做什么，你去执行这样的单向关系</li><li>了解工作中的上下游，多和不同角色的人打交道</li><li>更广泛和深入的参与用户调研，需求分析，数据和结果分析</li><li>提供工程和技术上的 trade-off，重视非技术人的反馈</li></ul><p>上周刚好看到 Cat Chen 写的 <a href="https://zhuanlan.zhihu.com/p/468644178">Facebook 工程师文化独特之处</a>，看起来 Facebook 就是秉承这种理念，工程师必须对产品端到端负责，所以和 PM 是密切协作的关系。</p><p>我之前在大疆有段时间做物流相关的系统，跟着业务分析跑去仓库和物流人员交流，回想起来也有些意思。总之，不只专注于技术，也许能给开发工作带来些不一样的体验和更大的成就感吧。</p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p><a href="https://krausefx.com//blog/how-i-put-my-whole-life-into-a-single-database">How I put my whole life into a single database · Felix Krause</a></p><p>作者把自己的很多生活中的数据可视化了，做得<a href="https://howisfelix.today/?">非常酷炫</a> ，而且所有代码都开源了。这些数据包括吃了什么、体重、心情、位置、运动量等等。</p><p><img src="/images/ob_2022-05-06-222048.png" alt=""></p><p>那数据从哪里来呢？一共有以下几个来源：</p><p><img src="/images/ob_2022-05-07-210047.png" alt=""></p><p>对于手动输入的数据，作者使用的是  <a href="https://core.telegram.org/">Telegram API</a>写了个机器人可以让自己在对话框里发出数据：<br><img src="/images/ob_2022-05-06-222345.png" alt=""></p><p>这是个不错的点子，上次有个人在 Github 上说要给 obweb 做 Telegram 机器人。我之前也想过能否像 flomo 那样在微信里直接输入灵感笔记，这周又稍微看了看微信的接口，发现公号需要微信验证才能有那个接口的权限，好吧，我放弃了。</p><p>这周看到的另外一个数据可视化的例子是 PingCAP 发布的工具，可以用来查看开源项目的相关数据。</p><p><a href="https://ossinsight.io/">Open Source Software Analysis and Comparing Tools</a></p><p>我玩了玩，感觉做的非常不错！</p><h2 id="言论"><a href="#言论" class="headerlink" title="言论"></a>言论</h2><p><img src="/images/ob_2022-05-08-060100.png" alt=""></p><p><img src="/images/ob_2022-05-08-051838.png" alt=""></p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-05-08-053701.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个周刊大概就是分享些能触发我分享欲的东西，每次三到四个主题。我觉得不单纯是那种聚合类的信息收集，而很多是自己的相关见解，这样可读性更好点，而且也不至于让我看起来像是一个收集信息的机器人。&lt;/p&gt;
&lt;p&gt;如果有建议请告诉我，这样也许能做得更好。&lt;/p&gt;
&lt;h2 id=&quot;如何
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>性能测试小工具</title>
    <link href="http://catcoding.me/p/perf-tools/"/>
    <id>http://catcoding.me/p/perf-tools/</id>
    <published>2022-05-06T11:20:07.000Z</published>
    <updated>2022-05-26T07:26:09.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="procpath"><a href="#procpath" class="headerlink" title="procpath"></a>procpath</h2><p>一个 Python 实现的小工具，我们可以用来不断监控某个进程 (或者一组进程) 的资源使用情况，比如内存、CPU、IO 等。使用说明在这里：<a href="https://pypi.org/project/Procpath/">Procpath · PyPI</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pipx <span class="token function">install</span> Procpath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装即可，然后使用这个命令先来生成一个统计数据存储在 sqlite，还可以生成统计图：</p><p><img src="/images/ob_2022-05-06-110341.png" alt=""></p><p>我之前排查一个<a href="https://github.com/second-state/dapr-wasm/issues/16">内存问题</a>时就用这个工具来调试，非常方便。比如我要统计 <code>image-api</code> 这个进程的内存情况，并生成图就使用下面这个脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> ./image-api-go <span class="token operator">></span> infer.log <span class="token operator">&amp;</span><span class="token function">sleep</span> <span class="token number">3</span><span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>pidof ./image-api-go<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"begin record <span class="token variable">$pid</span> ..."</span><span class="token function">rm</span> -rf ff.sqlite/home/coder/.local/bin/procpath record -i <span class="token number">1</span> -r <span class="token number">60</span> -d ff.sqlite -p <span class="token variable">$pid</span>/home/coder/.local/bin/procpath plot -d ff.sqlite -q rss -p <span class="token variable">$pid</span> -f rss.svg<span class="token builtin class-name">echo</span> <span class="token string">"recorded <span class="token variable">$pid</span> ...."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你看看 <a href="https://heptapod.host/saajns/procpath/-/blob/branch/default/procpath/procfile.py">procpath 的代码</a>发现也非常简单，就是通过 Linux 系统下的 <code>/proc/&#123;pid&#125;</code> 下面的数据来进行统计的：</p><p><code>/proc/&#123;pid&#125;/stat</code>  ： 进程资源统计<br><code>/proc/&#123;pid&#125;/io</code> ： 进程 IO 相关统计<br><code>/proc/&#123;pid&#125;/fd</code> ： 进程句柄</p><p>具体通过 <code>man proc</code> 查询 Linux proc 相关的文档。类似的还有我以前记录过的 <a href="https://catcoding.me/p/runlim/">调优的小工具 RunLim</a>。</p><h2 id="Hyperfine"><a href="#Hyperfine" class="headerlink" title="Hyperfine"></a>Hyperfine</h2><p><a href="https://github.com/sharkdp/hyperfine">sharkdp/hyperfine: A command-line benchmarking tool</a></p><p>这个 Rust 命令行工具可以用来批量跑程序，找出程序的耗时区间，生成的结果可以输出为 JOSN 格式，这样能用来可视化对比结果。</p><p>比如我们使用这个工具来对比 <code>youki</code>、<code>crun</code>、<code>runc</code> 的性能，<a href="https://github.com/containers/youki/pull/544#issuecomment-1118473648">add the benchmark result to README, containers/youki</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hyperfine --prepare <span class="token string">'sudo sync; echo 3 | sudo tee /proc/sys/vm/drop_caches'</span> --warmup <span class="token number">10</span> --min-runs <span class="token number">100</span> <span class="token string">'sudo ./youki create -b tutorial a &amp;&amp; sudo ./youki start a &amp;&amp; sudo ./youki delete -f a'</span>hyperfine --prepare <span class="token string">'sudo sync; echo 3 | sudo tee /proc/sys/vm/drop_caches'</span> --warmup <span class="token number">10</span> --min-runs <span class="token number">100</span> <span class="token string">'sudo crun create -b tutorial a &amp;&amp; sudo crun start a &amp;&amp; sudo crun delete -f a'</span>hyperfine --prepare <span class="token string">'sudo sync; echo 3 | sudo tee /proc/sys/vm/drop_caches'</span> --warmup <span class="token number">10</span> --min-runs <span class="token number">100</span> <span class="token string">'sudo runc create -b tutorial a &amp;&amp; sudo runc start a &amp;&amp; sudo runc delete -f a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑出结果如下：<br><img src="/images/ob_2022-05-06-111156.png" alt=""></p><p>这个工具的作者用 Rust 写了好几个非常好用的命令行工具，比如 <code>fd</code> 快速查找文件等。</p><h2 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h2><p><a href="https://github.com/wg/wrk">wg/wrk: Modern HTTP benchmarking tool</a></p><p>这个工具可以用来批量发起 HTTP 请求，使用方法很简单：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 12 个线程、保持 400 个 HTTP 连接，跑 30 秒。我以前使用这个工具来对接口进行压力测试，非常方便。</p><p>还有个 Python 的测试工具叫作 <a href="https://locust.io/">Locust - A modern load testing framework</a>，这个功能更强大一些，我们可以写 Python 脚本来扩展测试逻辑，当然也可以用来做压力测试。</p><p><img src="/images/ob_2022-05-06-111856.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;procpath&quot;&gt;&lt;a href=&quot;#procpath&quot; class=&quot;headerlink&quot; title=&quot;procpath&quot;&gt;&lt;/a&gt;procpath&lt;/h2&gt;&lt;p&gt;一个 Python 实现的小工具，我们可以用来不断监控某个进程 (或者一组进程) 的资源使用
      
    
    </summary>
    
    
      <category term="工具" scheme="http://catcoding.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>第 11 期，隐藏的后门；Worse is Better；Wolfram 和 Jobs</title>
    <link href="http://catcoding.me/p/weekly-11/"/>
    <id>http://catcoding.me/p/weekly-11/</id>
    <published>2022-05-01T20:46:06.000Z</published>
    <updated>2022-05-26T07:26:09.958Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下这周看到的好内容，加上自己的一些个人理解和评注。前面三期为：</p><p><a href="https://catcoding.me/p/weekly-8/">#8 Valve，另一种公司</a></p><p><a href="https://catcoding.me/p/weekly-9/">#9 理想中的开发者</a></p><p><a href="https://catcoding.me/p/weekly-10/">#10 下一个 Google；最高形式的财富；冒名顶替综合症</a></p><p>这期分享的都是一些经典的老文章，有的老到比我的年纪都大，比如第一篇：</p><h2 id="隐藏的后门"><a href="#隐藏的后门" class="headerlink" title="隐藏的后门"></a>隐藏的后门</h2><p><a href="https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf">Reflections on Trusting Trust by Ken Thompson</a></p><p><a href="https://mananshah99.github.io/blog/2020/07/01/trusting-trust/">A Discussion of Ken Thompson’s “Reflections on Trusting Trust”</a></p><p>Unix 的缔造者之一 Ken Thompson 在 1983 和 Dennis Ritchie 共同获得了图灵奖，他的的获奖演讲以《Reflections on Trusting Trust》（反思对信任的信任）为题，就是上面那篇短短三页的论文。</p><p><img src="/images/ob_pasted-image-20220430114112.png" alt=""></p><p>在这篇文章中 Ken Thompson 阐述了一种在编译器里面加上后门的巧妙办法，让他可以登录任何早期的 Unix 系统。</p><p>有的人会说编译器里加恶意代码，我们看看编译器的源代码不就知道了么，所以大家通常认为开源软件更安全，毕竟源码面前，毫无秘密。</p><p>Ken Thompson 的办法巧妙在于，他先修改了一个编译器的源码，编译出来的编译器为 P0,  P0 可以在另外一份没有后门的编译器源码中插入代码，这样出来的编译器就还是有后门的 P1，但是你看源码又发现不了任何踪迹。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">compile</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* If the code we're compiling is code for the Unix login command */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">match</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> login_code_pattern<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">compile</span> <span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* If the code we're compiling is similar to the compiler source code */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">match</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> compiler_code_pattern<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">compile</span> <span class="token punctuation">(</span>compiler_code_with_both_if_statements_inserted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">/* Do regular compilation things */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器开发中有个常用的概念是自举 (bootstrapping)，就是用这门语言实现的编译器编译新版本的编译器源码，一门新的编译型编程语言，实现自举是第一个里程碑。</p><p>这里就牵涉到<strong>鸡生蛋还是蛋生鸡</strong>的问题，那第一个编译器肯定不是自身语言实现的，比如 C 第一个编译器是 B 语言写的， Rust 编译器的第一份源码是 OCaml 的。</p><p>Ken Thompson 的做法可以理解为在自举过程中加入了特定的后门逻辑，导致编译出来的编译器都会有问题。</p><p>这里有位作者在 Go 编译器上做了 PoC，<a href="https://ekyu.moe/article/thompson-hack-on-golang/">为编译器植入隐藏后门——亲手实践 Thompson hack</a>。</p><p>这类安全问题可以统称为信任链攻击，使用这种攻击手法，越底层的软件被动了手脚危害越大。一个 <code>npm install</code> 下去可能几百个第三方包就安装了，之前也出现过在 npm 包里加入挖矿代码这样的事。</p><p>现在软件开发的依赖如此错综复杂，我们只能相信写代码的人了。</p><h2 id="Worse-is-Better"><a href="#Worse-is-Better" class="headerlink" title="Worse is Better"></a>Worse is Better</h2><p><a href="https://dreamsongs.com/RiseOfWorseIsBetter.html">Rise of Worse Is Better</a></p><p>这篇文章是 1991 年写的，可以说影响了好几代程序员。我在学校的时候也读到过，这次重读一遍。</p><p>一个好的、理论上正确的设计包含这几点：</p><ol><li>简单性</li><li>正确性</li><li>一致性</li><li>完整性</li></ol><p>实践中采用这种设计哲学的方式称作 MIT 方式，在这种方式下设计的是 Lisp 和 Lisp Machine(一种专门跑 Lisp 的硬件)。</p><p>而 <strong>worse is better</strong> 的哲学认为简单性是最重要的，但为了保持简单可以一定程度上牺牲其他三个特性，这称之为  New Jersey 方式。这种方式下实现的产物是 C 和 Unix。</p><p>为什么称为 New Jersey 方式 ? </p><p>因为 C/Unix 的创造者 Dennis Ritchie 和  Thompson 所在的学校 UC Berkeley 在 New Jersey，另外美国人喜欢调侃新泽西，觉得相比起附近高贵的纽约，这地方真是又土又穷。新泽西乡巴佬，赤裸裸的地域歧视和小讽刺啊！</p><p>这篇文章中的主要例子是一个操作系统中的  <code>PC loser-ing</code> 问题，我看的时候没太看懂，然后搜到了这篇文章 <a href="https://blog.reverberate.org/2011/04/eintr-and-pc-loser-ing-is-better-case.html">EINTR and PC loser-ing , The “Worse Is Better” case study</a>。这篇文章的推测我认为是对的，早期的 Unix 系统调用有一个 EINTR 返回状态 (被中断的系统调用)，表示系统调用过程中发生了中断，需要重试，所以调用的时候经常写这种代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">again<span class="token operator">:</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFFSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>      <span class="token keyword">goto</span> again<span class="token punctuation">;</span>  <span class="token comment">/* just an interrupted system call */</span>    <span class="token comment">/* handle other errors */</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这看起来确实够丑陋的，不过因为几乎所有的开发者默认都想重试，所以  4.2BSD 开始就已经支持自动重试，而 POSIX API 通过修改 <code>struct sigaction</code> 的  <code>SA_RESTART</code> 参数来决定是否重试。</p><p>所以，Unix 系统调用接口虽然当时看起来丑陋，但是逐渐已经通过缝缝补补把这个问题解决了！</p><blockquote><p> In other words, Berkeley UNIX was already doing “the right thing” five years before “Worse is Better” was written!</p></blockquote><p>而 Lisp Machine 对比 Unix，虽然设计精美、统一，但是却迅速陨落了。在软件开发中，这种新泽西方法似乎更有生命力，简单而言就是小步快跑，实现简单，快速出活。 Unix 就是这样，虽然理论上看起来不够优雅，但是足够简单，可以很快地移植到不同的硬件上去，所以越来越流行：</p><blockquote><p>The worse-is-better philosophy means that implementation simplicity has highest priority, which means Unix and C are easy to port on such machines. Therefore, one expects that if the 50% functionality Unix and C support is satisfactory, they will start to appear everywhere. And they have, haven’t they? Unix and C are the ultimate computer viruses.</p></blockquote><blockquote><p>The lesson to be learned from this is that it is often undesirable to go for the right thing first. It is better to get half of the right thing available so that it spreads like a virus. Once people are hooked on it, take the time to improve it to 90% of the right thing.</p></blockquote><p>这和另外一个软件开发箴言是一个意思：</p><blockquote><p>Make it work, make it right, make it fast<br>– Kent Beck.</p></blockquote><p>而 Lisp 本身虽然已经没落，但一些核心的东西却深刻地改变了编程语言和软件开发，比如递归、函数式编程、GC、Eval、Code as Data 等等，参考 <a href="http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html">为什么 Lisp 语言如此先进</a>。</p><h2 id="Wolfram-和-Jobs"><a href="#Wolfram-和-Jobs" class="headerlink" title="Wolfram 和 Jobs"></a>Wolfram 和 Jobs</h2><p><a href="https://twitter.com/stephen_wolfram/status/1517589051552972806">Stephen Wolfram on Twitter</a></p><p><img src="/images/ob_pasted-image-20220430143425.png" alt=""></p><p>Wolfram 是著名软件 Mathematica 的作者，在这封 1987 年的信件里面他回复了 Jobs 的咨询。这个文件里面倒是没有列出 Jobs 的原问题，不过从标题和回复内容看，大概是 Jobs 想在 NeXT 里面做一个叫作 jobsbooks 的东西，里面包含一些词典、手册、等常用的书籍和参考，所以向 Wolfram 咨询数据来源有哪些？</p><p>当然这是我的猜测，Wolfram 是很适合问这个问题的人，他几乎是一个百科全书式的天才。他年轻的时候开始做物理方面的研究，后来开始写软件：</p><blockquote><p>“我一直认为，做研究一定要用最好的工具。即使我用的是当时最先进的计算机，还是不断遇到故障。我明白，唯一的方法就是自己把它们造出来。所以，我就动手了。”</p></blockquote><p>于是 Mathematica 诞生了，这个软件被称作是“有史以来最重要的科学软件”。</p><p>我搜索后发现 Wolfram 和 Jobs 也就是在 1985 年左右结识的，这篇文章是 Wolfram 2011 年 Jobs 去世时写的 <a href="https://writings.stephenwolfram.com/2011/10/steve-jobs-a-few-memories/">Steve Jobs: A Few Memories—Stephen Wolfram Writings</a>。</p><p>里面写到了多年前的往事，甚至 Mathematica 这个软件的名字是 Jobs 给取的。其中有段还写到，一次交谈时 Jobs 心烦意乱、小鹿乱撞，原来他晚上有个约会：</p><blockquote><p>The Steve Jobs—so confident as a businessman and technologist—had melted away, and he was asking me—hardly a noted known authority on such things—about his date.</p></blockquote><p>但 Wolfram 肯定比 Jobs 更“书呆”，怎么可能给出约会的建议，哈哈。</p><hr><p>这些老文看起来也挺有趣！</p><p>各位劳动节快乐！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下这周看到的好内容，加上自己的一些个人理解和评注。前面三期为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-8/&quot;&gt;#8 Valve，另一种公司&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catco
      
    
    </summary>
    
    
      <category term="技术" scheme="http://catcoding.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>焦虑自救小册</title>
    <link href="http://catcoding.me/p/anxiety-handbook/"/>
    <id>http://catcoding.me/p/anxiety-handbook/</id>
    <published>2022-04-28T19:00:07.000Z</published>
    <updated>2022-05-26T07:26:09.950Z</updated>
    
    <content type="html"><![CDATA[<p>最近有的读者找我咨询问题，聊下来我发现 IT 从业人员共有的突出问题就是焦虑。现在疫情、政策等大环境原因导致行业不稳定和生活艰难，焦虑是很多人的常态。</p><p>我也曾经焦虑过大概两年，这种状态刚开始自己还没意识到，直到出现了一些身体上很明显的症状才引起重视。后来经过一些自我调整我基本解决了这个问题，我之前写了篇文章分享自己的方法：<a href="https://catcoding.me/p/how-to-beat-anxiety/">35 岁，我用这三种方法克服焦虑</a></p><p>虽然相对前两年，我的焦虑感确实少了很多，但我并不认为已经一劳永逸地解决了这个问题，每个年龄段有不同的焦虑点，这似乎是一个一生需要关注的事情。我的这些方法虽然对自己有用，也不一定适合所有人，而且换城市、换工作的隐形成本是很大的。</p><p>我最近和学心理学的老同学聊了聊，顺便收集了一些工具、方法和书籍，总结出来供大家参考。</p><p>如果大家能一起来完善这个小手册就更好了，这文档共享在 Github：<a href="https://github.com/chenyukang/anxiety-handbook">anxiety-handbook</a></p><h2 id="自我测试"><a href="#自我测试" class="headerlink" title="自我测试"></a>自我测试</h2><p><a href="https://www.qqtest.com/s/20.htm">SAS 焦虑自评量表 - 健康心理测试</a></p><p><a href="https://www.idrlabs.com/cn/anxiety-stress-depression/test.php">焦虑、压力、抑郁测试</a></p><p>关于测试：</p><ul><li><strong>正确对待测试，不要对结果恐慌</strong>。测试前做好心理建设，不管结果多遭，不要害怕它，想想自己参与测试的初衷是想让事情朝正确的方向发展。</li><li><strong>将测试当作解决问题的工具</strong>。测试结果可以用来检测自己应对焦虑的情况：当焦虑变严重时，思考自己哪里没有做到位，不断改进克服它的方法；当焦虑减轻时，给自己一些奖励，让自己再放松一些。</li></ul><h2 id="认识焦虑"><a href="#认识焦虑" class="headerlink" title="认识焦虑"></a>认识焦虑</h2><p>焦虑多是由不确定引起的，是<strong>人类进化过程中保留下来的对外界的戒备</strong>。对于大部分人来说，焦虑是无法完全避免的，甚至适度的焦虑是能促使人进步。但是焦虑达到一定程度就会影响健康，特别是影响睡眠的时候情况更为糟糕。</p><blockquote><p>焦虑患者常常对现实生活中的某些事情或将来的某些事情表现的过分担忧，有时患者也可以无明确目标的担忧。这种担心往往是与现实极不相称的，使患者感到非常的痛苦。还伴有自主神经亢进，肌肉紧张或跳动等<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E5%BE%8B%E7%A5%9E%E7%B6%93%E5%A4%B1%E8%AA%BF" title="自律神经失调">自律神经失调</a> 的症状。部分患者会自觉身体总是不舒服多次去医院看医生，又检查不出症状。但是对于患者来说，总会一直担心。</p><p>– 维基百科</p></blockquote><p>就我个人体会，焦虑的时候会失眠、消化不良、精神紧张、心跳有时候感觉速度快。</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>认识到自己焦虑的原因是缓解焦虑的第一步，IT 从业人员的焦虑是很多是由国内的行业氛围、社会大环境导致的。</p><p>职场的 996 工作节奏、35 岁现象、末尾淘汰、职场 PUA 等等，这些让人没有足够的安全感。</p><p>另一部分原因是自我认知造成的，我们大多数人沿着社会预期的道路而行，并未想过自己想要什么样、适合什么样的生活。</p><p>这与教育和文化背景有关系，我们一直都存在一个较为单一的评价体系，在学校里面我们为了分数而竞争，毕业时我们为了一份的工作而竞争，职场上我们为了更好的绩效、更高的工资而竞争。竞争是我们的生活常态，而既然有竞争就会导致人有压力，日积月累形成焦虑。</p><p>而且，焦虑特别容易出现在对自己有要求的人群中，出现的年龄段也比较集中，焦虑大多出现在 25 ~ 40 左右，因为这个年龄段是职场和人生的关键期，也逐渐需要承担家庭的责任。</p><p>往往我们过了某些时间关口就会好一些，这个关口可能是认知和价值观上的改变，可能是学会了接纳自己，或者是学会了和焦虑相处。希望这个手册能帮你更快地闯过关口。</p><h2 id="职场焦虑"><a href="#职场焦虑" class="headerlink" title="职场焦虑"></a>职场焦虑</h2><p>摆脱焦虑一个很重要的部分是认识自己所处的环境，识别出周围环境中的有害因素，这包括国内 IT 行业的两个常见问题：</p><h3 id="内卷"><a href="#内卷" class="headerlink" title="内卷"></a>内卷</h3><p>内卷会让人长期处于无意义的竞争状态，非常容易让人滋生焦虑。国内很多 IT 公司存在内卷的情况，这里有一个 IT 从业者维护的 996 公司列表你可以参考。以我的经验来说，对于大型 IT 公司，个人所处于的小组和部门可能更重要，直属 Leader 对你影响很大程度上决定了你在公司的工作感受：</p><p><a href="https://github.com/996icu/996.ICU/tree/master/blacklist">996.ICU/blacklist · 996icu/996.ICU</a></p><p>如果你想改变内卷的环境，可以通过换组或者是换工作到 955 的公司，换城市、或者甚至去国外：</p><ul><li><a href="https://github.com/formulahendry/955.WLB">955.WLB 955 不加班的公司名单</a></li><li><a href="https://github.com/623637646/996.Leave">996.Leave 逃离 996</a></li><li><a href="https://github.com/chenyukang/remote-jobs-cn">remote-jobs-cn 国内远程办公职位</a></li></ul><h3 id="职场-PUA"><a href="#职场-PUA" class="headerlink" title="职场 PUA"></a>职场 PUA</h3><p>PUA 全称 “Pick-up Artist”，起初指的是受过系统化学习实践精神控制者，让异性着迷的男女们，字面上的解释 PUA 指的是搭讪艺术家。</p><p>PUA 是一种诱骗和洗脑的技术，从而神不知鬼不觉的达到自己的目的，而且这是一种很难发现，非常隐晦的一种欺骗方式。</p><p>一些管理者并没有良好的管理能力，倒是学会了一些抓人的手法，所以职场 PUA 是很多 IT 人面临的困境。常见的职场 PUA 手法：</p><ul><li>否定，不断批评和挑刺，有的时候会美其名曰鞭策你进步</li><li>打压，分配过多的任务，但是会告诉你在锻炼你</li><li>对比，拿你和别人对比，让你造成心理落差，或者怀疑自己的能力</li></ul><p><a href="https://www.bilibili.com/video/BV1pr4y1p7pB?spm_id_from=333.999.0.0">怎么看领导是培养还是 PUA 我？</a></p><p>当然还有很多手法，其实 PUA 的本质是让你觉得一切都是为了你好，从而让你不用怀疑地去执行任务。被 PUA 的人往往自身比较难以认识到，需要跳出来才能发现。</p><p>如果你的 Leader 让你太累，心理压力大，可以往这方面考虑一下自己是否在被 PUA。如果遭遇 PUA 解决办法就是换组或者换公司。</p><h2 id="改变认知"><a href="#改变认知" class="headerlink" title="改变认知"></a>改变认知</h2><p>焦虑部分是因为认知局限所造成的，所谓庸人自扰。提升思维高度可以从根本上解决一些问题。思维和认知的高度往往也涉及到对人生中重要事项的看法和选择，这包括：</p><ul><li>关于钱、工作的看法</li><li>是否待一线城市</li><li>是否结婚和要小孩</li><li>如何衡量成功</li><li>什么是幸福</li><li>对死亡的看法</li></ul><p>个人的经历可能会改变认知，除此之外阅读、观影、思考、交谈也可能会改变认知。下面是我收集的一些相关书籍和纪录片。</p><h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><p>解决焦虑问题类的书籍，往往被当作心灵鸡汤，鸡汤并没有不好，当你过于焦虑的时候，喝碗鸡汤有时候挺有用。另外一些哲学、历史方面的书也有用：</p><p><a href="https://book.douban.com/subject/2277299/">《当下的力量》</a> 生活在过去使人忧愁，生活在未来使人焦虑，最好的状态是活在当下。</p><p>《象与骑象人》如何获取幸福，过有意义的生活</p><p>《人生的智慧》叔本华关于健康、财富、名声、荣誉、养生和待人接物所应遵守的原则等。非常推荐。</p><p>《沉思录》</p><p>《被讨厌的勇气》</p><p>《获得幸福的勇气》</p><p><a href="https://book.douban.com/subject/35539713/">《焦虑的人》</a> 这是一本小说，情节跌宕起伏，故事温暖又治愈。</p><p>《精神焦虑症的自救》分为病例分析卷和访谈卷，包含对焦虑的全面介绍，还有大量摆脱焦虑情绪的技巧。</p><p>《焦虑是头大象，如何一口一口吃掉它》作者主张通过自我书写缓解焦虑，有书写的建议和方法，帮助人们辨别不同的焦虑状况如何用自我书写来缓解。</p><h3 id="纪录片"><a href="#纪录片" class="headerlink" title="纪录片"></a>纪录片</h3><p>好的纪录片能让人了解个人生活之外的广袤世界、历史长河，意识到人类之渺小，从而改变认知：</p><ul><li>蓝色星球</li><li>王朝</li><li>脸庞，村庄</li><li>河西走廊</li><li>人世间</li><li>徒手攀岩</li><li><a href="https://open.163.com/newview/movie/courseintro?newurl=M6HV755O6">哈佛大学公开课：幸福课</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="培养爱好"><a href="#培养爱好" class="headerlink" title="培养爱好"></a>培养爱好</h3><p>培养爱好可以缓解部分焦虑，因为爱好让我们从日常工作生活中脱离出来。很多中年人都是通过爱好来缓解生活中的琐碎感。</p><p>运动、写作、钓鱼、摄影、乐高等，都是非常好的爱好。</p><h3 id="日常技巧"><a href="#日常技巧" class="headerlink" title="日常技巧"></a>日常技巧</h3><p>常对自己说这几个字：</p><p><strong>“无所谓”<br>“没必要”<br>“不至于”</strong></p><p>冯唐分享过一个做法，如果你焦虑或者认为自己碰上了什么迈不过去的坎，找个医院去 ICU 门口待上一段时间。</p><h3 id="心理咨询"><a href="#心理咨询" class="headerlink" title="心理咨询"></a>心理咨询</h3><p>和行业相关的朋友咨询了一下，目前主流的心理治疗价目表：</p><ul><li><p>新手 200-300</p></li><li><p>中级 500-800</p></li><li><p>专家 1000 以上</p></li></ul><h3 id="药物治疗"><a href="#药物治疗" class="headerlink" title="药物治疗"></a>药物治疗</h3><p>常见药和副作用，待补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有的读者找我咨询问题，聊下来我发现 IT 从业人员共有的突出问题就是焦虑。现在疫情、政策等大环境原因导致行业不稳定和生活艰难，焦虑是很多人的常态。&lt;/p&gt;
&lt;p&gt;我也曾经焦虑过大概两年，这种状态刚开始自己还没意识到，直到出现了一些身体上很明显的症状才引起重视。后来经过一
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="职场" scheme="http://catcoding.me/tags/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="程序员" scheme="http://catcoding.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
</feed>
