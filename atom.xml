<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2022-04-03T12:02:05.505Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lex Fridman 高德纳</title>
    <link href="http://catcoding.me/p/knuth-interview/"/>
    <id>http://catcoding.me/p/knuth-interview/</id>
    <published>2022-04-03T19:54:06.000Z</published>
    <updated>2022-04-03T12:02:05.505Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220401203823.png" alt=""></p><p><a href="https://www.youtube.com/watch?v=2BdBfsXbST8">Donald Knuth: Algorithms, Complexity, and The Art of Computer Programming</a></p><p>我最近比较迷 Lex Fridman 的播客，发现他早期还做了很多期技术方面的访谈，而且请到的嘉宾都是些祖师爷级别的人物，比如 Donald Knuth、Bjarne Stroustrup、James Gosling、Brian Kernighan。</p><p>Donald Knuth 是有中文名字的：高德纳，1977 年访问中国前所取。</p><p>高德纳参加了两次 Lex Fridman 的录播，我看的是这期是第一次，是在他自己的书房里录的。这个采访非常长，我当作英语听力练习来听，断断续续听完了。</p><h2 id="早期经历"><a href="#早期经历" class="headerlink" title="早期经历"></a>早期经历</h2><p>高德纳回忆了 1957 年开始编程时候使用 IBM 650 的情景，这机器尺寸巨大，但是内存只有 4000 bytes，需要打孔纸卡 Punched card。这算是第一个量产的计算机，IBM 当时只是租给大学使用。高德纳那时候刚好是大学新生，他在这台计算机上熏陶了自己的计算思维。</p><p><img src="/images/ob_pasted-image-20220401150407.png" alt=""></p><h2 id="计算思维"><a href="#计算思维" class="headerlink" title="计算思维"></a>计算思维</h2><p>接着聊计算思维 (或是 Geek 思维)，他曾经提到根据经验推算只有 2% 的人有类似自己的<a href="https://www.red-gate.com/simple-talk/opinion/geek-of-the-week/donald-knuth-geek-of-the-week/">计算思维</a> ，而他的书就是为这些人准备的。</p><blockquote><p>I always try to keep a potential reader in mind – basically somebody who is reading my book because they want to, not because they must, and somebody who has a natural ability to do computer programming. <strong>Only about 2 per cent of the population really “resonates” with programming the way I do</strong>; but somebody ought to write books for that 2%, and I try to be one of the authors who does so. Instead of trying to impress the reader with what I know, I try to explain why the things I’ve learned impress me.</p></blockquote><p>高德纳解释了一下自己说的计算思维，认为自己特别擅长两件事：</p><ol><li><p>能在不同的抽象层之间自由切换，既能把大的问题拆分为小问题，也能在写程序的时候知道下一条指令是什么，知道寄存器里面存的是什么。所以他的书《计算机程序艺术》还是以指令级的 MIX 语言描述算法实现。</p></li><li><p>处理复杂逻辑和系统的能力，比如一个很复杂的算法有 10 来个 case，而每个 case 都在处理不同的逻辑，很多数学问题是基于一两个很通用的规则的，所以他比纯的数学家善于处理更复杂的系统。</p></li></ol><p>我上学的时候买过他的《具体数学》，工作后也买过《计算机程序艺术》，都是潦草看了几章就吃灰了。看来我可能不属于这 2% 😭，面壁中….. </p><p>我认为自己看汇编和复杂的数学公式就有点头晕。最近自己测试了 MBTI，我属于 INTP，这还算是很适合做程序员这类职业的性格特征。也许我对细节和数学抽象都达不到某个深度，但是并不妨碍我做一个应用类的程序员。</p><p>高德纳也谈到虽然大家都为了鼓励新手说人人都能学会编程，但是从自己的经验来说，他有一些领域自己非常感兴趣，而且也按照合适的方法练习，但始终都不能达到某种程度。这意味着很多领域要达到精通确实需要天分。</p><h2 id="文学编程"><a href="#文学编程" class="headerlink" title="文学编程"></a>文学编程</h2><p>在文学方面，高德纳喜欢托尔斯泰，比如《安娜卡列尼娜》这本书不仅讲述了好的故事也带有一些哲学讨论。</p><p>他于 1980 年左右提出了<strong>文学编程</strong>的概念，用近乎自然语言的形式来实现程序。他认为文学编程像是一种 informal 的方式写程序，而使用编程语言是 formal 的方式，同时用两种方式思考对于技术写作非常有用。</p><blockquote><p>My life is a convex combination of english and mathematics</p></blockquote><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>机器学习使用数据来训练模型，数据和算法都非常重要，高德纳说这看起来是非极客的方式，他很难完全相信这些算法，因为即使是搞机器学习的人，有时候也不确定算法到底从数据中学到了什么，但机器学习的方法确实扩大了算法的适用范围。</p><h2 id="写作流程"><a href="#写作流程" class="headerlink" title="写作流程"></a>写作流程</h2><p>接着高德纳描述了自己典型的写作流程，他会先在纸上把初步的想法和算法写出来：</p><p><img src="/images/ob_pasted-image-20220331225215.png" alt=""></p><p>然后站起来在屏幕前修改初稿，平均每周会写 5 个左右的程序，他会看目前该领域新的算法和论文，还会尝试自己去写程序，因为只有通过写程序验证了之后才算是彻底理解，完成算法实现后就开始写最终版本的初稿，顺便出一些数学习题给他那些数学好的朋友们做，把那些他们能完成的当作书本的习题。</p><p>插个八卦，我以前的老板是 Formal Verification 方面的研究者，他说有一次他收到了高德纳的邮件，咨询他论文里的一些细节问题。高德纳写的《计算机程序艺术》可以说是计算机算法领域的百科全书了。</p><h2 id="P-NP"><a href="#P-NP" class="headerlink" title="P = NP"></a>P = NP</h2><p>高德纳倾向于相信 P = NP，但认为即使是成立也可能没有现实意义。额，这段他解释了很多，但是我有的没太听懂细节，以后再学习一下 NP 相关知识。</p><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p>高德纳坦诚自己对人工智能可能不像该领域里的人那么乐观，他觉得现在这些人工智能都是假装有“理解”，和真正智能存在巨大的鸿沟。他有些担心，人们如果真的相信自己制造了的人工智能 — 假装的东西真到一定程度就会让人产生这种幻觉，那就是危险。</p><h2 id="面对死亡"><a href="#面对死亡" class="headerlink" title="面对死亡"></a>面对死亡</h2><p>其中有一段感觉谈起如何面对死亡，听起来有些伤感，高德纳在 2006 年被诊断出患有癌症，后来做了手术，最初的一段时间内他无法正常工作。</p><p>然后他觉得自己应该抓紧时间了却自己一直想做的事。年轻时高德纳就非常热爱音乐，曾经还纠结过是否选音乐专业，如今还有个愿望就是自己作曲，所以他抓紧时间成了这个夙愿，还在 80 岁左右还开了音乐会。</p><p>高德纳觉得自己整个人生非常幸运，一直在做自己喜欢的事，而且也已经完成了人生中的大部分目标，剩下的愿望就是继续完成已经写了 50 年的《计算机程序艺术》。</p><p>Fex 最后一个问题：当你到了天堂碰到上帝，你会问什么问题？</p><p>他回答到：</p><blockquote><p>What kind of browser do you have up there…. I hope we have a good Internet..</p></blockquote><hr><p>这个访谈还有很多其他细节，有时间各位去看看也挺好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220401203823.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2BdBfsXbST8&quot;&gt;Donald Knuth: 
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="算法" scheme="http://catcoding.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>无聊的技术栈</title>
    <link href="http://catcoding.me/p/weekly-7/"/>
    <id>http://catcoding.me/p/weekly-7/</id>
    <published>2022-04-02T10:16:17.000Z</published>
    <updated>2022-04-02T03:54:06.261Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：</p><p><a href="https://catcoding.me/p/weekly-4/">#4 你对世界足够了解吗</a></p><p><a href="https://catcoding.me/p/weekly-5/">#5 财富的三个车道</a></p><p><a href="https://catcoding.me/p/weekly-6/">#6 创造者和实施者</a></p><p>这是第 7 期。</p><h2 id="使用无聊的技术栈"><a href="#使用无聊的技术栈" class="headerlink" title="使用无聊的技术栈"></a>使用无聊的技术栈</h2><p><a href="https://panelbear.com/blog/boring-tech/">On Choosing Boring Technology</a><br><a href="https://boringtechnology.club/">Choose Boring Technology</a></p><p>我们很多人都非常热衷学习新东西，讨论、实践新的框架、语言、工具也算是一些技术人员的爱好。</p><p>而这些文章阐述了这么一个道理：<strong>很多时候，技术爱好和情怀不能当饭吃，选择无聊的技术栈大多数时候是对的</strong>。</p><p>比如说做一个创业公司，更重要的问题是解决什么问题，产品能否达到要求，而选择什么数据库则属于更次要和细节的问题。人的注意力有限，这种情况下选择那些已经验证过的、无聊的、自己熟练掌握的技术栈。</p><p><img src="/images/ob_pasted-image-20220401211133.png" alt=""></p><p>新的、小众的技术栈通常有一些 unknown unknowns，就是你不知道自己会碰到什么问题，而且碰到这些问题时需要花时间去埋坑，而长时间被大量采用过的技术，该踩的坑通常被人踩过了。</p><blockquote><p>Boring is less surprising</p></blockquote><p>当然这也并不意味着我们不用去学习新东西：</p><blockquote><p>You try to maximize your expected gain by taking advantage of what worked well in the past, while sometimes exploring new things to avoid missing out on a possible goldmine.</p></blockquote><p><img src="/images/ob_pasted-image-20220401211902.png" alt=""></p><p>这方面我有些个人体会，我曾经在的中等规模的独角兽公司。2013 年左右，公司在做一些互联网产品时使用了 Ruby on Rails，RoR 在那时候算是新潮的工具。我 2014 年加入也觉得挺少见，感觉 RoR 适合那种几个人的创业团队。</p><p>后来了解到，对公司来说并没有刻意选择，可以解释为偶然因素。因为有喜欢 Ruby 的技术 Leader，然后就继续招了更多的 Ruby 程序员，代码越来越多，人也越来越多。</p><p>而这么些年后，他们就要换技术栈了，一是因为 Ruby 程序员太少了，很多人也不愿意学，毕竟人家会考虑进来干段时间之后好不好跳槽的问题，内卷的人才市场大家考虑的就是这么实际；二是一些技术问题，比如性能、社区支持等，到了如今和 Java 的开发效率也没有本质区别。</p><p>如果把时间拨回到 2013 年，更理性的选择应该还是主流的 Java？RoR 也许那个时候确实算先进生产力工具，但没经过长时间验证。</p><p>从公司 (大部分公司) 角度来说，要解决的完全是个业务问题，技术人的品味和偏好可能导致额外的技术成本。而对于很多创业公司来说，创业成功与否与所选技术栈关系不大，关键还是做的事和做事的人。</p><p>也有一些创业公司使用小众技术，比如 PingCap 采用  Rust 写存储部分，JaneStreet 大量使用 OCaml ，WhatsApp 使用 Erlang，Roam Research / Logseq 使用 Clojure 等等。</p><p>他们使用小众技术栈有其他方面的因素：</p><ul><li>通过小众技术栈吸引到强的开发者，因为这些人更多比例是 polyglot programming</li><li>有技术上的原因，比如是性能、正确性、可扩展性和灵活性</li><li>对所选技术有信心和十足把握</li></ul><p>小众技术栈不适合绝大部分创业公司，更不适合大公司，因为大公司体量大，小众技术栈并不容易大量招人，而且大量投入资源到小众技术栈投入产出比太大。大公司使用小众技术只是局限在某些组，比如 Facebook 用 Haskell 写代码重构工具，那是因为 FP 之类的语言非常适合干这个。</p><p>还有另外一些场景，某些大公司的技术 Leader，他们要做出新的业绩或者抢眼的项目，但在一个稳定的大公司要做出这些事不容易，一种群众喜闻乐见的做法就是引入新的技术栈，或者是用新的编程语言重写某些系统，我听闻在 AWS 现在一些中层的口头禅是 “Why not rewrite in Rust”.</p><blockquote><p>Adding the technology is easy, living with it is hard.</p></blockquote><p>没有银弹！</p><h2 id="焦虑的人"><a href="#焦虑的人" class="headerlink" title="焦虑的人"></a>焦虑的人</h2><p><img src="/images/ob_pasted-image-20220401220632.png" alt=""><br><a href="https://book.douban.com/subject/35539713/">焦虑的人</a> 作者：弗雷德里克·巴克曼，2021 年出版。</p><p>我在微信读书上偶然碰到这本小说，我看评分非常高所以就读了起来。</p><p>这个故事非常精妙而温暖，还充满了荒诞的喜剧效果。作者的写作手法也很独特，不断地切换视角和时间点。</p><p>故事中的每个人物都是不完美的普通人，他们有各自的背景、伤痛和焦虑，而在这场莫名其妙的人质事件中，他们用一些人类公有的同情心拯救了彼此，也接受了自己。</p><p>太喜欢这句话了：</p><blockquote><p>即使知道世界明天就要毁灭，我们今天也要种下一颗小苹果树。</p></blockquote><p>非常期待哪天这个故事能被拍成电影。</p><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/">Operating Systems: Three Easy Pieces</a> 操作系统相关论文，适合操作系统入门。</p><p><a href="https://csdiy.wiki/">CS 自学指南</a> 一个北大学生写的计算机科学自学指南，目录分类很好，粗看里面列的书有很多好的书籍推荐和公开课，非常适合在校学生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-4/&quot;&gt;#4 你对世界足够了解吗&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>优化自己的信息源</title>
    <link href="http://catcoding.me/p/get-better-info/"/>
    <id>http://catcoding.me/p/get-better-info/</id>
    <published>2022-03-31T12:43:06.000Z</published>
    <updated>2022-03-31T04:43:06.380Z</updated>
    
    <content type="html"><![CDATA[<p>我有个年纪比较大的同事，他的特点就是淡定、从容，还有些单纯。</p><p>你和他一聊，发现他对很多现在的新闻不了解，甚至不知道很多影星、歌手、网络红人。但是他并不是对什么都不感兴趣，他有自己喜欢的主题，只是除了自己喜欢的这些其他的都不关心。</p><p>可以说他的获取信息的方式是经过刻意选择的。</p><p>这有什么坏处么？我没想到，很多热闹的新闻看起来都是关我屁事，比如 xx 明星离婚了这类顶流新闻，不知道也没什么损失。</p><p>而刻意缩小自己的信息源好处显而易见，<strong>我们时间和注意力很宝贵，优化自己的信息源、甚至是获取资讯的习惯，让自己获取高质量的信息</strong>。</p><p>可以看到目前很多 App 和网站已经全面退化，如果不优化自己的信息源，我们将被垃圾包围。<br><img src="/images/ob_pasted-image-20220331122320.png" alt=""></p><hr><p>下面我要开启吐槽模式，先拿知乎来举例。</p><p>我曾是知乎的深度用户，从知乎 2011 年创建后的几个月开始使用，那时候知乎社区的整体氛围非常好。但是这么多年后的今天，我已经基本把这个 App 当作中文搜索引擎来使用了。市面上很多 App 都在学习推荐算法，而推荐算法恰恰不利于获取高质量信息。</p><p>就拿知乎来说，它的推荐栏放在了首要位置，而推荐的内容里面质量极其低下，内容里面夹杂广告不说，还非常粗暴。你看我回趟老家一路打开的就是这些，就把地点给换了一下套进了模板吧？</p><p><img src="/images/ob_pasted-image-20220330161658.png" alt=""></p><p><img src="/images/ob_pasted-image-20220330161745.png" alt=""></p><p>难道做推荐算法都不建一个用户画像么，我在知乎上搜过很多次育儿相关信息，这算法蠢到认为我还没谈恋爱？</p><p>另外这些广告点了“不感兴趣”也是没用的，大概是因为他们的广告主数量太少，反正就是不断弹出。知乎的推荐连内容去重都没做，比如一个刷存在感的推广用户，不断在各个主题下发送同样的文本内容，但是我居然能在推荐页的连续三屏都能看到相同回答。</p><p>知乎的另外一个做法是让自己的付费内容推荐给用户，让你看个开头，剩下的需要会员看才行。</p><p>行，我付费，只要是高质量的内容我付点钱我也愿意。然后我用了几天，在看电子书的时候就发现这么个鬼玩意儿：</p><p><img src="/images/ob_pasted-image-20220330162919.png" alt=""></p><p>我想到自己是尊贵的付费会员，立马打开“盐选会员专属客服”报告问题，客服说这确实不能关闭，他们正在搞个活动，然后给了我这么一个表情表示歉意：<br><img src="/images/ob_pasted-image-20220330163149.png" alt=""></p><p>还有很多知乎的细节问题我就懒得吐槽了，我不反对 App 为了流量整这些玩意，我想要的是干净的、清净的界面、高质量的内容，即使这需要付费也可以。</p><p><strong>推荐系统的目标是流量，不是让我们获取好的内容</strong>，比如今日头条这种 App，我曾经试着去上面发点东西，发现他们的编辑后台居然还有标题生成器，能自动生成一些备用标题，这些标题大多是看起来更吸引人的。我作为老古董看了后有些震惊，居然还能这么玩。</p><p>头条上的内容很多都是同质化的标题党，质量低下。知乎的另外一个趋势是抖音化，而抖音…… 我觉得是毒品。</p><p>以前我觉得这东西放在手机角落里，想搜个什么再拿出来看看就可以。但是我低估了抖音的设计，每当我搜了一个什么之后就会花更多时间去看其他的，然后就形成了每天看的习惯。抖音利用了人性中的三毒“贪、嗔、痴“，还有很多人共有的猎奇这个弱点，能极大的抓住人的注意力，让用户成瘾。</p><p>所以这东西绝对不能留在手机里，<strong>不要高估自己的自制力</strong>。</p><p>现在大部分人都已经被这个 App 降伏，每当我坐地铁、坐火车，附近的人开起来外放之后，那种背景音乐和嘎嘎嘎的笑声随之而来，我整个人都会不好。</p><hr><h3 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h3><p>吐槽了这么多，那如何优化自己的信息源和习惯？</p><p><strong>获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息，而我长期关注的信息来源一定是自己认可和刻意筛选的。</strong></p><p>主动和被动有明显的区别。比如我的四岁女儿，我发现她这段时间过多地接触视频类东西，比如动画片和网课，结果就是不能自己静下来好好看会儿书，或者玩玩具。</p><p>当一个人习惯了被动的方式之后，会排斥主动的方式。对于她来说看着这些东西就能乐呵，而自己看书和玩明显感受不同。我不想让她变成等待喂养的小萌鸡，所以想办法尽量减少她看视频的时间。</p><p><strong>主动阅读仍然是最好的获取知识和信息的方式</strong>。而看视频就得分情况，比如我想了解一个主题所以搜索一些相关视频看，或者是欣赏一个高质量的纪录片，这些都是主动的；而因为无聊刷抖音这则是被动的，这是在让低质量内容填充自己。</p><p>当我主动找到了足够多的好的资讯、书籍需要消化时，就没时间去看那些为了流量而写的东西了。目前我的主要信息来源有以下几个方式：  </p><h4 id="个人订阅"><a href="#个人订阅" class="headerlink" title="个人订阅"></a>个人订阅</h4><p>Rss 订阅现在看起来已经有点复古了，我认为这是保持个人信息源精简的好方式。</p><p>我通过 RSS 订阅了很多个人博客和 newsletter，我们发现那些质量好的内容大多来自真正的领域热爱者。</p><p>newsletter 国外用得很多，近些年 Substack 兴起，而 Substack 是绝对没有推荐机制的，完全是基于读者和创作者的订阅关系。</p><p>我们也可以使用 <a href="https://kill-the-newsletter.com/">kill-the-newsletter.com</a>  来把 newsletter 转化为 Rss feed，这样就只使用一个 App 来阅读，我这篇文章 <a href="https://catcoding.me/p/intro-to-obweb/">打造自己的工具 - Obweb</a> 介绍了自己的这个小工具：</p><p><img src="/images/ob_pasted-image-20220330172309.png" alt=""></p><p>虽然我自己写公众号，但是其他公众号我看得不太多，新加的推荐算法影响了公众号整体内容的质量，弱化了订阅的关系。</p><h4 id="主流网站"><a href="#主流网站" class="headerlink" title="主流网站"></a>主流网站</h4><p>中文社区相对来说知乎用得最多，我也偶尔逛逛 v2ex 之类的。</p><p>英文 Twitter，Medium，Dev. to，Quora，Github，HackerNews 等等。</p><p>微博偶尔看，像 Twitter 、微博这类社交应用，我认为是一个扩展自己信息源的渠道，比如看其他人发的一些有趣的和好的东西。</p><p>很多中文网站我尽量控制在搜索 (还得排除百度) 指向的时候看看，因为 <a href="https://www.zhihu.com/question/49684783/answer/2305132342">中文互联网的产出在渐渐枯萎</a> ，可以说现在整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子。</p><p>主动学习某个主题看维基百科非常不错。</p><h4 id="视频播客"><a href="#视频播客" class="headerlink" title="视频播客"></a>视频播客</h4><p>YouTube 和小宇宙，YouTube 上很多高质量计算机类课程视频，播客也是一个很好的信息源，关键是在抱娃时、开车时候也能听。</p><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p>我之前主要用 Kindle，最近使用微信读书比较多。</p><hr><p>关于如何获取更多、更好的信息，欢迎评论交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我有个年纪比较大的同事，他的特点就是淡定、从容，还有些单纯。&lt;/p&gt;
&lt;p&gt;你和他一聊，发现他对很多现在的新闻不了解，甚至不知道很多影星、歌手、网络红人。但是他并不是对什么都不感兴趣，他有自己喜欢的主题，只是除了自己喜欢的这些其他的都不关心。&lt;/p&gt;
&lt;p&gt;可以说他的获取信
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="阅读" scheme="http://catcoding.me/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>创造者和实施者</title>
    <link href="http://catcoding.me/p/weekly-6/"/>
    <id>http://catcoding.me/p/weekly-6/</id>
    <published>2022-03-26T10:07:05.000Z</published>
    <updated>2022-03-30T02:11:06.264Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：</p><p><a href="https://catcoding.me/p/weekly-3/">#3 Basecamp 的小而美</a></p><p><a href="https://catcoding.me/p/weekly-4/">#4 你对世界足够了解吗</a></p><p><a href="https://catcoding.me/p/weekly-5/">#5 财富的三个车道</a></p><p>这是第 6 期。</p><p><img src="/images/ob_pasted-image-20220326105852.png" alt=""></p><h2 id="创造者和实施者"><a href="#创造者和实施者" class="headerlink" title="创造者和实施者"></a>创造者和实施者</h2><p><a href="http://home.wangjianshuo.com/cn/20210517_%e5%88%9b%e9%80%a0%e8%80%85%e5%92%8c%e5%ae%9e%e6%96%bd%e8%80%85%e7%9a%84%e5%b7%ae%e5%88%ab.htm">创造者和实施者的差别</a></p><p>这篇文章讲述了这两个角色之间的差别。</p><p>作者认为演员是实施者，作家是创造者；类比起来开发工程师是创造者，而支持工程师算实施者；工程师是创造者，而程序员是实施者。</p><blockquote><p>虽然工程师需要具备一些开发者的技能，比如写代码，但从根本上，工程师的能力，和代码无关，而是创造一个脑子中的世界的能力。当然，这种划分并非完全分开，每个人每天都会同时做一些工程师和程序员的工作。</p><p>…</p><p>画家，作曲家，作家，建筑师，工程师，企业家，甚至一些精神领袖，都像创造者。对于精神世界里面创造一些东西，他们游刃有余。对于现实世界里面的实现，他们却未必擅长。</p><p>…</p><p>世界需要那些在思维世界不受现实羁绊而翱翔的人，也需要把这些想法变成现实的人。或许我们并没有如此幸运在自己一个人身上在两种能力都无比优秀，或许他们的思维方式本身就是互斥的。理解这种差异，才能知道自己最强的领域，并且和自己互补的人相互欣赏，组成团队达成合作，一起拼出一幅图景。</p></blockquote><p>我仔细想了想，工作内容决定了身份和角色，也许还有一个维度是深度，上限决定了有的事成与不成。</p><p>比如同样是演员，好的演员表演出来有自己的理解和风格。</p><p>所以，我认为关键点在于独创性？比如你做的事情另一个人也能做出来，那大概率是实施者。画家，作曲家，作家，建筑师，工程师，企业家这些人做的事情换一个人也许不能复制，那就是创造者。</p><p><strong>这个世界不缺实施者，但是缺创造者。</strong></p><p>思考一下自己的两种属性的比例，我认为自己在工作上基本还属于实施者，但在写作的过程中我也算个创造者，暂且不论写出来的东西如何，至少这是一种有独创性的活动 :)</p><h2 id="一个-Linux-漏洞"><a href="#一个-Linux-漏洞" class="headerlink" title="一个 Linux 漏洞"></a>一个 Linux 漏洞</h2><p><a href="https://dirtypipe.cm4all.com/">The Dirty Pipe Vulnerability — The Dirty Pipe Vulnerability documentation</a></p><p>这个文档详细描述了一个 Linux 内核漏洞的发现过程。</p><p>作者的应用出现了一个诡异的 Bug，这个 Bug 有个很诡异的现象，每当月底的时候，他们的日志文件压缩后都有几位校验码不对，这导致解压软件就无法解压，作者时不时被这个 Bug 所困扰。</p><p>但是这种偶发性的问题其实很难问题根源，光是发现那个出现日期的规律就已经过去了几个月。</p><p>作者先查遍了应用层的代码，使用排除法一层层分析，最终怀疑到是内核的问题。然后写了一个简单的 C 程序去验证果然是内核 Bug：</p><p><img src="/images/ob_pasted-image-20220324183158.png" alt=""></p><p>文中还详细解释了内核中 Pipe 和 page cache 的关联，对比内核版本之间的改动发现是由于一个很简单的 C 语言结构体里变量未初始化造成的，当然修复也就是两行代码：<br><img src="/images/ob_pasted-image-20220324183655.png" alt=""></p><p>作者最后尝试写 POC，可以利用这个漏洞可以去覆盖一个没有读权限的文件，这甚至会影响到 Andriod 设备，不过 Google 也已经合并了这个修复。</p><p>判断程序员水平的一个很好方法就是给个隐藏的 Bug，看他的分析方法和思路、如何使用各种工具，这比考八股算法靠谱多了。</p><p>看完这篇 Bug 分析我感觉像是看完了一篇侦探小说！🤣</p><h2 id="写博客-10-年得到的经验"><a href="#写博客-10-年得到的经验" class="headerlink" title="写博客 10 年得到的经验"></a>写博客 10 年得到的经验</h2><p><a href="https://ferrucc.io/posts/starting-a-blog/">ferrucc.io | Everything I’ve learned in 10 years of Blogging</a></p><p>这篇文章很长，这第一句就把人吓唬住：</p><blockquote><p>I’m 21, but I’ve been blogging for almost 10 years.</p><p>I grew up doing this.</p></blockquote><p>我完整地看完了这篇文章，不得不说这个小伙写作很好，行文流畅。里面写的很多确实和我的经验是一致的：<br><img src="/images/ob_pasted-image-20220324214153.png" alt=""></p><p>很多人自己建博客，在样式和设计上花了很多时间，折腾完之后就没写几篇，而最难的是长期持续地写出好内容。</p><p>好文章是修改出来的，他这里说 50 % 花费在写上面，其他时间做润色、画图、重写，这些是重要的细节。</p><p>这篇文章虽然长，但是读起来比较容易读，因为作者是意大利人，所以不会用那种俚语之类的，非母语写作有时反而能写出受众范围更大的文章；另外一个原因是每段都相对短，可能就一两句话，这也是现在很多人写长文所采用的方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-3/&quot;&gt;#3 Basecamp 的小而美&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>远离内卷和无趣，我选择多元</title>
    <link href="http://catcoding.me/p/diversity/"/>
    <id>http://catcoding.me/p/diversity/</id>
    <published>2022-03-21T20:47:06.000Z</published>
    <updated>2022-03-30T13:44:06.621Z</updated>
    
    <content type="html"><![CDATA[<p>罗素曾写到：<strong>Diversity is essential to happiness</strong>，王小波在《思维的乐趣》中引用了这句话，翻译为 <strong>参差多态，乃是幸福的本源</strong>。</p><p><img src="/images/ob_pasted-image-20220321205104.png" alt=""></p><p>下面结合我自己的一些经验来谈谈，为什么我认为大家应该去尝试拥抱多元。这里的多元指两个方面，组织里的多元，和个人选择、生活里的多元。</p><h2 id="公司里的多元"><a href="#公司里的多元" class="headerlink" title="公司里的多元"></a>公司里的多元</h2><p>公司的多元意思是愿意招聘、包容不同族裔、性别、年龄、背景和性格的人。我这些年经历了两个极端，所以感受特别明显。</p><p>2011 年我在上海的一个创业公司，我们办公室只有 13 个研发人员，因为销售都在美国。我们都是理工男、大多比较宅。因为都是男生，我们可以光着膀子在办公室换衣服，吃晚饭的时候开上投影放上一段蜡笔小新或维多利亚的秘密。公司很小，只有这么多人，人员单一是没办法的。</p><p>2014 年我加入了深圳某公司，这个公司并不小，但公司有个特点就是只想要一类人，这类人的标签是工作追求极致、极其勤奋。说实话这种人当然每个公司都想要，因为这些词里的每一个都是一种稀缺性。但当一个公司大部分人都是这种行事方式，他们努力加班时，其他人也会跟着节奏跳舞，有时候做的是布朗运动，结果就是有些内卷。</p><p>后来我换工作去了微软，刚开始我不太理解公司为什么一直强调 diversity，渐渐地我体会到公司包容不同的人会对工作环境产生巨大影响。</p><p>入职培训主要是说如何高效沟通，如何消除无意识歧视，如何认清自己的现状以更好地获得职业发展，没有打鸡血。</p><p>在多元化的组织里面，会有各种不同履历背景、性格志向的人。多元必然意味着包容，允许你有不同的看法，也鼓励你说出自己的真实想法，不用担心被质疑提的问题是否是高水平，允许员工在合理范围内自由安排时间，不用和同事比拼加班，没人关注你在公司待了多久时间。</p><p>简而言之，<strong>公司认为你是个成年人，并相信你对自己的行为和选择负责</strong>。没有人告诉你应该向谁谁学习，没人催着你要往上爬。当然，如果想做得更突出升职更快，也可以努力加班做到 120 % 的突出成果，如果想照顾家庭没那么多精力突出，做好本职工作也没人批判。</p><p>员工乐于展现自己的兴趣，有的人早上爬起来骑车去绕个阳澄湖，有的人热爱飞行所以带来模拟设备和大家分享，有的人对绿植感兴趣就在办公室种水培蔬菜，有的人沉迷于桌上足球，当然也有人下班不回家继续努力工作。同事中有 00 后也有 70 后，虽然个性和背景不同，工作起来并没有不顺畅。</p><p>我觉得这就很好，即使以后我不在这工作了，我还是会认为这是个正常的、舒服的，让人自由发展的工作环境。</p><p>有人会说，这是因为微软处于垄断地位，处于软件行业上端，所以才提供这样的轻松包容的氛围。但微软并不是一直都这样，有段时间也出现过狼文化的阶段，只是狼文化并不能解决公司的疲软，反而会导致人员流失。</p><p><img src="/images/ob_pasted-image-20220321133259.png" alt=""></p><p>纳德拉上位 CEO 逐渐改变了公司文化，参考<a href="https://www.huxiu.com/article/182131.html">纳德拉出任 CEO 三年，靠改变“狗咬狗”狼性文化来重塑微软</a></p><blockquote><p>在盖茨和鲍尔默的领导下，微软形成了一种竞争之上的狼性文化。在严苛的绩效管理系统下，团队中的其中一部分人被贴上了优秀的标签，升值、加薪随之而来；而另一群人的表现无论多么优秀，只要在其所在团队中是落后的一方，就会被视为是“老鼠屎”，面临被解雇的窘境。</p><p>而在纳德拉的领导下，“一个微软”的公司文化加速在微软扎根。<strong>他认为员工应该专注于合作，而不是在竞争中诚惶诚恐：“我们的态度应该从‘什么都懂’转为‘什么都学’</strong>。</p><p>我想给员工减减负并传达这样的信息：他们不需要摆出一副‘我什么都懂’的样子，以确保自己的安全地位。他们可以犯错，但我希望他们保持好奇心，不断地学习新事物。”</p><p>奥布莱恩说：“纳德拉成为 CEO 后，管理混乱和勾心斗角的现象都在逐渐减少。员工之间开始建立信任、互相分享新想法并展开真正的合作——他们不再时时刻刻想着竞争、绩效和奖金。”</p></blockquote><p>微软的公司文化改变之后，一些之前离职了多年的老员工又重新回来了，他们有时候还会感叹公司那段时间真是很混蛋。</p><p>同样验证了这一点的是百度，有段时间百度只要狼不要小白兔，结果无法避免公司沦为计量单位。可以看到很多时候对于公司而言，更重要的是决策和方向上的把握。时代要抛弃一个公司，与这个公司员工是否勤奋没有太大关系。</p><p>当然多元与否也与各个国家的具体情况相关，对于很多欧美公司来说，多元是一种政治正确，特别是美国本身是一个移民国家。</p><p>我不反对公司只想招某一个类型的员工，如果公司处于中小规模时，频道相同的人可能会减少沟通成本，执行力上更为高效。我反感某些公司只招一类员工，比如年轻皮实的，在环境上构造内卷的氛围，让无意义加班来缓解公司策略上失败和管理上的焦虑，而这样的公司并不少。</p><p>希望更多公司像对待成年人一样对待员工，容忍不同人的生活态度和工作节奏。</p><h2 id="生活中的多元"><a href="#生活中的多元" class="headerlink" title="生活中的多元"></a>生活中的多元</h2><p>启发我写这一段的是因为这篇文章：<a href="https://world.hey.com/dhh/diversify-your-life-d7fd8020">Diversify your life</a></p><blockquote><p>If your existence is all about work, and work goes to shit, then life goes to shit too. If you live for your hobby, and your hobby hits the wall, then your life crashes too. If everything else is waiting until you hang with your mates, and your mates fade away, then you fade too. Betting your drive to get up in the morning on a single path will leave you completely stuck if that one road is blocked.</p><p>Don’t bet all your happiness and purpose on a single square.</p></blockquote><p>我认同这点，<strong>不管是从生活角度、还是技术角度，过于单一往往意味着狭隘和无趣</strong>。我现在也在尝试用拥抱多元的态度去生活，多元意味着让自己的生活有更多选择，不排斥可能性。</p><p>几年前我和基友爬深圳的梧桐山，我们沿着大路慢悠悠走到电视塔那个点，然后我们打算下山。这时我想沿着原路返回有点无聊，毕竟风景已经看过了，然后我俩就沿着山间小路往下走，其中还迷路了两次，最终耗时两个小时才走到山底，整个过程又累又饿，但却是我在深圳爬了这么多次山印象最深刻的一次。</p><blockquote><p>大多数人过着受变幻莫测的命运所掌控的随遇而安的生活。很多人受迫于其出生的境遇和生活的必需而保持一条笔直且狭窄的生活道路，在这条路上，没有向左转或者向右转的可能。</p><p>– 毛姆</p></blockquote><p>人的每个选择犹如计算机中的每一步判断，在算法设计中贪心算法就可能会有这个缺陷，掉入局部最优解，而最后没法找到全局最优解。</p><p>如果自己没有刻意做过更多尝试，人生就会陷入路径依赖：所有当前的选择都是最优的，但是最后的结果趋于平庸。一个解决的办法就是模拟退火，引入一些随机的选择，即多元化自己的选择。</p><p><img src="/images/ob_pasted-image-20220321132716.png" alt=""><br>当然我并不是说随机的引入其他选项，比如我现在就不做程序员了，我去干销售。<strong>引入选项得利用现在已有的优势，结合自己的兴趣和爱好，在可能的范围内找更多可能性。</strong></p><p>多年来我一直都是纯的技术理工男，近些年来业余时间我更多关注一些非技术的领域，多读一些技术无关的书籍。逐渐地我觉得自己一些看问题角度变了，甚至有些后悔自己曾经过于执着于技术。</p><p>我还尝试让自己的收入来源多样化，至少我体会到一个好处在于最大化满足感，比如我通过写作赚上 1 万元，成就感和满足感大于我通过上班赚上 5 万元，要是哪天我钓鱼赚上 1  千元，成就感抵得过我上班赚上 5 万元。</p><p>即使是在技术上，保持多元的态度也意味着更理性。</p><p>我从 2006 年一直用 Emacs，曾经我以为自己会用上一辈子，毕竟这是最高效、最适合自己的编辑器，但是 2020 年我换了工作之后我开始用 VsCode 了。然后我发现 Emacs 并不是不可抛弃的，因为一直死守 Emacs 失去了很多体验新东西的机会，VsCode 在很多方面是非常好的，而且我并不需要花什么时间去配置它，使用 VsCode 的群体更大，我可以获得更多人的经验和分享。</p><p>我从 2005 年开始一直用 Linux，工作后我也基本用 MacOS，我曾经以为 Mac 必须是更先进的，然而 2020 年后我开始使用 Windows 工作，我发现也可以很高效，用 WSL 并没有失去使用命令行的乐趣。</p><p>在技术这行存在着各种各样的鄙视链，编辑器、编程语言、操作系统，框架等等，我们往往自认为自己的选择是最好的。</p><p>不同的选择某种程度上代表着不同的世界观，有的人认为开发效率更重要，而有的人认为性能更重要，有的人认为正确性更重要。这个世界本来就是多态的，每个人的世界观、需求、品味都会有差别，自然就会有不同的技术选择，说服和比较都没多大意义。</p><p>经历过数次的反转后，我开始反思那些我曾经坚信的想法不一定正确，而<strong>人都有一个倾向那就是把自己局限在某个角色、领域、自己最熟悉的区域里，并把自己成功的经验到处复制</strong>。</p><p>更好的态度是保持多元的心态，技术都是工具，不必太过于狭隘和执着。XX 最牛、最强，这种态度是一种拒绝的、封闭的心态，而用一种不断探索、自我怀疑、包容异己的态度来看待技术会更好。</p><hr><p>以上就是我的一些个人体验和想法，最后推荐一些启发我的文章：</p><ul><li><a href="http://www.bwsk.com/xd/w/wangxiaobo/000/003.htm">思维的乐趣</a> </li><li><a href="https://coolshell.cn/articles/8790.html">程序算法与人生选择</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;罗素曾写到：&lt;strong&gt;Diversity is essential to happiness&lt;/strong&gt;，王小波在《思维的乐趣》中引用了这句话，翻译为 &lt;strong&gt;参差多态，乃是幸福的本源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="成长" scheme="http://catcoding.me/tags/%E6%88%90%E9%95%BF/"/>
    
      <category term="职场" scheme="http://catcoding.me/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>财富的三个车道</title>
    <link href="http://catcoding.me/p/weekly-5/"/>
    <id>http://catcoding.me/p/weekly-5/</id>
    <published>2022-03-17T22:55:06.000Z</published>
    <updated>2022-03-18T01:40:06.266Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：</p><p><a href="https://catcoding.me/p/weekly-2/">#2 好的抽象和设计就像积木</a></p><p><a href="https://catcoding.me/p/weekly-3/">#3 Basecamp 的小而美</a></p><p><a href="https://catcoding.me/p/weekly-4/">#4 你对世界足够了解吗</a></p><p>这是第 5 期。</p><p><img src="/images/ob_pasted-image-20220317223808.png" alt=""></p><h2 id="百万富翁快车道"><a href="#百万富翁快车道" class="headerlink" title="百万富翁快车道"></a>百万富翁快车道</h2><p>这本书名比较俗气，看起来是教人快速致富的。我看到有些人推荐了，所以也找来看看。读完后感觉有些鸡血，可能是因为一些观念我之前已经接受过了，所以并没有大受启发之感。</p><p>我觉得这本书的比喻很贴合，把人的财富道路分成三种：</p><p><strong>人行道</strong>：他们忽视金钱，对钱没有管理，没有计划和储蓄，被欲望驱使，花的钱永远比赚得多，缺乏财务自律，牺牲明天享乐今天。典型的是那些消费主义的奴隶，背上高额债务的人。</p><p><strong>慢车道</strong>：绝大部分人都处于这个车道，兢兢业业工作，每月可能会留有部分积蓄，不至于出现生活窘迫，但需要一直工作到退休。他们大部分情况下是消费者，人生中的财富积累是线性的。</p><p><strong>快车道</strong>：这小部分人是生产者、企业家、发明家和创造者，他们发明新东西或者是利用规律，去创业并承担责任，通过商业系统来积累财富，财富增长是指数级的。因为承担了更大的风险和责任，所以可能获得巨大的财富。</p><p>他们的认知如下：</p><blockquote><p>·对债务的看法：如果允许我建立和发展我的系统，债务是有用的。<br>·对时间的看法：时间是我所拥有的最重要的资产，远远超过金钱。<br>·对教育的看法：当你停止学习的那一刻，你就停止了成长。不断扩充我的知识和认识，对我的旅程至关重要。<br>·对金钱的看法：金钱无处不在，而且非常充裕。金钱是我影响了多少人的真实反映，也反映了我创造价值的能力。<br>·对财富的看法：建立现金流和资产评估的业务系统。<br>·财富公式：财富=净利润 + 资产价值。<br>·策略：我付出越多，我在时间、金钱和个人满足感方面就越富有。<br>·目的地：终身获得被动收入，既通过生意，也通过投资。</p></blockquote><p>虽然整本书主要在谈论如何赚钱和积累财富，但是到了后来又说：</p><blockquote><p>财富不是由物质财产、金钱或“东西”成就的，而是由我所说的 3 个基本的“f”组成，即家庭（family）或人际关系、健康（fitness）和自由（freedom）。在这个财富三位一体中，你会找到真正的财富和幸福。</p></blockquote><p>这倒是个政治正确的关于财富的定义。</p><p>这本书的写作语气和论据我倒不是很喜欢。大概是因为作者早年经历过悲惨窘境，后来通过互联网发财致富，这本书即使是翻译过来了还是有那么点戾气，比如把走在慢车道的人描述得很悲惨，认为必须上班 5 天这种生活不值得一过，如此等等。</p><p>尽管如此，这整本书的内容还行，推荐大家试着去读读，不一定要去创业，树立正确的财富观和财务管理概念也很重要。</p><h2 id="Rails-核心贡献者的分离"><a href="#Rails-核心贡献者的分离" class="headerlink" title="Rails 核心贡献者的分离"></a>Rails 核心贡献者的分离</h2><p>Rails 社区这段时间在闹分离，一些核心开发者把自己的名字从列表中移除。<br><img src="/images/ob_pasted-image-20220317085124.png" alt=""></p><p>很多人都是懵逼的，不知道具体发生了什么。我以前写过几年 Rails，虽然现在早已经不碰了，我还是花了点时间看看到底是怎么回事。</p><p>事件的开头是因为 DHH 于 2022.03.03 发表了一篇文章：<a href="https://world.hey.com/dhh/no-railsconf-faa7935e">No RailsConf</a> ，其中列举了自己 2021 年对 Rails 所做的所有贡献，然后晒出了一封 RailsConf 组织者的邮件：</p><blockquote><p>_Hi David,  </p><p>Hope you’ve been well. </p><p>With you having been mostly offline the last year, the program committee has decided it would be valuable for the community to start sharing the opening keynote stage with other contributors. We have a few in mind but if you have any suggestions of people who have been impactful this year, please share them. </p><p>If you have any questions, please let me know.  </p></blockquote><p>邮件开头那句：<code>With you having been mostly offline the last year</code> 直接让 DHH 爆了，他认为这是对政治、意识形态差异的报复。</p><p>因为我订阅了 DHH 的博客，所以第一时间我也阅读到了这篇文章，我当时觉得他是不是稍微有那么点敏感了，依照我的理解 RailsConf 组织者是想让他和其他人一起做 Opening Keynote，这好像也不是过分的要求，现在很多技术类 Conf 都是这样的。</p><p>这个组织者写出这么一句话大概是因为 DHH 之前在两件事上惹起的争议：</p><ol><li>Basecamp 禁止员工讨论政治敏感话题，导致一半员工离职</li><li>DHH 之前站队加密货币</li></ol><p>根据这个 Reddit 帖子里的描述 <a href="https://www.reddit.com/r/rails/comments/t5u3fe/dhh_is_cancelled_from_railsconf_wont_give_keynote/">Dhh is cancelled from RailsConf: Won’t Give Keynote : rails</a> , 也验证了我的感受。DHH 一直都是桀骜不驯，心直口快的人，这个特点容易引发争论，特别是现在意识形态的分裂越来越严重的情况下，更容易造成社区的割裂。</p><h2 id="Facebook-技术主管的经验"><a href="#Facebook-技术主管的经验" class="headerlink" title="Facebook 技术主管的经验"></a>Facebook 技术主管的经验</h2><p><a href="https://maheshba.bitbucket.io/blog/2021/10/19/42Things.html">42 things I learned from building a production database</a></p><p>2017 年，Mahesh  从耶鲁大学的教职岗位上休假去了 Facebook。他创建了一个基础架构团队，在 Facebook 打造了一个名为 Delos 的分布式存储系统 (Facebook 版的 Chubby)。他们用了不到一年的时间里完成了初版 ( 3 人的初始团队)，然后团队规模扩大到 30 多名工程师。这个项目的四年中都没有严重的事故。</p><p>在这篇文章里作者分享了从用户、项目管理、设计、团队文化、策略、可观测性等各个维度的思考，这里面包含一些技术、管理方面的经验，非常值得一读。</p><p>做 Infra 的好处在于技术挑战比较大，而且面对的客户通常来自自己公司，相对来说沟通起来会容易点。这里面谈到的一些技术点，通常也是分布式系统的挑战，比如系统时间在分布式系统中是非常容易出问题的：</p><blockquote><p>Avoid using real-time for correctness guarantees or comparing clocks across machines unless you have (and understand) error bounds on the clock.</p></blockquote><p>存储系统应该优先考虑一致性和持久性，因为这两个更难衡量，出现问题也更难修复：</p><blockquote><p>For storage systems, bias heavily in the beginning towards consistency and durability rather than availability; these are harder to measure and harder to fix if broken. Because availability is easier to measure, there will be external pressure to prioritize it first; push back.</p></blockquote><p>在大厂做好技术管理不容易，既要懂技术又要懂得管理，还要争取到好的项目，给团队足够的存在感。基本上作为工程师，一个在大公司的工作体验与直接主管最挂钩。管理他人意味着用了杠杆，所以管理者的好和坏都会被放大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-2/&quot;&gt;#2 好的抽象和设计就像积木&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="weekly" scheme="http://catcoding.me/tags/weekly/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>我如何写出一万元的文章</title>
    <link href="http://catcoding.me/p/my-writing-story-on-medium/"/>
    <id>http://catcoding.me/p/my-writing-story-on-medium/</id>
    <published>2022-03-13T15:09:05.000Z</published>
    <updated>2022-03-14T14:12:05.859Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220311174426.png" alt=""></p><p>当我开始练习写作时，他人的故事、技巧分享激励了我。希望我的经历也会帮助到其他人，这篇案例分享的文章是我 2020 写的，原文是 <a href="https://bettermarketing.pub/how-i-wrote-a-500-article-in-my-first-3-months-on-medium-83b5391abcd3">How I Wrote a $500 Article in My First 3 Months on Medium</a> ，我改过来加上一些后续。</p><p>一万元并不是一笔巨款，但是算是我赚的时薪很高的一笔收入，因为我写当时那篇文章只花了 30 分钟。</p><h2 id="如何写出来的"><a href="#如何写出来的" class="headerlink" title="如何写出来的"></a>如何写出来的</h2><p>我作为一名软件工程师已经工作了近十年。我喜欢阅读，但没有写过太多文章。2019 年我开始练习英语写作，我在网上看到东西都会想想这篇文章怎么样，哪些地方值得学习。</p><p>某天，我看到了一篇关于 Linux 好玩的命令的中文文章，觉得这有点意思，我们在日常工作中并不使用这些命令，但它们是程序员和 Linux 系统里的一种小幽默。我想可以写一篇 Medium 风格的文章，我在学习这种风格，反正也需要练习。</p><p>我之前看过一些营销类的资料，诡异的心理学说标题中的奇数会吸引更多注意力，所以我得凑够 7 个命令，这感觉是在配制神秘药水。我读的那篇文章是针对极客的，我想把受众扩大到新手或非技术领域的读者，所以加入了一些如何安装这些命令的详细说明。</p><p>我在 Mac 上尝试了每个命令，如果在 Mac 上没有我就在 Linux 虚拟机上试试，然后给每个命令都配了一张截图。</p><p>我大概用了 30 分钟完成了，然后就提交到专栏 <a href="https://medium.com/better-programming">Better Programming</a>  。这是一个面向 IT 专业人士的专栏，我之前在这里已经投递成功过一些技术文，但这篇不是硬核技术文，所以有可能不会被接收。我当时想，如果没有被接受我就发布在个人页面好了，反正也没没付出太多时间，随手一试吧。</p><p>幸好 Better Programming 的编辑 <a href="https://zackshapiro.medium.com/">Zack Shapiro</a>  很快接收并发表了这篇文章：<a href="https://betterprogramming.pub/7-terminal-commands-that-will-just-make-you-smile-3f5bc8778080">7 Terminal Commands That Will Just Make You Smile</a> 。</p><p>他们还配了一张可爱的图片和带点幽默感的副标题：</p><blockquote><p>These tutorials don’t always have to be practical</p></blockquote><p><img src="/images/ob_pasted-image-20220312144033.png" alt=""></p><p>我估计是 Medium 在一些相关主题中推荐了这篇文章，阅读和点赞数开始滚雪球地增加，这算是我学习写作 3 个月里写出的表现最好的文章了。</p><h2 id="如何继续完善"><a href="#如何继续完善" class="headerlink" title="如何继续完善"></a>如何继续完善</h2><p>大约两天后，我看到数据不错就开始思考如何改进这篇文章。</p><p>文章本身不长，只有 300 字。Medium 是看吸引了多少付费用户的阅读时间来计算稿费的，那如何提高平均阅读时间？</p><p>我的想法是让它更有吸引力😏</p><p>首先想到的是光有截图不够，应该为这些命令制作 GIF，因为 GIF 能更好地展示这些命令的有趣性。我以前没有在 Mac 上制作过 GIF，我在 Google 上搜索发现一个叫 LICEcap 的小工具，用这个工具很快就完成了 GIF。我甚至在页面上内嵌了一个 Youtube 视频，我要做的就是使这篇文章活泼生动，让读者很快得到乐趣并盯着文章看。</p><p>最终这篇文章虽然很短，平均阅读时间为 2 分半钟，阅读量是 10 w，挣了 1300 多美金：<br><img src="/images/ob_pasted-image-20220310165616.png" alt=""></p><p>疫情的那段时间，我每天看着这篇文章赚上几百元的被动收入，感觉很好。</p><h2 id="我学到了什么"><a href="#我学到了什么" class="headerlink" title="我学到了什么"></a>我学到了什么</h2><p>这篇文章的想法并非完全原创，也很简单。我所做的是分享点趣味，并且扩大受众面，为目标受众做出一篇完美的文章。</p><p>我在很短的时间内完成了初稿，发布之后如果数据好就继续雕琢到完美，这是一个可行的节省时间的策略。</p><p>那如何重现这一切呢？说实话，我不知道，谁也不能保证根据这个策略就能再写出一篇。我还写了一些其他文章，所花费的时间比这篇更多却没得到这么多阅读量。写作中就会出现这样一些惊喜，那些不经意间写出来的反而火了。我想这篇能很快传播开来，一个原因是<strong>优秀的配图和幽默感容易引起病毒式传播</strong>。</p><p>这篇文章确实是一个好的开始，因为我感觉这个经历有点靠边 Marketing，所以我又能写下这篇案例分享的文章。初稿我写得并不好，Better Marketing 的编辑 <a href="https://nik.art/now/">Niklas Göke</a>  回复说噪音太多，能不能专注于写出来的过程，你当时的想法和思考等，写得越详细越好。我按照他的思路重写了这篇文章，最后也获得不错的结果：</p><p><img src="/images/ob_pasted-image-20220312144005.png" alt=""></p><p>给靠谱的 Meidum 专栏投稿的好处在于，作者提交后他们的编辑还会继续修改，我估计是因为编辑看我是非英语母语写作，所以会帮忙润色。我则可以看他们的修改来学习英语和写作。</p><p><strong>对于写作赚钱这件事来说，没有一个必定成功的公式，我们需要做的就是写得更多、更好，写完给行家看，根据反馈修改，这就是最好的提高途径</strong>。对于新手来说，投稿是个不错的办法，这样即能赚钱又能锻炼自己。</p><p>最后提一下，我知道一些人也想参与 Medium 的合作伙伴项目 (因为只有参加了这个才能通收稿费)，一个门槛是 Medium 现在还不支持中国的银行卡，所以就比较麻烦。我的解决办法就是找了个朋友，用他的卡帮我收😂。</p><p>我还是很推荐想学习英语或者写作的朋友多去 Medium 写写，不止有靠谱的编辑，也有很认真阅读的读者，即使不是为了赚钱也值得一试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220311174426.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当我开始练习写作时，他人的故事、技巧分享激励了我。希望我的经历也会帮助到其他人，这篇案例分享的文章是我 2020 写的，原文是 &lt;a h
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="英语" scheme="http://catcoding.me/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>你对世界足够了解吗</title>
    <link href="http://catcoding.me/p/weekly-4/"/>
    <id>http://catcoding.me/p/weekly-4/</id>
    <published>2022-03-08T22:40:05.000Z</published>
    <updated>2022-03-09T02:34:06.073Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式。</p><p><a href="https://catcoding.me/p/weekly-1/">#1 你可以创造运气</a></p><p><a href="https://catcoding.me/p/weekly-2/">#2 好的抽象和设计就像积木</a></p><p><a href="https://catcoding.me/p/weekly-3/"># 3 Basecamp 的小而美</a></p><p>这是第 4 期。</p><h2 id="避免偏见"><a href="#避免偏见" class="headerlink" title="避免偏见"></a>避免偏见</h2><p>这两周我看了一些非技术类的书籍和视频，我最推荐的是这本<a href="https://book.douban.com/subject/33385402/">《事实》</a>，可以说一定程度上改变了我的认知。</p><p>这本书是 2019 年出版的，书的开头有 13 个测试题，全都是关于这个世界的人口、卫生、收入、教育、环境等方面的认知测试，我的结果是做对了 3 个，这和大猩猩的测试结果一样。</p><p>很多人都是这样的测试结果，甚至包括那些专业人士和国家领袖。可以说我们很多人对世界的认识还停留在十多年前，和现实有着巨大的认知差异。</p><p><strong>在很多方面，这个世界其实并没有那么糟，而是在变好的</strong>。</p><p>书中提到：</p><blockquote><p>我最担心的五大全球性问题包括：全球性传染病、金融崩溃、世界大战、气候变化以及极度贫穷。</p></blockquote><p>没想到才不到三年，全球性传染病这点应验了，而俄罗斯和乌克兰正在打战。可以看到网络上、现实中很多人都在为战争争论不止，很多人只相信自己所看到的。我在 Twitter 上看到有个人和儿子对此争论，因为儿子持有不同的立场就觉得永远地失去了儿子。</p><p>我推荐大家也读读这本书，在下结论判断对错之前，思考一下自己是否足够全面了解乌克兰、俄罗斯的历史，我们从媒体看到的是否是片面的。</p><p><img src="/images/ob_pasted-image-20220309094806.png" alt=""></p><p>这本书列举了一些方法来避免自己陷入偏见。为了让自己能够更好的理解这个世界，我们应该保持谦卑和好奇心：</p><blockquote><p>保持谦卑，意味着要认识到我们的本能通常会妨碍我们认识到事实的真相。它意味着我们要认识到自己知识的局限性。它意味着我们应当很坦然地说“我不知道”。它还意味着，等你形成了一个观点之后，要随时准备接受新的事实来改变你的观点。</p></blockquote><blockquote><p>保持好奇心，意味着你应当对新的知识和信息保持开放的心态，并且积极地寻找新的信息。它意味着你能够拥抱和你世界观不符的事实，并且可以努力去理解它们背后的含义。</p></blockquote><p>主要作者汉斯·罗斯林在该书接近尾声时因病去世，遗憾。</p><h2 id="帝国的兴衰"><a href="#帝国的兴衰" class="headerlink" title="帝国的兴衰"></a>帝国的兴衰</h2><p>这周我还看了《原则》作者 Ray Dalio 的一个非常好的视频：<a href="https://www.youtube.com/watch?v=xguam0TKMw8">Principles for Dealing with the Changing World Order</a>，详细地讲述了帝国兴衰地规律。</p><p>也许我们真快到了一个历史节点：</p><p><img src="/images/ob_pasted-image-20220303192809.png" alt=""></p><h2 id="一个-L5-自动驾驶的赌局"><a href="#一个-L5-自动驾驶的赌局" class="headerlink" title="一个 L5 自动驾驶的赌局"></a>一个 L5 自动驾驶的赌局</h2><p>2030 年自动驾驶 L5 能达到大规模商用么？</p><p>这里有一个赌局 <a href="https://blog.codinghorror.com/the-2030-self-driving-car-bet/">The 2030 Self-Driving Car Bet</a>，参与者是 Stack Overflow 的创始人 <a href="http://en.wikipedia.org/wiki/Jeff_Atwood">Jeff Atwood</a> 和游戏编程的大神  <a href="https://en.wikipedia.org/wiki/John_Carmack">John Carmack</a></p><blockquote><p><strong>By January 1st, 2030, completely autonomous self-driving cars meeting <a href="https://www.sae.org/binaries/content/assets/cm/content/blog/sae-j3016-visual-chart_5.3.21.pdf">SAE J3016 level 5</a> will be commercially available for passenger use in major cities.</strong></p></blockquote><p>Jeff Atwood 认为这个目标达不到，而 John Carmack 认为是可以的。这里 L5 的标准是驾驶者上车后除了指定目的地，驾驶的全程不用进行任何人工干预 (自然灾害情况除外)。</p><p>L4 标准：基本上驾驶就是车辆的事情，驾驶员只有在极端情况下才需要介入。目前已经有一些公司几乎达到了 L4 标准，但是没有出现大范围的商用，而现在更多的是辅助驾驶，像特斯拉这种。</p><p>经过这么些年在自动驾驶上的研究，目前看来完全解决自动驾驶比预期得要更难，比如<a href="https://www.bloomberg.com/news/articles/2021-08-17/waymo-s-self-driving-cars-are-99-of-the-way-there-the-last-1-is-the-hardest">Waymo’s Self-Driving Cars Are 99% of the Way There. The Last 1% Is the Hardest</a>，这最后的 1% 解决谁也不敢大范围投入吧。</p><h2 id="辞掉年薪-45-万美金的工作"><a href="#辞掉年薪-45-万美金的工作" class="headerlink" title="辞掉年薪 45 万美金的工作"></a>辞掉年薪 45 万美金的工作</h2><p><a href="https://medium.com/@_michaellin/why-i-quit-a-450k-engineering-job-at-netflix-874454397885">Why I Quit My Engineering Job (at Netflix) | Medium</a></p><p>Michael Lin 是一个华人，他在 Netflix 工作了接近 4 年。大家都知道 Netflix 的工程师岗位只有 Senior Software Engineer 这个职级，但是拿的却是行业内的顶尖薪酬。</p><p>这位作者在 Netflix 工作了一年半以后，渐渐地对工程性的工作失去了兴趣。从他的描述看来，有很多复制粘贴的工作。看来架构太稳定就会出现这样的问题，什么东西拿之前的过来改改就可以了，工程师没有成就感😂。</p><p>里面有个细节，他爸妈是 70 年代去的美国，听到儿子要放弃高薪工作，感觉是浪费了他们那代的努力，看来这确实是非常典型的中国式家长：</p><blockquote><p>“Just keep your head down and do the work!” they said.<br>“Don’t be ungrateful for what you have!” they said.</p></blockquote><p>作者本身对产品方面的事更感兴趣，因此他尝试过转到 PM 的角色，但这在 Netflix 没有先例。如果对工作没有认同感，那自然就绩效越来越差。而且疫情的原因，导致只能在家办公，这样也没了办公室社交：</p><blockquote><p>And all you were left with was the work itself. So if you didn’t like the work, and that was all you had, COVID magnified this fact 10x more.</p></blockquote><p>另外因为看到很多人死于新冠，这让他更加焦虑，觉得自己守着高薪浪费青春：</p><blockquote><p>I realized what the real cost to golden handcuffs was. The cost is your youth, your time, and your life. People don’t accurately judge these costs, because a salary is a hard number, whereas the value of your youth is more intangible. But just because something is hard to measure doesn’t make it any less valuable than something countable like money. It’s hard to measure the value of a brand, mental health, or love, but we know it matters.</p></blockquote><p><strong>golden handcuffs</strong> 这个词很形象，一份高薪而不喜欢的工作就如金手铐。</p><p>不得不说，只有思考过死亡才会更加有决心追求真心想要的。钱确实很重要，但也不是最重要的。如果做一份工作确实难受，那就辞了吧。</p><p>辞职之后作者自己工作，做了一些视频相关的工具，还有在 Medium 上写作，兼职做 career coaching，这个活大部分来自这几篇文章。不得不说，写作真是非常重要！</p><p>这篇文章写得非常棒，不管从写作技巧还还是内容本身都值得学习，推荐你读一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-1/&quot;&gt;#1 你可以创造运气&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="weekly" scheme="http://catcoding.me/tags/weekly/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>谈谈工作中的犯错</title>
    <link href="http://catcoding.me/p/avoid-mistake/"/>
    <id>http://catcoding.me/p/avoid-mistake/</id>
    <published>2022-03-06T20:08:05.000Z</published>
    <updated>2022-03-11T02:57:05.785Z</updated>
    
    <content type="html"><![CDATA[<p>想到这个题目是因为最近我们组出现了一个严重的线上问题，某小哥在进行线上操作的时候传错了一个参数。这种问题在程序员这行很常见，所谓常在河边走，哪有不湿鞋。</p><p><img src="/images/ob_pasted-image-20220306101406.png" alt=""></p><p>工作这么多年我自己犯过错，也看到过身边的删库跑路案例，更有甚者因为泄露敏感信息而锒铛入狱。这里分享一些自己所见的真实案例，以及如何在编程上、工作习惯上避免犯错。</p><h2 id="案例分享"><a href="#案例分享" class="headerlink" title="案例分享"></a>案例分享</h2><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p><a href="https://www.eet-china.com/news/201904281038.html">大疆前员工泄露公司源代码，被罚 20 万、获刑半年</a>，这个安全事故完全是因为员工的安全意识不足造成的。</p><p>这类问题非常多，不信你可以在 Github 上用 password、private key 之类的关键词搜索，很多人会无意识把这些敏感信息推送到 Github 上，而公司又没法完全禁止 Github，只能不断加强安全培训和监控。</p><p>从这个案例来看公司的损失非常非常大，单人力成本这块就难以估计，我也因为这个事故参与到了安全建设中，后面在这里领域工作了两三年左右。真是一人挖坑，无数人救火。</p><h3 id="退款接口"><a href="#退款接口" class="headerlink" title="退款接口"></a>退款接口</h3><p>我在做支付、物流相关的系统时，曾经因为一个诡异的接口造成了直接上的金钱损失。</p><p>我们的支付是通过第三方支付系统做的对接，比如用户通过支付系统向我们预支付了 100 美金，等他收货后第三方把钱给我们。第三方支付有个退款接口，假设他不想要货了于是发起退单，我们的系统就会调用第三方的支付接口去退款。</p><p>因为接口有时候调用失败或者返回不及时，我在写代码的时候默认既然对方预支付了 100 美金，多次发起退款接口自然也没问题，所以我有一些重试的机制来确保退款成功。过了一段时间后发现账目上有点差别，后来经过排查是因为重复调用了退款接口，这个接口如果两次调用就会退给客户退 200 美金！</p><p>最后我们只能发邮件给一些客户，说多退了钱，麻烦能退回来么，有的客户很好心就直接返回了钱。我记得有个客户回复说：我认为这是上帝给我的恩赐，对不起我已经花完了。</p><p>额，我就是那个可怜的上帝好么。</p><h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><p>我前公司所在的部门曾经有个发货系统，当多进程跑起来的时候，有个并发问题没处理好，最终导致用户收到多份相同的货物。</p><p>当程序员经验不足的时候这种错误就很容易出现。代码中哪些部分是可以重入的，哪些部分需要加锁，都需要仔细考虑。但是在业务快速发展，快速堆代码的时候，我们可能不一定有足够的时间把所有细节都考虑清楚。</p><h3 id="配置错误"><a href="#配置错误" class="headerlink" title="配置错误"></a>配置错误</h3><p>我之前出现过的一个最大的错误是因为配置错误。这件事我一直都记得，因为印象实在是深刻，现在对正则表达式都有所恐惧。</p><p>那天我正准备下班回家，我配置了一些安全上的防护规则。然后我的 Leader 说拦截的页面不够好看，我们要不统一个拦截页面。我想了一下觉得很简单，就准备在我们自己定制的网关 (Kong) 上配置一条全局规则，我想通过正则表达式把所有拦截页面 redirect 到订制的错误页面。</p><p>我通过后台 Admin 页面，在一个全局插件上写下了一条正则表达式，提交生效。然后立马就收到了报警，大量系统同时报警！因为有公司很多域名的请求都通过这个网关，而我配置的正则表达式嵌入到 Lua 代码中后有语法错误，导致所有系统的路由处理时都报错。</p><p>最要命的是我们的 Admin 页面也会经过这个网关，所以 Admin 页面也没法访问了，意味着我无法通过页面去回滚配置！我当时已经手心发汗，如热锅上的蚂蚁了。强迫自己镇静下来，马上修改插件的代码，赶紧让运维一起迅速地更新服务器上网关代码。</p><p>整个过程大概花费了  20 分钟，这期间整个公司估计有一半的系统都是不能访问的，包括那些官网、商城等。</p><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><p>犯错并不可怕，只要是个人就可能会犯错。出现错误往往也不止是个人的问题，也意味着团队有问题，比如对代码质量要求不够，系统设计不够容错，权限划分不够好，安全机制不健全，没有 代码 Review 等等。<strong>错误是个人和团队最好的学习、提高的机会，而且我们已经交了学费</strong>。</p><p>但是随着我们成长，最好避免个人犯一些低级的错误，特别是安全类的问题。写程序、做系统设计的时候就做好防御，把犯错的概率降低到最小。</p><h3 id="防御编程"><a href="#防御编程" class="headerlink" title="防御编程"></a>防御编程</h3><blockquote><p>面包落地的时候，永远是抹黄油的一面着地。</p></blockquote><p>上面配置的问题，我在做网关的时候其实意识到了潜在风险， Admin 路由也经过自己控制那出问题不就嗝屁了吗？当时我自我安慰只要不对这个路由开有问题的全局插件就可以了，所以没有及时处理这个风险，最终导致自己掉入坑里。</p><p>当系统中存在潜在问题时，时间一拉长出现的概率就大了。因此我们编程的时候总要有意识想最坏的情况是什么，哪些是危险操作，比如写数据如果没写入成功会怎样，如果并发运行了会怎样，如果文件错误会怎样，这就是<a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B">防御式编程</a>。</p><p>做系统设计时，要考虑敏感的业务逻辑如何测试，如何在系统层面规避错误。对于敏感的资源一定要再从统计的角度进行复查。像我那个退款的问题就是对潜在的风险意识不够，想当然地对接口进行了错误的假设，而对方这个接口不是幂等的。后来我们在系统中加了很多检查，确保及时代码有问题也能尽早发现问题。</p><p>如果系统对正确性要求高，必须加大量单元测试和集成测试，并且每修复一个 Bug 都引入对应的测试，因为随着代码的不断演进，没人能保证新加的代码不会破坏掉原来的代码。测试能最大程度自动化地帮我们发现一些潜在问题。</p><p>我工作的第一家公司是做 EDA 相关软件的，因为 EDA 软件不像互联网这样的系统，crash 了就是发生在客户的机器上，很多时候都没法 debug，因此公司对代码质量要求极高，他们在自动化测试这块就做得非常棒，测试覆盖率几乎 100%，还有很多 fuzzy testing。</p><p>代码上的问题没法完全避免，那如何减少风险？微软有个实践就是大量运用 killswitch，本质上就是开关，每个新加的功能和代码，建议都是加上类似这样一个嵌套：</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(!killswitch-active(uuid)) &#123;<br>   <span class="hljs-comment">// your new code ...</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-comment">// old code ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样的好处在于如果新的代码出现了问题，可以迅速把对应的 killswitch 打开，这样老的代码就继续跑了，也就是不用发新版本就能快速回滚。不得不说这个办法虽然有点土和笨，但是非常有用，因为这也救过我，而且让人发代码压力不至于那么大。坏处也很明显，当 killswitch 多了之后代码就很难读，所以要去定期清理那些老的开关。</p><p>工作经验丰富一些了之后 (掉入坑里足够多次)，自然会对容易出现问题的部分有风险意识，这需要不断积累和总结。</p><h3 id="工作习惯"><a href="#工作习惯" class="headerlink" title="工作习惯"></a>工作习惯</h3><p>安全是第一位的，我们在工作中对敏感信息、公司资产要有一定的安全意识。完全按照公司的安全准则来工作，否则提桶跑路可能是小事，被追究法律责任就麻烦了。</p><p>任何线上操作都是危险的，如非必要不要进行手动的线上操作。操作的时候尽量慢，然后想清楚如果错了如何恢复。比如删东西尽量软删除，把要删的东西移动目录或者设置状态。</p><p>如果一个动作是有危险的，应该思考如何把这动作自动化，如果是必须有人给输入，那需要一定的流程来进行 Review 和批准。</p><p>微软还有个好实践就是所有的线上命令，如果是写入型的命令默认不能运行，需要手动地运行命令提升权限。</p><p>运维方面，如果有条件和时间尽量往 <a href="https://docs.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code">Infrastructure as Code</a> 方向上靠，减少人工进行操作。</p><hr><p>写到最后，觉得写得不够系统和全面，这个题目范围太大，开发、运维、规范、安全等很多方面都涉及到，而且有很多细节问题。</p><p>一句话建议是：<strong>保持对工作的敬畏之心，特别是你的代码和工作会影响到很多用户时，即使一个小的错误也会造成大量损失</strong>。</p><p>先这样吧👻。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想到这个题目是因为最近我们组出现了一个严重的线上问题，某小哥在进行线上操作的时候传错了一个参数。这种问题在程序员这行很常见，所谓常在河边走，哪有不湿鞋。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220306101406.png&quot;
      
    
    </summary>
    
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="经验分享" scheme="http://catcoding.me/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Basecamp 的小而美</title>
    <link href="http://catcoding.me/p/weekly-3/"/>
    <id>http://catcoding.me/p/weekly-3/</id>
    <published>2022-03-02T22:45:08.000Z</published>
    <updated>2022-03-02T15:43:07.720Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式。</p><p><a href="https://catcoding.me/p/weekly-1/">#1 你可以创造运气</a></p><p><a href="https://catcoding.me/p/weekly-2/">#2 好的抽象和设计就像积木</a></p><p>这是第 3 期。</p><p><img src="/images/ob_pasted-image-20220302231721.png" alt=""></p><h2 id="Basecamp-的经验"><a href="#Basecamp-的经验" class="headerlink" title="Basecamp  的经验"></a>Basecamp  的经验</h2><p><a href="https://www.youtube.com/watch?v=wC14JM94BIs">10 Things I’ve Learned | Jason Fried at BIG Omaha - YouTube</a></p><p>Basecamp (37signals）为人所知主要是因为《重来》这些书籍，Ruby on Rails 的创造者 dhh 是这公司的主要布道者，而 Basecamp 的创始人就是 Jason Fried。</p><p>这是个独特的小公司，刻意地慢慢发展，在产品做少做精，每周工作 4 天，居然滋润地活了 23 年了，2014 年就创造了高达 300 万美金的年人均营收（同期 Google 为 123 万美金）。</p><p>在这个视频中 Jason Fried 谈到他做公司和产品的一些经验，这些很多内容和《重来》有些重复，不过这个演讲还是很值得看看，Jason Fried 的演讲能力非常出色。他主要分享了这么几点：</p><p><strong>Bootstrapping company</strong> : bootstrapping 是编译里的自启动，作为公司来说最好从一开始就考虑如何挣钱，如何养活自己，而拿投资意味着从一开始想着的就是如何花钱，拿投资是为了快速发展，公司太快有很多事情会想不清楚，而且后面会有被资本控制的风险。</p><p><strong>Price</strong> :  现在免费的东西太多了，不要总是免费，收费会让紧紧盯住自己的核心业务，而且收费后反而从用户那里获取到更有价值的反馈，因为用户付了钱，所以会在意。</p><p><strong>Innovation is overrated, useful is underrated</strong> ： 做产品不能总是追求时髦和创新，很多时候可用性才更重要。</p><p><strong>Focus on what won’t  change in your business</strong>  ：对于 Basecamp 来说，简单、快速、可靠这些是最重要的，这些也许并不新潮，但从长远来看这些才是能得到回报的。</p><p><strong>DIY</strong> ： 自己理解不够的岗位不要盲目招聘。如果想招人，先自己尝试做一段时间这个岗位，比如 dhh 兼职做了两年的系统管理员。只有自己做了才知道如何面试，以及如何衡量这个岗位的工作成果。</p><p><strong>Draw a line on the sand</strong> ：公司不能什么都做，要对很多事情说“不”。</p><p><strong>Sell something, listen to the customer what they care</strong>： 这里演讲中举了他自己卖球鞋的经历，非常贴切。永远关注用户的需求和用户的在意点，做产品不能自嗨。</p><p><strong>Do less thing, do something really good</strong> :  less is always the option, less feature, less people。一个产品有很多功能，但是每个功能都不出色，这会很难卖，而且工作量也会大。少做，但是做精。</p><p>同样的道理，公司并不是人越多越好，人少就会少很多管理工作。37signals 成立于 1999 年，到 2009 年即使用户规模扩大了很多倍，员工人数在 10 个左右。</p><hr><p>小而美的公司曾经是个热潮，国内也出现过类似做 Basecamp 这类产品的公司，只是发展到后来都逃不过被收购的命运，比如 Teambition 2018 年被阿里收购，Tower 2020 年被收购。</p><p>我认为用户付费意识是个方面，还有些其他复杂的原因。Basecamp 的经营理念在国内就不一定行，至少在 SaaS 这个领域国内的用户不那么信任小公司。</p><p>小而美的公司不止输出产品，更会输出不一样的理念和想法，比如两个人的公司 flomo，大家可以看看 <a href="https://help.flomoapp.com/about-us/about-us/company-concept.html">flomo 的经营理念</a>。这种独特的声音会吸引认同这种理念的用户。</p><h2 id="如何找到你真正想要的工作"><a href="#如何找到你真正想要的工作" class="headerlink" title="如何找到你真正想要的工作"></a>如何找到你真正想要的工作</h2><p><a href="https://world.hey.com/jason/how-to-land-the-job-you-really-want-dcf208ab">How to land the job you really want (hey.com)</a></p><p>还是 Jason Fried 的博客文章。Jason Fried 基本每周左右会写篇博客，而 dhh 基本每两天写一篇。Jason Fried 的博文相对好读很多，而 dhh 的文章涉及面很宽泛，有的读起来会难懂一些。</p><p>最近的这篇文章中介绍了 Basecamp  从 400 多个应聘者中招了一位 Email Marketing Manager 。这位应聘者特别用心，做了一个非常好、独特的求职信和简历 <a href="https://jobsapp.info/basecamp/">Meet your new Email Marketing Manager</a>。这封信和简历几乎让人无法拒绝这位候选人。</p><p>这真是个非常好的思路，好的工作通常竞争激烈，我们想要脱颖而出可以详细地说明对这个岗位的理解，对公司文化、产品的理解，以及自己已经为这个岗位做了哪些努力和成果。</p><p>求职信在国内很少见，一份用心写的求职信我觉得还是能加分不少的。</p><h2 id="Lisp-生产环境运用"><a href="#Lisp-生产环境运用" class="headerlink" title="Lisp 生产环境运用"></a>Lisp 生产环境运用</h2><p><a href="https://www.grammarly.com/blog/engineering/running-lisp-in-production/">Running Lisp in Production | Grammarly Engineering Blog</a></p><p>Grammarly 使用了很多种编程语言，比如 Java、Go、Erlang，在一个公司使用多种编程语言可能是一个技术债，最好使用语言无关的基础工具 (language-agnostic infrastructure tools)，比如 StatsD、Graylog2。</p><p>我倒是没看出来 Grammarly 的 core grammar engine 为什么非用 Lisp 。后面提到了 Lisp 提供了一些非常独特的开发和调试体验，用 SLIME 这样的工具可以在远程起一个 console 来进行任何代码上的操作，trace 可以很好的帮助调试。</p><p>这种体验在 Clojure 上开发也有，REPL (Read–Eval–Print Loop)  确实是那种很不同的编程体验，想了解更多可以看看这篇文章：<a href="https://vvvvalvalval.github.io/posts/what-makes-a-good-repl.html">Val on Programming: What makes a good REPL?</a></p><p>另外，我也才知道 Grammarly 是一个乌克兰公司。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://jvns.ca/blog/2022/02/20/things-that-used-to-be-hard-and-are-now-easy/">Things that used to be hard and are now easy</a> 这些事几年以前很难，现在已经变得很简单了。</p><p><a href="https://github.com/nusr/hacker-laws-zh">💻📖对开发人员有用的定律、理论、原则和模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-1/&quot;&gt;#1 你可以创造运气&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="weekly" scheme="http://catcoding.me/tags/weekly/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
</feed>
