<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2022-08-18T14:26:29.787Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为 Rust 做些小贡献</title>
    <link href="http://catcoding.me/p/contribute-to-rust/"/>
    <id>http://catcoding.me/p/contribute-to-rust/</id>
    <published>2022-08-18T22:22:10.000Z</published>
    <updated>2022-08-18T14:26:29.787Z</updated>
    
    <content type="html"><![CDATA[<p>有一段时间没有写文章了，最近沉迷于给 Rust Compiler 做些贡献，这里分享一下自己的收获和感受。</p><p>契机是那天 Rust Issue 到了 <a href="https://github.com/rust-lang/rust/issues/100000">10000</a>这个里程碑，我点进去看了看。想起去年花了一周业余时间做过一个去重复的 diagnostics PR，就顺便看了看些最近的一些 issue，我发现有一个看起来比较适合的 issue，就 assign 给了自己。</p><p>过了两天居然在 Teams 收到公司的同事的消息，他问我这个 issue 什么时候能解决，因为 raw-dylib 功能要稳定了，他还在等这个 issue。我平时工作基本不会被催，没想到随便接个开源 issue 会被催，哈哈。于是我很快发了 PR，另外看了看这个 <a href="https://github.com/rust-lang/rust/issues/58713">raw-dylib 功能</a>，这涉及到 Rust 链接 dll 相关的，Windows 上不少 Rust 问题依赖这个 RFC。</p><p>后面我接着做了几个 diagnostics 方面的 issue，这类问题是最适合 compiler 开发新手的，因为通常来说修复并不复杂。我在这个过程中基本看完了 Rust Parser 这部分的代码。</p><p>初学 Rust 一个很重要的技能就是理解 Rust 的报错信息，很多适合是编译器在提示我们写程序。编译器的报错信息特别重要，太少则说明不了问题，太详细则让人抓狂。Rust compiler 在报错这方面真的非常好，基本都是源自于开发者发现了更好的报错方式，自己加上去。</p><p>我在做的过程中，发现 Rust 编译器的提示很人性化，比如 Parser 发现你该写 <code>pub</code> 的地方写了个 <code>public</code> ，则会提示你是不是应该写 <code>pub</code>，比如你写了个 <code>import mod</code>，则会提示你是不是应该写 <code>use</code>，甚至发现不容易显示的 Unicode chars，则会提示这里要注意哦。关于生命周期的提示，有的还会加上各种好看的图线标识。</p><p>甚至，他们最近开始做 diagnostics 的语言本地化了<a href="https://github.com/rust-lang/rust/issues/100717">Diagnostic Translation · Issue #100717 </a></p><p>另外 Rust 的提示在类型推导后也可以加上更多有用信息，如果我们确定这里的提示就是唯一的修复方法，则可通过 rust-fix 自动修复，所以你能看到 Rust compiler 这个 repo 的单元测试里面有很多 .fix 后缀的对比文件。</p><p>我最近在修的<a href="https://github.com/rust-lang/rust/pull/100502">另外一个 Bug</a> 是来自 Tikv 项目发现的，当函数参数中有 <code>Arc::default()</code>的时候，从类型分析的结果看，这个参数可以满足多个其他参数，这样在分析缺少的参数给出合适的提示时就会有问题，那个算法导致死循环。我花了比较多时间写出最小化的测试用例，最后给出了一个修复。我还挺喜欢分析这类 Bug，像小说一般充满了悬疑。</p><p>在这段时间里，我也和一些公司里全职做 Rust 相关的同事聊了聊，发现微软已经有几个组在全职做了，主要集中在 Rust 和 Windows、开发工具相关方面。另外和社区里其他几个开发者沟通了一下，华为的也有一些。</p><p>Rust 纯粹是互联网上自由生长出来的一门语言，创始人早已经退出主导，主要的核心成员都是社区自由组成的，这里并没有一个绝对意义上的独裁者。我碰到的几乎都是在凭热情做贡献，比如最近一年很活跃的 <a href="https://github.com/compiler-errors">compiler-errors</a> 这个开发者，有一次我催他 review PR，他说我不是全职在做 Rust，所以时间需要自己安排，不要催。我接着和他聊了聊，他的日常工作和 Rust 完全无关，花这么多时间就是爱好而已。</p><p>这里足够开放，基本上你想参与到 Rust 开发中来，这个门槛是不高的。</p><p>我并不是鼓吹 Rust 有多好，Rust 自然还有很多问题，学习成本比较陡峭，而且也并不适合很多日常项目。如果从功利角度考虑，投入产出比不高。</p><p>我只觉得 Rust 很好玩，又足够开放，吸收了多年编程语言方面的理论，完全出自开源社区和一线开发者，一切讲究实用，所以又没有 OCaml、Hashkell 那种学究气，对编程语言感兴趣的朋友可以多关注一下。</p><p>为什么我能沉下去做一些看似繁琐的开源工作，这里有几个方面：</p><p>第一，我本身对编程语言的实现挺有兴趣的，几年前我基本看完了 EOPL 这本书，也做了很多里面的小解释器。可以说，编译这块算是程序员的一个小浪漫。带着问题看代码比较容易看进去，看完 Parser 这块之后，我打算再看看类型分析。</p><p>第二，Rust 这几年工具链有很大提高，比如 Rust compiler 这样的大项目，VSCode + Rust Analyzer 就能很好应对，几乎能做到所有的变量跳转，函数调用跳转和调用关系分析，类型提示等等。Rust 在这样的大型项目和多人维护的项目上能体现出优势，有编译器的和类型系统的帮助，查阅代码和写代码体验和效率都好很多，这与我日常工作中需要在一堆年代久远的 PowerShell 中翻来覆去好太多了。</p><p>第三，最近两年在日常工作中，我接触到了大量历史悠久的代码，这些代码其实很丑陋，但每年能为公司赚不少钱。我们常说提高编程技能需要向优秀的代码学习，但我发现被迫接触一些丑陋的历史代码对编程的心性大有裨益，因为今后你看很多代码都美得很，编程和调试时候的耐心好了很多。</p><p>感兴趣的可以交流交流🙌</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有一段时间没有写文章了，最近沉迷于给 Rust Compiler 做些贡献，这里分享一下自己的收获和感受。&lt;/p&gt;
&lt;p&gt;契机是那天 Rust Issue 到了 &lt;a href=&quot;https://github.com/rust-lang/rust/issues/100000
      
    
    </summary>
    
    
      <category term="Programming" scheme="http://catcoding.me/tags/Programming/"/>
    
      <category term="Rust" scheme="http://catcoding.me/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>让 Obsidian 朗读你的文字</title>
    <link href="http://catcoding.me/p/obsidian-speech/"/>
    <id>http://catcoding.me/p/obsidian-speech/</id>
    <published>2022-07-28T17:31:10.000Z</published>
    <updated>2022-08-18T14:26:29.791Z</updated>
    
    <content type="html"><![CDATA[<p>让写作更好的一个简单粗暴的办法是成为自己的读者，不断重读自己的文字，不断地去修改。</p><p>这不止是让文字变得更易读，也是一个和自己对话的过程，Paul Graham 在<a href="http://www.paulgraham.com/words.html">Putting Ideas into Words</a>中写道：</p><blockquote><p>The real test is reading what you’ve written. You have to pretend to be a neutral reader who knows nothing of what’s in your head, only what you wrote. When he reads what you wrote, does it seem correct? Does it seem complete? If you make an effort, you can read your writing as if you were a complete stranger, and when you do the news is usually bad. It takes me many cycles before I can get an essay past the stranger.</p></blockquote><p>我习惯使用微信读书的 AI 语音来听书，后来我发现微信读书还能订阅公众号，所以尝鲜用 AI 语音来朗读自己写的文章，感觉很神奇，像是请了一个旁人来朗读。</p><p>我们通常写了文章之后会自己在心里默读，但一个真实的声音读出来会更容易发现问题：</p><ul><li>You will find your voice.</li><li>You will find mistakes and unnecessary words and sentences.</li><li>You will make your writing easy for reading.</li></ul><p>所以，我前段时间写了个 Obsidian 插件来实现朗读功能，代码在这里<a href="https://github.com/chenyukang/obsidian-speech">obsidian-speech</a></p><p>写完之后我想提交到官方插件市场，这时才发现已经有人做了个同样功能的插件，然后就不想提交了。但我还是喜欢自己的实现，因为里面有些小优化。</p><p>优化一，在阅读的过程中自动判断出英文段落，因为用中文语音去朗读英文会显得不够协调。</p><p>优化二，高亮当前朗读的段落，这样就能快速定位。</p><p>但 Obsidian 浏览器里的 AI 语音质量明显没有微信读书里的自然，支持的语音种类也少，微信读书应该是做了不少优化。</p><p>这个小插件还有不少可以继续细化的地方，比如自动跳过内嵌的代码部分，如果你感兴趣一起来完善吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;让写作更好的一个简单粗暴的办法是成为自己的读者，不断重读自己的文字，不断地去修改。&lt;/p&gt;
&lt;p&gt;这不止是让文字变得更易读，也是一个和自己对话的过程，Paul Graham 在&lt;a href=&quot;http://www.paulgraham.com/words.html&quot;&gt;Pu
      
    
    </summary>
    
    
      <category term="开发" scheme="http://catcoding.me/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="obsidian" scheme="http://catcoding.me/tags/obsidian/"/>
    
      <category term="TypeScript" scheme="http://catcoding.me/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>第 21 期：维护自己的 dotfiles；Could Facebook move faster；你和你的研究</title>
    <link href="http://catcoding.me/p/weekly-21/"/>
    <id>http://catcoding.me/p/weekly-21/</id>
    <published>2022-07-23T23:34:10.000Z</published>
    <updated>2022-08-18T14:26:29.795Z</updated>
    
    <content type="html"><![CDATA[<p>这两天我开始练习双拼输入法，目前已经找到一些感觉。双拼只需要按键两次就能输入一个汉字，我认为这种设计明显更合理，熟练后应该会比全拼快的，另外节奏感会更好些。</p><p>换一个陌生的输入法之后，似乎有那种刚使用电脑的感觉，这大概也能锻炼一下脑子，希望顺便纠正一下我前后鼻音不分的问题。</p><p>刻意对习以为常的东西做些改变，过段时间就会有不同的体验。</p><h2 id="维护自己的-dotfiles"><a href="#维护自己的-dotfiles" class="headerlink" title="维护自己的 dotfiles"></a>维护自己的 dotfiles</h2><p><a href="https://www.owenyoung.com/blog/web3-to-dotfiles/">通过创建 dotfiles,  我终于拥有了一个 web3 身份</a></p><p>owen 的博客非常棒，可以说是静态博客的典范了。我从他这里借鉴了一些理念和想法，比如把自己的博客当作一个日常都会维护的数字花园，有个不错的主页，统计自己写了多少字等小细节。</p><p>他的博客里面有很多平时收集的内容，比如<a href="https://www.owenyoung.com/quotes/">收集发人深省的话</a>，比如 <a href="https://www.owenyoung.com/sources/">探索互联网上高质量的内容 - Owen 的博客</a>，值得去看看。</p><p>程序员为什么热衷于玩博客？其实博客虽然本质上是个简单站点，但可以玩的方式很多，又不受什么约束，比如 owen 写的<a href="https://www.owenyoung.com/blog/add-search/">给 Zola 博客增加搜索功能</a>，比如<a href="https://www.joshwcomeau.com/blog/how-i-built-my-blog/">How I Built my Blog using MDX, Next.js, and React</a>。</p><p>dotfiles 是 Linux/Unix 系统里的各种配置文件，这些加上密码可称之为个人赛博空间的根基。这篇文章里详细介绍了如何长期维护这些配置，目的是减少重复工作，并保持轻量，可重现，可持续化。</p><p>虽然我之前在 Github 上看到过这类项目，但自己一直没花时间去整理自己的 dotfiles，回想起来我的 Github 账号的 ssh key 都有 20 来个了，所以看到这篇文章之后，我就开始着手干了起来。</p><p><a href="https://github.com/comtrya/comtrya">comtrya/comtrya</a>这个 Rust 写的小工具并不是非常成熟，因为还在快速开发中，其文档和实际有些出入。我在使用的过程中踩了一些坑，看源代码才解决。所以如果你也想撸起袖子干起来，选择<a href="https://www.chezmoi.io/">chezmoi</a>会更省事。</p><p>另外一个体会是，很多东西要做到自动化，首先要对重复劳动敏感，得找出规律，然后就是<strong>约定优于配置</strong>(<strong>convention over configuration</strong>)，用程序去做重复的事，而留出配置应对改变。</p><h2 id="Could-Facebook-move-faster"><a href="#Could-Facebook-move-faster" class="headerlink" title="Could Facebook move faster ?"></a>Could Facebook move faster ?</h2><p><a href="https://twitter.com/TechEmails/status/1550168842378170368">Mark Zuckerberg: Could Facebook move faster? March 30, 2012</a></p><p>Internal Tech Emails 这个推特账号经常爆料些科技公司的内部邮件。</p><p>前两天看到这个邮件，Zuckerberg 2012 年在北京待了一段时间。期间和人人网创始人和李彦宏进行了友好学习，然后他发邮件给公司几个高管，写道 Facebook 能否能像这些中国公司一样，更快地推进。</p><p><img src="/images/ob_2022-07-22-170945.png" alt=""></p><p>从邮件内容上看，Zuckerberg 对人人网所展示的一些在研发的产品表示艳羡，并能看出来他们在抄 Pinterest，在抄 Tumblr，对比之下 Facebook 简直太慢了。”<strong>Move Fast and Break Things</strong>“ 是 Facebook 所倡导的理念，但我想中国人显得更快因为我们加班更猛。</p><p>最后写道，他们确实是从其他人那里克隆想法，但是我们围绕信息、照片做的这些产品确实也没什么非常多原创想法。</p><p><img src="/images/ob_2022-07-22-171315.png" alt=""></p><p>这个推里面还有几个管理者的回复，有的比较长，主要是在思考如何做到 copying vs. innovating 的平衡。</p><p>也有人积极响应，Let’s ‘copy’ (aka super-set) Pinterest!  🤣</p><p>彼时，正是移动互联网爆发前夕，Zuckerberg 也注意到了刚上线没多久的微信，幸好他没有学到人人网和百度的精髓，不然 Facebook 可能也会泯然于众。</p><p>2011 年人人网始于校内网，也是从克隆 Facebook 开始的。我原来在学校那会儿，印象很深刻的是他们在食堂旁边摆了个摊子，注册一个账号送一个鸡腿，真鸡腿！我就是为了鸡腿去注册了个账号。</p><p>2010 年前确实好多人用校内网，2009 人人网宣布注册用户量超过 1 亿，而当年的中国网民总数量只有 3.8 亿，可以说人人网是当年最大的社交网络平台。</p><p>2011 年 5 月人人网在纽交所上市，甚至早于 Facebook，但这其实已经是公司的顶点了。人人网确实什么火做什么，却没赶上移动互联网的大船。后来更是做互联网金融、区块链，可能真是由于其浮躁最终把自己的基本盘给搞没了，<a href="https://www.huxiu.com/article/271949.html">人人网为什么没能成为中国的 Facebook?</a></p><p>公司和人一样，大抵就是创始人的化身。什么热追什么，可能是不明白自己到底想要什么，也不明白自己擅长什么。</p><p>十年光景，恍若隔世。十年对于迅速发展的互联网行业确实已经太长了，其实很多事情我们都无法预测。</p><h2 id="你和你的研究"><a href="#你和你的研究" class="headerlink" title="你和你的研究"></a>你和你的研究</h2><p><a href="https://www.cs.virginia.edu/~robins/YouAndYourResearch.html">You and Your Research</a></p><p><a href="https://www.ruanyifeng.com/blog/2016/04/you-and-your-research.html">理查德·汉明《你和你的研究》 - 阮一峰的精简版本</a></p><p>这篇文章我也是在《纳瓦尔宝典》长长的推荐列表里看到的，他说这不是专门为做学术的读者写的，适合所有想做成大事的人。</p><p>理查德 · 卫斯理 · 汉明（Richard Wesley Hamming）是美国数学家，图灵奖得主，其贡献了汉明码、汉明距离和汉明谱窗以及数值方法。关于这个主题他谈论过很多次，之前也为研究生开设过一门名 The Art of Doing Science and Engineering: Learning to Learn 的课程。互联网上也有一个相关的视频：<a href="https://www.youtube.com/watch?v=a1zDuOPkMSw">Hamming, “You and Your Research” June 6, 1995</a>。</p><p><img src="/images/ob_2022-07-22-182038.png" alt=""></p><p><a href="https://www.notion.so/6bbb616bba2b45649f46e30e6ac8c493">你和你的研究</a>这个翻译加评注版本非常好，值得好好品读，这里很多内容都值得任何想做创造性工作的人思考：</p><blockquote><p>Knowledge and ability are much like compound interest – the more you do the more you can do, and the more the opportunities are open for you.</p></blockquote><p>做出卓越的研究也需要情感上的倾入：</p><blockquote><p>Deep emotional commitment seems to be necessary for success. The reason is obvious. The emotional commitment keeps you thinking about the problem morning, noon and night, and that tends to beat out mere ability.</p></blockquote><p>这段让我想到张益唐，他对物质生活追求极低，很长时间都靠朋友接济，在朋友家打地铺，一边在 Subway 打工，一边却思考着最深入的数学难题，最终大器晚成做出惊人成果，<a href="https://www.youtube.com/watch?v=3YyxCF3rmaA">Yitang Zhang Counting from Infinity</a>。张益唐的故事如果拍成电影应该比 Nash 的还精彩。</p><p>作为一个平凡人，我羡慕那些能为人类智力边界做出拓展的人，即使是历史的注脚，也意味着在历史长河中留下了点痕迹。</p><p>但确实，学术界大部分人也是为了谋求一份生计。我曾在学校见过几个博士，他们吃了午饭后总是会去买彩票，我想经过科学训练的人应该会明白概率这回事，为什么要去买彩票，于是我就问他们，其中一个回答：虽然中奖概率极低，但是总能有个小盼头。</p><p>如今，就业越来越难，更多的人本科毕业就去读研了，读研之后还可能去读博，而很多人其实不适合做研究的，最近我看到这篇很不错的文章，<a href="https://zhuanlan.zhihu.com/p/542319901">清华姚班教授劝退文：我见过太多 PhD，精神崩溃、心态失衡、身体垮掉、一事无成</a>，读博之前认真思考一下吧。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://www.theblock.co/post/156038/how-a-fake-job-offer-took-down-the-worlds-most-popular-crypto-game">How a fake job offer took down the world’s most popular crypto game</a> </p><p><a href="https://roninblockchain.substack.com/p/back-to-building-ronin-security-breach">Back to Building: Ronin Security Breach Postmortem</a></p><p>社会工程学是终极入侵，这个剧情很精彩！北韩的黑客组织虚构了不存在的公司，通过 Linkedin 和 WhatsApp 勾搭了 Axie 的高级工程师，然后安排面试并且开出待遇优厚的 Offer。但是！发送的 PDF Offer 文件有病毒，于是成功拿下 9 个验证节点中的 4 个，然后发现某个 RPC 节点的漏洞，这样就成功侵入 Axie 系统，盗走 5.4 亿美元的数字资产。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-07-22-184823.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天我开始练习双拼输入法，目前已经找到一些感觉。双拼只需要按键两次就能输入一个汉字，我认为这种设计明显更合理，熟练后应该会比全拼快的，另外节奏感会更好些。&lt;/p&gt;
&lt;p&gt;换一个陌生的输入法之后，似乎有那种刚使用电脑的感觉，这大概也能锻炼一下脑子，希望顺便纠正一下我前后鼻音
      
    
    </summary>
    
    
      <category term="周刊、写作、程序员" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A%E3%80%81%E5%86%99%E4%BD%9C%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>第 20 期：Side Project 指南；打造私人搜索引擎；Ev 不再担任 Medium CEO</title>
    <link href="http://catcoding.me/p/weekly-20/"/>
    <id>http://catcoding.me/p/weekly-20/</id>
    <published>2022-07-17T14:16:10.000Z</published>
    <updated>2022-08-18T14:26:29.795Z</updated>
    
    <content type="html"><![CDATA[<p>最近我意识到周刊越写越长，往好处想说明自己乐在其中，我把介绍的东西当成写作的入口，以自己的经验和感受去发散和关联其他内容。</p><p>但是坏的方面可能是我在自嗨，文章长不一定好，太长了可能会让读者阅读压力大。所以，我打算控制一下长度，也节省读者的时间。</p><h2 id="Side-Project-指南"><a href="#Side-Project-指南" class="headerlink" title="Side Project 指南"></a>Side Project 指南</h2><p><a href="https://sideproject.guide/">Side Project 指南</a></p><p>不少程序员都有着做 Side Project 的激情，有的甚至踹怀着做出项目来养活自己的小梦想。而现实却很残酷，能靠业余项目达到一定收入的少之又少。</p><p>即使如此，我仍然认为做 Side Project 是程序员保持活力和创造力的好办法，程序员最理想的状态就是创造者，用编程构造一个小工具、小产品和小世界。</p><p>有的 Side Project 只是用来学习，这也没问题，我就实现过很多小的项目来纯学习，精通各种语言、各种姿势的 Hello World 🤣。</p><p>但我最近几年体会到光学习用处不大，计算机这行现在有太多的细化领域，囫囵吞枣地去不断学习是没有尽头的。更聚焦、更可能出成果的实践是找些问题、需求和方向，试着用技术思维去解决，或者是为了创作一个作品去学习相关技术，也就是结果导向、按需学习。</p><p>上周刚好看到这个尤雨溪的采访文章，<a href="https://blog.csdn.net/liurendonews/article/details/123415099">尤雨溪的作品和作品意识</a>一直是他人生的杠杆，为他创造机会，放大效益。</p><p><img src="/images/ob_2022-07-17-143048.png" alt=""></p><p>作者  <a href="https://blog.t9t.io/">timqian</a> 是一个独立开发者，他写过文章记录 <a href="https://blog.t9t.io/t9t-year1-2020-05-18/">一年独立开发经历</a>。这个小指南写得很好，覆盖了如何评估你的点子、如何快速实现、如何获取用户、如何收费这几个方面。</p><p>如果你抱着验证想法的初衷做 Side Project，最好以最小的代价来做尝试：</p><blockquote><ol><li>不写代码 </li><li>只写前端代码（包括 DAPP）</li><li>如果必须有后端服务，使用可以 Serverless 方式部署的写法</li><li>维护一个服务器<br>简而言之，对于开发来讲，优化的目标应当是让自己当前和未来的劳动越少越好。如果一定要写代码来解决，使用你最熟悉的工具。</li></ol></blockquote><h2 id="打造私人搜索引擎"><a href="#打造私人搜索引擎" class="headerlink" title="打造私人搜索引擎"></a>打造私人搜索引擎</h2><p><a href="https://thesephist.com/posts/monocle/">Building Monocle, a universal personal search engine for life</a></p><p><a href="https://thesephist.com/posts/browser/">The web browser as a tool of thought</a></p><p>Linus 是个独立开发者，从自我介绍上看主要对知识管理、效率、语言和书写工具这些方面特别有兴趣，他做了 100 来个各式各样的<a href="https://thesephist.com/projects/">开源项目</a>。他的头像看起来是一个中国人，我仔细看了简历发现是个韩国人。</p><p>我对这些工具也非常感兴趣，类比起来就像是我上学的时候对钢笔的兴趣，统称为工具痴迷吧。</p><p>我之前也提到过<sub>(可能是”孕妇效应“)</sub>，东方人对于这类工具类产品显得更痴迷些，比如 Markdown 编辑器大多是东方人做得好，Notion、logseq、Obsidian 都是华人做出来的，我前段时间发现还有个  <a href="https://wiki.dendron.so/">Dendron</a> (类似 foam) 的 VS Code 插件也是个华人发起的。</p><p>回到这两篇文章，Linus 介绍了他做的一个原型，把自己的很多数据 (blog, notes, Twitter, contact) 汇集放到一个数据源里，自制搜索引擎来检索。这是一个专属于自己赛博空间的搜索器，使用了一段时间之后，他认为体验非常好，任何自己曾经写过的东西都非常容易找到。</p><p>你可以去看看他做的这个原型，看起来还是挺有趣的。</p><p>第二篇文章做了一些拓展思考。我们现在通常会切换于各个 App 之间，虽然能在一定程度上做一些数据同步，但是<strong>no single app can be my second brain</strong>。</p><p>笔记软件帮我们能快速回忆，但更重要的是产生新的想法：</p><blockquote><p>We can take down information into apps like Roam Research or Notion and recall them easily later, but it’s an overstatement to call them tools for <em>thought</em>. Recollection is such a small, basic part of thinking! There is so much more to thinking than simply remembering something accurately. I think we can acknowledge the benefits these apps bring while also admitting that better tools for thought should help us do more with ideas than just remember and recall.</p></blockquote><p>他认为浏览器可以当作思维工具：</p><blockquote><p>The vision of the web browser that excites me the most is one where the browser is a medium for creativity, learning, and thinking deeply that spans personal and public spheres of knowledge.</p></blockquote><p>我觉得第二篇文章有些想法不错，Linus 的个人博客上还有很多好文章，值得阅读。 </p><p>但我还是认为浏览器主要是信息接收窗户，我的信息汇总的地方在 Obsidian，同时也是一个我处理信息和写作的地方。</p><p>我之前介绍过，自从用了网页标注工具 <a href="https://hypothes.is">hypothes.is</a>，像是打开了另一扇门，国内的产品 <a href="https://cubox.pro/">Cubox 个人碎片知识库</a> 是有些类似的。这周我发现还有个最近开源的实现 <a href="https://github.com/betterRunner/context-note">betterRunner/context-note</a>。</p><h2 id="Ev-Williams-不再担任-Medium-CEO"><a href="#Ev-Williams-不再担任-Medium-CEO" class="headerlink" title="Ev Williams 不再担任 Medium CEO"></a>Ev Williams 不再担任 Medium CEO</h2><p><a href="https://www.platformer.news/p/ev-williams-gives-up">Ev Williams gives up - by Casey Newton</a></p><p><a href="https://ev.medium.com/new-decade-new-ideas-faee8e712589">New Decade, New Ideas</a></p><p>Ev Williams  是美国科技创业者，很少有人像他这样深刻地影响了在线社交和媒体。他 1999 年联合创办的 Blogger 网站迎来了博客时代，Blogger 后来卖给了 Google；2006 年他联合创办了 Twitter，并于 2008 年成为 Twitter CEO；2012 年创立 Medium，一直到上周卸任。</p><p>2012 年，Ev Williams 认为互联网上分享信息已经非常方便，人们习惯了通过 Twitter 这样的短文来分享，但因为 Ads 这类盈利模式，互联网上的大多数内容都是低质量的，吸引眼球的内容。</p><p>我们需要一个专注于阅读体验和高质量的内容平台，所以 Medium 既有“媒介”之意，又意味“中等”长度的内容。</p><blockquote><p>“Now that we’ve made sharing information virtually effortless, how do we increase <em>depth of understanding</em>, while also creating a level playing field that encourages ideas that come from anywhere?”</p><p>“A beautiful space for reading and writing — and little else,  The words are central.”</p></blockquote><p>这十年间，Medium 发展并不是完全不好，事实上在创建后的前几年里 Medium 确实为互联网的一股清流，在沉浸式“读”和“写”方面做到了极致，上面的大多数文章质量高，甚至也吸引了一大批社会名流在上面写作，Obama 至今仍在上面发布内容。</p><p>Medium 从一开始就是 Ev Williams 理想化的产物，他不断地在上面实验各种想法。甚至在 2016 年 Medium 高速发展的那段时间，Ev Williams 仍然会反思公司的走向是否违背了初衷，广告模式即使在商业上做到成功，但这正是他所厌恶的东西。所以 Medium 完全放弃掉了广告的盈利模式，并且裁员 1/3。</p><blockquote><p>We believe people who write and share ideas should be rewarded on their ability to enlighten and inform, not simply their ability to attract a few seconds of attention.</p></blockquote><p>Medium 走的是内容付费模式，用户可以选择支付 5 美元的月费，即可浏览全站的内容，这些费用则将根据算法分摊交至创作者手中，形成「消费-生产」闭环。很多人对这种收费模式嗤之以鼻，可以说 Medium 走了一条更艰难的路。</p><p>这篇文章提到，Medium 2021 年将近有 700,000 的付费用户，每个月付 5 美金。但是内部数据显示，并不是高质量的内容带来了用户，而是被 Google、Facebook 的算法推荐了的爆款文章带来了付费用户，通过流量来赚钱不是 Medium 所期望的。</p><p>我倒认为增量用户通过搜索引擎来并没什么问题，问题是如何保留住作者和付费用户。这些年 Medium 一直都在变化，为了刺激作者用了很多办法：</p><ul><li>根据付费用户阅读时间累计付费给创作者</li><li>雇佣自己的编辑创造内容 </li><li>让大的 Publisher 自定义域名 </li><li>每月给靠前的创作者发额外的奖金</li><li>……..</li></ul><p>我之前也分享过，2020 年我开始在 Medium 上面<a href="https://catcoding.me/p/my-writing-story-on-medium/">锻炼英文写作</a>，收获不少，所以我对 Medium 有些感情的。但我看到越来越多的作者不再在上面发布文章了，<a href="https://tomkuegler.medium.com/why-ive-stopped-writing-on-medium-52cbf4c0db44">Why I’ve Stopped Writing On Medium</a>。</p><p>随着近两年短视频和 Newsletter 的兴起，Medium 显然进入了瓶颈期。我的感受是，这里面有些难以做到兼顾的地方。</p><p>Medium 注重内容质量，所以平台的算法倾向于大的专栏，导致个人作者很难建立起自己稳定的读者群，followers 多对于阅读量帮助也不大。我们要想让自己的文章有更多的流量，就得通过大专栏去分发，所以写完之后得给专栏投稿。这会让那些想要长期写下去的作者产生抗拒和不安全感，他们希望有稳定的读者，因此不少人去了 Substack 或者自己收集读者邮件创建 Newsletter。</p><p>另一个原因是，互联网发展到今天，愿意为内容付费的终究是少数，大部分人已经把自己的信息源交给了推荐算法，这是没法改变的大趋势。</p><p>这几年就像是一个节点，互联网上高质量的中长文内容会进一步萎缩，<a href="https://www.zhihu.com/question/49684783">中文互联网这个现象更为严重</a>。Medium 当年的国内克隆产品，比如十五言根本没起来，简书现在也基本沉没了，知乎这个专注于高质量回答内容的社区同样需要沙里淘金。</p><p>在中文互联网中，微信生态瓜分去了一大波流量，但公众号的改版却也是朝着流量广告、推荐算法的方向去了，最终把内容农场的事再在移动端重演了一次。</p><p>为什么 Newsletter 会兴起，<strong>显然读者和创作者都不想被平台和算法主导</strong>。Substack 虽然是个平台，但只要 Email 列表可以导出，创作者随时都可以带着读者离开这个平台，这是和公众号的区别，另一个区别是 Substack 没有推荐算法。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-07-17-134058.png" alt="来源 Programmer&#39;s Joke channel"><span class="image-caption">来源 Programmer&#39;s Joke channel</span></p><hr><p>这期看起来又不短，先这样吧！</p><p>我的这个周刊终于写到了第 20 期，在接近半年的时间里，一共有接近 2500 位公众号读者，也有些人通过 RSS 订阅我的博客。</p><p>这个量级当然不值一提，但我还比较满意这个里程碑，因为都是自然增长带来了各位读者。感谢大家的一路陪伴！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近我意识到周刊越写越长，往好处想说明自己乐在其中，我把介绍的东西当成写作的入口，以自己的经验和感受去发散和关联其他内容。&lt;/p&gt;
&lt;p&gt;但是坏的方面可能是我在自嗨，文章长不一定好，太长了可能会让读者阅读压力大。所以，我打算控制一下长度，也节省读者的时间。&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="写作、程序员、周刊" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98%E3%80%81%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>第 19 期，写出更好的文章；Telegram 创始人的建议；我们应该教孩子什么</title>
    <link href="http://catcoding.me/p/weekly-19/"/>
    <id>http://catcoding.me/p/weekly-19/</id>
    <published>2022-07-09T23:03:10.000Z</published>
    <updated>2022-08-18T14:26:29.795Z</updated>
    
    <content type="html"><![CDATA[<p>《纳瓦尔宝典》书后有很多参考资料和链接，我选了一些书和链接继续看。</p><p>进而我想到参考链接对读者帮助很大，因为这像是作品的源头，所以我也给自己的博客加了个 <a href="https://catcoding.me/links/">links</a> 页面，打算放一些自己喜欢的博客、文章、书籍、工具等等，以后不定期更新。</p><h2 id="写出更好的文章"><a href="#写出更好的文章" class="headerlink" title="写出更好的文章"></a>写出更好的文章</h2><p><a href="https://dilbertblog.typepad.com/the_dilbert_blog/2007/06/the_day_you_bec.html">The Dilbert Blog: The Day You Became A Better Writer</a></p><p>这篇就是纳瓦尔提到的一篇文章，教人如何写出更好的文章。当然，这里指我们日常分享、沟通交流的这类文章，比如博文。</p><p>这篇文章如此之短，我可以把它全放在这里，内嵌我的理解：</p><blockquote><p>I went from being a bad writer to a good writer after taking a one-day course in “business writing.” I couldn’t believe how simple it was. I’ll tell you the main tricks here so you don’t have to waste a day in class.</p><p><strong>Business writing is about clarity and persuasion. The main technique is keeping things simple. Simple writing is persuasive.</strong> A good argument in five sentences will sway more people than a brilliant argument in a hundred sentences. Don’t fight it.</p></blockquote><p>注重清晰度和说服力，保持简单。简单的写作是有说服力的，一个五句话的好论点会比一百句话的精彩论点更能打动人。为什么格言、箴言这类文字容易让人接受，与简洁、直白也有些关系。</p><blockquote><p><strong>Simple means getting rid of extra words</strong>. Don’t write, “He was very happy” when you can write “He was happy.” You think the word “very” adds something. It doesn’t. Prune your sentences.</p></blockquote><p>这个例子我认为更适用英语写作，当你写完之后请扫视一下其中的 very，大部分都是多余的，Grammarly 这类工具会帮你检测出这类词。中文中表示程度的修饰词非常多，“很”，”非常“，”异常”，“极其”，有时候这个程度的修饰是需要的，但清理不必要的副词和形容词，这点中英文通用。</p><blockquote><p>Humor writing is a lot like business writing. It needs to be simple. The main difference is in the choice of words. For humor, don’t say “drink” when you can say “swill.”</p></blockquote><p>为了让文章生动有趣，当你可以写成”痛饮“的时候，就不要用 “喝”，这样更形象。</p><blockquote><p>Your first sentence needs to grab the reader. Go back and read my first sentence to this post. I rewrote it a dozen times. It makes you curious. That’s the key.</p></blockquote><p>文章的第一句话很重要，要抓住读者的兴趣和注意力，你看这篇文章的开头就写得很棒，作者修改了好几次才写成这样。读者会好奇，哇，什么神奇操作能让我这么短时间内提高写作，继而会读下去。</p><blockquote><p><strong>Write short sentences</strong>. Avoid putting multiple thoughts in one sentence. Readers aren’t as smart as you’d think.  </p></blockquote><p>  写短句，这样能让更多读者更容易理解。如果你看我的文章觉得容易读懂，这也是因为我在用短句的这个技巧。</p><blockquote><p>Learn how brains organize ideas. Readers comprehend “the boy hit the ball” quicker than “the ball was hit by the boy.” Both sentences mean the same, but it’s easier to imagine the object (the boy) before the action (the hitting). All brains work that way. (Notice I didn’t say, “That is the way all brains work”?)</p></blockquote><p>不要用被动，主语在前通常更容易理解。</p><p>这点在英文写作中是特别犯的错误  =&gt; 新手在英文写作中容易犯这个错误。</p><p>看我上面这句，左边是我初稿写的，右边是我改的，看来中文写作中用这个方法也会让文章更清晰，对吧？</p><blockquote><p>That’s it. You just learned 80% of the rules of good writing. You’re welcome.</p></blockquote><hr><p>这篇文章确实简单易懂，如果你平时也写东西，可以实践一下看看效果。我最近半年看过 6、7 本关于写作的书，大概是这些：</p><p><img src="/images/ob_2022-07-08-101200.png" alt=""></p><p>我之前从未看过这类书，这次看完后有不少收获，因为自己实践过后再看自然会理解更深刻，我的博客已经写了 20 多万字：</p><p>所有文章：215 篇，总共写了：211437</p><p>原来 20 万字都这么难写出来！这也印证了那个关于”数量“的理论：</p><blockquote><p>所有的我们以为的质量问题，大多本质是数量问题。因为数量不够，差几个数量级而已。</p><p>数量就是最重要的质量。大部分质量问题，在微观上看，就是某个地方的数量不够。</p><p>最大的误区是，明明是数量不够的问题，因为错误地以为瓶颈在于质量，幻想在不增加数量的前提下，用某种奇技淫巧，偷工减料达到目的。这时候玄学，迷信和各种无病呻吟就出现了。数量不够，底子不够厚时，很多事情时做不到的。即使有时看似有捷径，欠的账迟早是要还的。</p></blockquote><p>另外，我这周发现 Obsidian 的这个插件 <a href="https://github.com/zhaohongxuan/obsidian-weread-plugin">obsidian-weread-plugin</a>，登录后可以把微信阅读上的笔记和标注同步到 Obsidian，非常方便！</p><h2 id="Telegram-创始人的建议"><a href="#Telegram-创始人的建议" class="headerlink" title="Telegram 创始人的建议"></a>Telegram 创始人的建议</h2><p><a href="https://t.me/durov/137">As I’m turning 36, some people ask how I manage to look younger than my age.</a></p><p><a href="https://tlgrm.eu/channels/@Durov/171">As I am turning 37, I put together a list of 3 undervalued and 7 overvalued things in life</a></p><p>Telegram 和 VK 的联合创始人 Pavel Durov 就像是现实版的黑客帝国男主角，他也是经常一身黑衣。</p><p><img src="/images/ob_2022-07-08-104726.png" alt=""></p><p>这看起来不像是 37 岁的男人，对吧？这两年生日的时候，Pavel  Durov 都会在自己的 Telegram 频道上发文章分享自己的心得。第一篇分享了如何让保持保养身体，一共有 7 条，你可以点进去看看，总结起来一句话就是：</p><p><strong>避免酒精、多睡、不要吃得过饱、锻炼、限制压力、不要吃肉、独自生活。</strong></p><p>“避免酒精”这点在开头和结尾都着重强调，不喝酒这对于俄罗斯人来说确实不容易。“不要吃得过饱”这点我深表赞同，我已经实践了快一个月了，晚上少吃或者不吃让我精神更好，这难道就是传说中的 Stay Hungry 😁。</p><p>“独自生活”这点看来我没法实践了，不过现在的年轻人似乎看透了这点，能不结婚就不结、能不生孩就不生，他们这种做法确实很养生。</p><p>第二篇是一些人生建议，他认为社交网络是有害的。社交媒体上源源不断的垃圾信息充斥着我们的大脑，降低了我们的幸福感和创造力。考虑到他也是一个社交网络的缔造者，不得不说这有点讽刺。</p><p><a href="https://tech.ifeng.com/a/20151006/41485655_0.shtml">Telegram 传奇：一个关于俄罗斯富豪、黑客、极权和阴谋的创业故事</a> 这篇文章值得一读，描述了 Pavel  和他哥哥因为不配合审查，被俄罗斯赶出自己创建的社交网络 vk：</p><blockquote><p>Pavel Durov 并没屈服。普京对他的要求很简单，要么听话，要么把所持有的 VK 股份，卖给普京亲信所掌握的基金或者其他关联公司。Pavel 仍然拒绝出售股份，只是这一次，他回旋的余地越来越小了，在前面几年中，普京亲信的基金们一直在从 VK 其他股东手里收购股份。董事会里面 Durov 兄弟终于成了孤家寡人，最后被迫卖出股份，放弃了他创造的一切。</p></blockquote><p>看起来俄罗斯政府确实算是相对文明了，至少是花了钱。</p><blockquote><p>在被查水表的那些年里面，Pavel 已经开始逐渐实施他理想的生活模式，其中最重要的一点是放弃所有固定资产。他卖掉房子、家具、车…到他卖出 VK 股份的时候，他已经不再持有任何固定的资产了，只有大量的钱。差不多也是在这段时间里面，他和哥哥 Nikolai 完成了 Telegram 最早期的工作。</p></blockquote><p>正因为 Pavel 被俄罗斯政府监听搞怕了，Telegram 非常注重用户的隐私安全。当年 Facebook 宣布收购即时通讯软件 Whatsapp，在之后的 5 天里面 Telegram 增加 800 万用户。最近两年，疫情之后 Telegram 用户激增，现在全世界月活已经达到了 6 亿。</p><p>我虽然注册 Telegram 很早，但最近才成为我日常都会使用的工具。我发现除了用来沟通，上面也有一些不错的内容，比如频道这东西，有点类似于群，但又没有群那么聒噪。如果你有些有趣的 Telegram 资源，请推荐给我。</p><h2 id="我们应该教孩子什么"><a href="#我们应该教孩子什么" class="headerlink" title="我们应该教孩子什么"></a>我们应该教孩子什么</h2><p><a href="https://www.wired.co.uk/article/yuval-noah-harari-extract-21-lessons-for-the-21st-century">Yuval Noah Harari on what 2050 has in store for humankind</a></p><p><img src="/images/ob_2022-07-08-172548.png" alt="图片来源 WIRED"><span class="image-caption">图片来源 WIRED</span></p><p>这篇文章写得稍微有些正式，所需要地词汇量相对大些，但我认为写得非常好，内容也比较深入。如果你想锻炼一下自己的英文阅读，可以试着去读读。</p><p>现在出生的小孩们，参加工作的时候大概是 2050 年，他们甚至很可能会活到 2200 年。我们该教小孩什么，才能让他们更好地应对越来越快的变化？</p><p>过去很长时间里，我们在教学中通常会不断地给小孩灌输信息，因为信息是有价值而匮乏的。而如今信息唾手可得，并且多到让人无法消化，我们应该教的是让小孩理解信息，最重要的是把大量信息融合成一个广阔的世界图景。</p><blockquote><p>Instead, people need the ability to make sense of information, to tell the difference between what is important and what is unimportant, and above all to combine many bits of information into a broad picture of the world.</p></blockquote><p>我们的教学也是倾向于传授具体的技能，比如我初中的时候，老师教计算机老师让我们背词根，这是为了练习打字。同样，我们现在教小孩的技艺，在未来几十年是否也会同样用处不大？</p><p>文中写道，为了应对变化，我们应该塑造的是通用能力：批判性思维、沟通、协作、创造力。</p><blockquote><p>So what should we be teaching? Many pedagogical experts argue that schools should switch to teaching “the four Cs” – <strong>critical thinking, communication, collaboration and creativity.</strong> More broadly, schools should downplay technical skills and emphasise general-purpose life skills. Most important of all will be the ability to deal with change, to learn new things and to preserve your mental balance in unfamiliar situations. In order to keep up with the world of 2050, you will need not merely to invent new ideas and products – you will above all need to reinvent yourself again and again.</p></blockquote><p>同样，对于我们自己，在这个不断变化的世界中要做到不断地进化自己，虽然对成年人来说更困难一些：</p><blockquote><p>To survive and flourish in such a world, you will need a lot of mental flexibility and great reserves of emotional balance. You will have to repeatedly let go of some of what you know best, and feel at home with the unknown.</p></blockquote><p>这让我想到了智力复利的概念 <a href="https://threadreaderapp.com/thread/940411657842434048">intellectual compounding</a>，大部分人在一定年龄之后 (通常是毕业后工作几年)，就停止了能力和智力方面的增长。人就像是计算机一样，要保持更新 Growth mindset 和 Motivation mindset 非常重要。</p><p>之前听到过这么一句话：当一个老年人对你说什么事是可以做的，他说的大多是对的，而当他对你说什么事是做不到的，他说的很可能是错的。</p><p>这话有点拗口，不过值得琢磨。在过去，跟随年长者的建议是一个相对安全的选择，因为他们非常了解这个世界，世界也变化得很慢。但现在不同了，由于变化的速度越来越快，你无法确定他们告诉你的是永恒的智慧还是过时的偏见。</p><p>前段时间有件小事，让我感受到不同时代的人之间的鸿沟。一个老奶奶卖自己种的菜，结账的时候她和我说只能收现金，我已经没有身上带现金的习惯了。而后，我拉着女儿的手，想到在她的观念里，手机和二维码是出生时就存在的。</p><p>关于时代大变迁下人的命运和感受，我印象比较深刻的是贾樟柯的一系列电影，比如《小武》、《站台》、《山河故人》等。</p><p>在《山河故人》中，发了财的张晋生带儿子移民澳洲，平时交流一个用中文一个用英文，吵架需要用翻译软件。儿子说我不知道要做什么，什么都没兴趣，他爸说你给老子先把中文学好。</p><p>这些场景看起来让人悲伤和无奈。终有一天，我们也可能被时代抛弃，生活在边缘，并且我们也无法完全理解下一代。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd">A complete overview of SSL/TLS and its cryptographic system</a>，关于 SSl/TLS 和加密方面非常详细的解释。</p><p><a href="https://www.cliveshd.com/">Clive SHD｜Sailing in Web3</a>, 思维模型、生产力工具、web3 等相关的话题。如果你像我一样观望着 web3，应该会很喜欢他的 web3 周刊。</p><p><a href="https://m.weibo.cn/status/4788211404768630">安全这事，当一个公司没有在这事上吃过亏，是很难重视起来的</a>，某天早上我爬起来就乱写了一通，结果被大 v 转到微博并传播开来了，直到那天下午一个远方亲戚问我，这个作者是你么。我才知道这个帖子好像破圈了，我第一次尝试 Twitter 这种 thread 式的写法，感觉比较自由，另一个好处是你需要每段把一个事情说明白，而且不能太长，这看起来也是个锻炼写作的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《纳瓦尔宝典》书后有很多参考资料和链接，我选了一些书和链接继续看。&lt;/p&gt;
&lt;p&gt;进而我想到参考链接对读者帮助很大，因为这像是作品的源头，所以我也给自己的博客加了个 &lt;a href=&quot;https://catcoding.me/links/&quot;&gt;links&lt;/a&gt; 页面，打算放
      
    
    </summary>
    
    
      <category term="周刊、写作、程序员" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A%E3%80%81%E5%86%99%E4%BD%9C%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>第 18 期：程序员的软技能；参与开源项目的建议；人一生有三次死亡</title>
    <link href="http://catcoding.me/p/weekly-18/"/>
    <id>http://catcoding.me/p/weekly-18/</id>
    <published>2022-07-02T11:18:10.000Z</published>
    <updated>2022-08-18T14:26:29.795Z</updated>
    
    <content type="html"><![CDATA[<p>文章最难写的通常是标题和开头，周刊的标题我现在用了这种简单的组合方式，而开头则一直是需要琢磨的。</p><p>你好奇写这样一篇周刊要花多少时间么？</p><p>大概是在一个半到两个小时之间，加上修修改改可能再要半小时。</p><p>上次有个读者问我写这些的目的是什么？可以看到，从赚钱角度考虑，这是个投入产出比很低的事，就像王小波所说的这是个减煽运动。现在还在做长文内容输出的只有两类人，一类是要通过文字赚钱的，一类是有分享习惯和热情的。</p><p>我还在写大概有两个原因，通过半年训练形成了习惯，自己打磨出来的工具和流程让我做起来没什么负担。</p><p>当然非物质方面的收获更多，我之前写作主题的文章分享过，有成就感、有能力的提高，让自己有更多思考。</p><h2 id="程序员的软技能"><a href="#程序员的软技能" class="headerlink" title="程序员的软技能"></a>程序员的软技能</h2><p><a href="https://twitter.com/Tisoga/status/1540272958668967937">Jiayuan 在公司做的一个分享：程序员的软技能，现在开源出来</a></p><p>Jiayuan 经常分享一些效率工具、开发、Notes 相关的内容，推荐关注。这个 PPT 做得很棒，使用了 Slidev，整个  PPT 的源码在 <a href="https://github.com/forrestchang/programmer-soft-skills">programmer-soft-skills: 程序员的软技能</a>。</p><p>这里主要讲了三个主题：</p><ul><li>时间管理</li><li>快速学习</li><li>个人营销</li></ul><p>里面分享了一些案例和工具，这几个方面都是程序员要取得好的发展所需要的。</p><p>我认为软技能还需要增加一个“沟通和协作”的主题。写代码只是个门槛，本质上来说在公司工作，是和同事一起帮公司解决问题，所以沟通和协作特别重要。特别是要从广度上增加自己的影响力，沟通力起决定性作用。</p><p>而如果你想脱离公司这个组织，个人营销就更是必不可少了。</p><p>关于这些主题， <a href="https://sspai.com/post/44653">《软技能——一本写给程序员的生存指南》</a> 这本书非常不错。我 2019 年搭建英文博客时，通过搜索发现了 <a href="https://simpleprogrammer.com/">Simple Programmer</a> 这个网站，才发现  John Sonmez 就是这本书的作者。</p><p>这个网站有很多好文章，特别是针对程序员写博客方面。我当时发了几封 Email 咨询了他一些问题，他还夸我的域名选的不错，建议我选择特定的细分主题去写，而不要太过宽泛，后来还把我的博客加了个外链😁</p><p><img src="/images/ob_2022-07-01-125705.png" alt=""></p><h2 id="关于参与开源的建议"><a href="#关于参与开源的建议" class="headerlink" title="关于参与开源的建议"></a>关于参与开源的建议</h2><ul><li><a href="https://xuanwo.io/reports/2022-18/">2022-18: 如何贡献复杂的项目</a></li></ul><ul><li><a href="https://xuanwo.io/reports/2022-24/">2022-24: 开源，无禁止即可为</a></li></ul><ul><li><a href="https://xuanwo.io/reports/2022-25/">2022-25: 开源当以上游优先</a></li></ul><p>漩涡在做一份开源的远程工作，项目为 <a href="https://github.com/datafuselabs">Datafuse Labs</a>。他会把自己在做什么和学什么分别记录在两个 logseq 里，每周会写一个总结。我觉得这是非常好的输出方式，值得借鉴。</p><p>他博客上有很多不错的文章，这几篇谈到如何更好的参与到开源中来。</p><p>有的人认为参与到开源中需要很高的技术能力，或者达到一定水平才行。</p><p>其实不是，最好的学习和提高方式是直接参与进去，边做边学。人是环境的产物，如果你提高自己，要么加入一个厉害的公司和团队，要么加入到开源的世界中来，而后者是一个门槛更低，限制更少的选项。</p><p>新手可以从一些简单的项目开始，逐渐参与到更复杂的项目中去。</p><p>漩涡总结出参加一个复杂的项目分以下几步：</p><blockquote><ul><li>Step 1: Become a User，成为用户</li><li>Step 2: Build the Project，构建项目</li><li>Step 3: Learn the Hot-Path Internals，学习内部的关键逻辑</li><li>Step 4: Read and Reimplement Recent Commits，阅读并重新实现最近的 commits</li><li>Step 5: Make a Bite-sized Change，做一个小变更</li></ul></blockquote><p>学习开源项目的经验完全适用到我们日常的工作中去，当学习某个特性时：</p><blockquote><ul><li>首先自顶向下的寻找涉及到这个特性的 codepath 并忽略与之无关的细节</li><li>然后自底向上的学习这个子系统是如何工作的</li><li>尝试去修改代码，增加新的 log，增加简单的逻辑，修改某处细节，去理解为什么不工作了</li><li>阅读与这个特性有关的文档或者分享</li></ul></blockquote><p>当完成了第五步之后，剩下的就是不断坚持。我之前也写过自己对开源的看法：<a href="https://catcoding.me/p/why-open-source/">为什么要参与开源</a>。</p><p>令人难过的是，Github 似乎在国内被间断性拦截。我发现有的在校计算机学生，居然无法正常访问，所以学会如何搭梯子成了必修课。</p><p>谈到这里，再多扯一下其他的。我有个朋友在高校当计算机老师，以前他和我抱怨学校要求在专业课教学中加入思政。我以为就是口号喊喊、形式主义应付一下吧，没想到最近在群里看到了些图片，部分如下：</p><p><img src="/images/ob_00f64dd1ba73b620af25c4105315570.jpg" alt=""></p><p>而且看起来是不少高校都在搞这，只能一声叹息吧….</p><h2 id="人一生有三次死亡"><a href="#人一生有三次死亡" class="headerlink" title="人一生有三次死亡"></a>人一生有三次死亡</h2><p><a href="https://zwt.one/%E7%BA%AA%E5%BF%B5%E5%A4%9A%E7%89%A7%E5%90%9B">纪念多牧君</a></p><p>我通常在自己的 RSS 小阅读器里读博文，除了标题和内容几乎什么都没有。当我看到这篇的时候心有触动，所以点进去了网站，看到熟悉的头像才发现作者 JamesTsang，他也是我的读者，我们之前在博客留言区交流。</p><p>在我的人生经验中，也不断经历着认识的人去世这样的事。必然，年龄越大经历的次数会越多，每次死亡除了给人带来悲伤和痛苦，也会引人思索。生命如此脆弱，有的人好好的，下次再听到时已是离世。</p><p>多牧君是博主的同事，有激情、想法和行动力，遗憾的是最近去世了，RIP:</p><blockquote><p>听过一个说法，说人的一生有三次死亡，第一次是心跳停止、呼吸消逝；第二次是举行葬礼，在社会上不复存在；第三次是世界上最后一个记得自己的人离去或把自己忘记，这时整个宇宙都不再和自己有关。我想多牧君的人生不说耀眼，但也绝对炙热，炙热到我们都不会忘记，有一个这样充满热情、热爱生活的人出现过，和我们交织在一起。</p><p>多牧君的噩耗让我也不禁在想，该怎样去看待生命，生命很渺小，人生无常，生命是如此脆弱，经不起一袭波浪的打击。人生的道路也仿佛是一条失去的道路，最重要、最美好的东西在小时候就已经得到了，比如亲情、友情、美味、满足的好奇心……但在人生道路上，时间只能向前，很多这些美好的东西我们不得不承受失去的痛苦，然后试图用新的物质、感情等来填补，这可能有些作用，但只能延缓，“失去”本身不可阻挡。可能也正是因为生命这么渺小脆弱，还要经历失去的痛苦，才让生命更加珍贵，让我们知道要温柔对待自己、对待他人。</p></blockquote><p>人们常说，当一个作者去世，他所创造的文字、电影、音乐和艺术作品以某种方式活了下去，因为这些作品中似乎融入了他的激情和灵魂，继续留在人的回忆中。</p><p>作为程序员，我们写的程序是否也能类似？不用写出那种伟大的项目，当我们去世之后代码可能还会在地球的某个角落运行着，解决着问题，延续着我们和这个世界的一丝丝联系，这样想来也许稍有安慰。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>上周听了这期播客非常有共鸣，我们生活在了一个被卡夫卡预言了的世界，体验到了以前不容易理解的那种荒诞困境：</p><p><img src="/images/ob_obweb-2022-07-01-20-57-13.jpeg" alt="250"><span class="image-caption">250</span></p><p><a href="http://lists.busybox.net/pipermail/busybox/2010-December/074114.html">Understanding the bin, sbin, usr/bin , usr/sbin split</a> 为什么 Unix 系统的 bin 目录分这么多，这里有一段有趣的历史，1969 年 Unix 创造的时候磁盘只有 1.5 MB！我本来想分享这篇文章，但后来发现有人已经写得很好了，如果你想看中文的解释看看这篇就好了 <a href="https://www.kawabangga.com/posts/3777">/bin /usr/bin 和 /usr/local/bin 的故事 | 卡瓦邦噶</a>。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-07-01-130508.png" alt=""></p><hr><p>内容创作有两种策略：</p><ul><li>找到特定的读者人群，为他们创造特定的内容</li><li>分享真实的自己，每个人的都是独特的</li></ul><p>我在走第二条路线，这样更有趣，而问题是更难推广。我不清楚读者的用户画像是什么，大概就是和我有些共同点的人。</p><p>最近几个月，我似乎进入了孟岩所说的“让爱我的人更爱我，而不是让更多人知道我”的状态，无心做自我推广。</p><p>所以，我想到还有一个因素能帮我写下去，那就是请你帮忙分享出去，分享给那些可能和你一样也喜欢看这样内容的人，感谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文章最难写的通常是标题和开头，周刊的标题我现在用了这种简单的组合方式，而开头则一直是需要琢磨的。&lt;/p&gt;
&lt;p&gt;你好奇写这样一篇周刊要花多少时间么？&lt;/p&gt;
&lt;p&gt;大概是在一个半到两个小时之间，加上修修改改可能再要半小时。&lt;/p&gt;
&lt;p&gt;上次有个读者问我写这些的目的是什么？
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>第 17 期，远程办公；程序员如何保持健康；纳瓦尔宝典</title>
    <link href="http://catcoding.me/p/weekly-17/"/>
    <id>http://catcoding.me/p/weekly-17/</id>
    <published>2022-06-26T20:28:10.000Z</published>
    <updated>2022-08-18T14:26:29.795Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_2022-06-26-204342.png" alt=""></p><p>又隔了一周没更新，基本上除了工作，我在忙于带娃和减肥。疫情过后，和家人在一起了孤独感就少了一些，写作和分享本质上是个孤独的事情。</p><h2 id="远程办公"><a href="#远程办公" class="headerlink" title="远程办公"></a>远程办公</h2><p><a href="https://world.hey.com/dhh/employee-surveillance-software-is-managerial-bankruptcy-94e48a08">Employee surveillance software is managerial bankruptcy</a></p><p>Rails 创始人 DHH 很早就倡导和实践远程办公，这篇文章中 DHH 谈了关于监控的看法。有的公司虽然因为疫情远程办公，但是公司在员工的电脑上安装了强大的监控软件，比如必须要求员工在屏幕前，或者监控键盘输入等等。</p><p>DHH 认为这是一种管理的无能，暴露了管理者的不安全感和偏执，这是最糟糕的管理方式，让工作中原本的信任变成了怀疑和恐惧。</p><p>有的公司即使不远程办公，也在用类似的管理模式，比如让员工详细填写工作内容，月报、周报、日报，甚至有的部门细化到每个小时。我待过这样的公司，填了一段时间之后就觉得完全是浪费生命。</p><p>因为疫情和家庭原因，我 2022 年基本都在远程办公，总共只去了办公室几天。这段时间我也体会到了远程办公的好与不好。</p><p>好处当然在于能节省不少通勤时间，每天来回至少一个小时吧。这些时间可以用来休息、陪娃、锻炼等等。</p><p>坏处当然也比较明显，在家办公效率通常是没有办公室高的，特别是小孩不上学的时候，我基本得每过半小时去处理一下。有时候工作正进入状态，又可能被小孩打断思路。好在微软的会议基本都是线上进行，很多事情也通过邮件异步沟通，所以我觉得问题不大。</p><p>另一个坏处是工作和生活没有了明显的界限，有时候我白天工作投入少一些，晚上等娃睡觉了之后再工作，有的时候早上起来就工作，搞到中午发现还没洗脸。另外宅在家里太久了之后，有一种脱离感，会有比较强烈的社交需求，比如想和同事朋友散步、聊天。</p><p>如果没法远程工作和灵活办公，我无法想象如何撑过两个娃还小的这个阶段。总的来说，我觉得程序员这个职位是非常适合远程办公的，我们的生产资料就是计算机，这是个天然的优势。</p><p>当然有的人也不喜欢远程办公，比如 Musk 前段时间就发文说 Telsla 要求员工回到办公室，每个公司的管理风格不同吧。微软现在国内的职位默认是需要常驻办公室所在的城市，如果需要长期在不同城市远程需要特殊申请。</p><p>我之前收集了一些国内可以提供远程办公的职位信息 <a href="https://github.com/chenyukang/remote-jobs-cn">remote-jobs-cn: 国内远程办公职位</a>，如果你感兴趣可以看看。</p><h2 id="程序员如何保持健康"><a href="#程序员如何保持健康" class="headerlink" title="程序员如何保持健康"></a>程序员如何保持健康</h2><p><a href="https://medium.com/taking-flight-with-mailjet/10-tips-to-stay-healthy-as-a-developer-3b17b77e16a6">10 tips to stay healthy as a developer</a></p><p>在《1Q84》里，村上春树这样写道：  </p><blockquote><p>肉体才是人的圣殿，不管在那里祭祀什么，它都应该更强韧、更美丽清洁。</p></blockquote><p>脑力活拼到最后也是体力活，村上春树用跑步、铁人三项这些运动来锻炼身体和韧性，保持精力上的充沛。</p><p>这篇文章谈到程序员如何保持健康。久坐会带来很多健康风险，这篇文章写的几点也算是老生常谈了，比如保持正确的坐姿、多喝水、多休息、保持睡眠等等，不过里面<u>不要饥饿</u>这点我不太赞同。</p><p>年龄超过 34 之后，我感觉身体和精力确实大不如前了。我们年轻的时候以为自己永远生猛下去，什么也锤不了我，但不到几年我们通常就被打脸了。</p><p>我现在身体上的问题也比较多，有的是久坐和运动少造成的，有的是年轻时候就有的毛病，有的是衰老造成的。每年到了体检的前一段时间，就有些担心，犹如学生年代临近考试那种心情。</p><p>精力方面自然是差了些，现在晚上到了 11 点多就比较困了，某几夜因为小孩闹腾晚上没睡好的话，需要好几天调整过来。</p><p>因为远程办公半年，我的体重增加了 5 斤左右。我对体重的增加比较敏感，肚子和脸上都会很快显现，所以最近我又开始减肥了。</p><p>我的方法通常就是运动和禁食。前几周开始重新打篮球，打了几次之后发现左边膝盖还是没有好，运动之后就会酸痛。因为几年前我打篮球扭伤了一次，而膝盖伤通常是很难完全恢复的。去年我尝试去游泳，这倒是个非常适合久坐人士的运动。</p><p>最近我开始控制饮食，晚上少吃或者不吃。这个办法对我来说很有效，三周左右就能减 3-4 斤。我觉得适当禁食除了减肥，另一个好处是让我胃口更好，因为早上起来后适度的饥饿感，早饭吃起来更香。之前看到朋友圈有人实践辟谷这种方法，看起来有点极端和危险。</p><p>最近我听到一期播客<a href="https://happyxiao.com/happy30pod-073/">快乐三十分 073 舒服是危机</a>，里面谈到现代人把自己搞得太安逸，肉体和精神上的适度痛苦和不舒服是有益健康的，推荐你听听这期。</p><p>关于健康，年初我还看了一本书叫<a href="https://www.amazon.cn/dp/B077QCVJLD">你是你吃出来的：吃对少生病，病了这样吃</a>，介绍了 7 大营养平衡，地中海饮食等等。对于很多中国人来说，需要多吃些蛋白质、蔬菜、和坚果。</p><h2 id="纳瓦尔宝典"><a href="#纳瓦尔宝典" class="headerlink" title="纳瓦尔宝典"></a>纳瓦尔宝典</h2><p>最近我读完了这本书，准确的说是听完了。我使用微信读书，用了一段时间之后我已经习惯了使用 AI 语音来听书，现在我几乎一半的书籍是通过这种方式完成的。</p><p>《纳瓦尔宝典》这本书倒没有给我醍醐灌顶之感，也许是因为里面很多观点我之前大多接触过。不过还是很推荐没看过的人读读，都是一些关于工作、财富、幸福、健康的简洁忠告。</p><p>我之前也介绍过那本《百万富翁快车道》，里面有些类似的观点，这两本对比起来我更喜欢《纳瓦尔宝典》。</p><p>书的最后部分推荐了很多书，其中提到《悉达多》和纪伯伦的《先知》，让我特别有共鸣，因为我最近也把这两本书关联了起来。我刚开始使用微信读书的时候，偶然机会听完了《悉达多》，这本是特别适合用来听的书，听完之后我就想到多年前听完的《先知》。</p><p>这两本书还有一些共同点，带一些宗教感，文笔优美，听起来有诗意，推荐给你。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://dariusforoux.com/stop-comparing/">Want to Succeed? Stop Comparing Yourself to Others - Darius Foroux</a> 如果你想要成功，不要和别人比较，和自己的过去比较就行了。</p><p><a href="https://blog.bytebytego.com/p/free-system-design-pdf-158-pages">Free System Design PDF</a> Bytebytego 是几个华人工程师写的技术类型 newsletter，这个小册子里面包含一些系统设计方面的总结。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-06-25-224117.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_2022-06-26-204342.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;又隔了一周没更新，基本上除了工作，我在忙于带娃和减肥。疫情过后，和家人在一起了孤独感就少了一些，写作和分享本质上是个孤独的事情。&lt;/p&gt;
&lt;h2 id=&quot;远
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>Follow Your Passion 是个坏建议？</title>
    <link href="http://catcoding.me/p/passion/"/>
    <id>http://catcoding.me/p/passion/</id>
    <published>2022-06-14T09:45:09.000Z</published>
    <updated>2022-08-18T14:26:29.791Z</updated>
    
    <content type="html"><![CDATA[<p>2005 年的今天，乔布斯在斯坦福大学发表了那个著名的<a href="https://www.youtube.com/watch?v=UF8uR6Z6KLc">演讲</a>，这是 Youtube 上被观看过次数最多的演讲，浏览数超过 4000 万次。</p><p>这个演讲当然很好，感人、给人启迪，乔布斯分享了三个小故事，其中最重要的建议是鼓励大家去追随自己的内心和激情：</p><blockquote><p>And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p></blockquote><p>Follow Your Passion 或者 Follow Your Heart 是年轻人经常会收到的建议，特别是一些成功人士也喜欢给出这样的建议。</p><p>但如果我们没有结合自己的情况审视过，这样的建议会无法下手实践。对于很多普通人来说，问题可能源于：</p><ul><li>不知道自己的激情在哪里</li><li>一直寻找激情则会让人焦虑</li><li>有激情和愿景，但现实很残酷</li><li>如何判断一时兴起，还是内在动力</li><li>何时该追随，何时又该放弃</li></ul><p>如果你也有这样的困惑，可以看看 Cal Newport 的书 <a href="https://www.calnewport.com/books/so-good/">《So Good They Can’t Ignore You》</a>，中文译本为 <a href="https://book.douban.com/subject/26781120/">《优秀到不能被忽视》</a>，这本书让我们换个角度来思考。<sub>Cal Newport 是一个计算机教授，他写了好几本畅销书，你可能读过他的《Deep Work》。</sub></p><p>Follow Your Passion 这个建议容易让人这样想，如果我的工作成果或生活状态不好，是因为我还没找到自己的激情所在，只要我找到了，问题随之而解，我就能成功。</p><p>世界上确实存在一些人极具天赋，他们很早发现自己的激情和才能，并确定职业理想，做出巨大的成绩，比如陶哲轩、科比这类人。</p><p><strong>但对绝大部分人而言，能力和激情都是稀缺的</strong>。</p><p>即使是乔布斯，在他早期并未表现出对电子工程和科技产品的兴趣，如果他追随自己最初的激情 – 艺术、节食、禅宗、冥想，世界上可能多了一个出色的禅修老师，而少了苹果公司。</p><p>后来他碰到了那个时代最出色的极客 Steve Woz，他们最初卖组装计算机是为了搞上一笔快钱，而在这个过程中乔布斯发现了更大的机遇，这也激发了他的热情，可以说 Apple 的创建有一些机缘巧合。</p><p>Newport 的书中写到，很多时候工作与爱好相匹配并不那么重要。而且很多激情无法直接和职业关联起来，比如很多男生的激情所在是篮球，但与篮球相关的职业及其稀少，而能进入职业联盟除了激情更需要天分。</p><p>总之，对大多数人来说爱好不能当饭吃，甚至爱好当饭吃最终会变得痛苦。有关激情，Newport 的研究表明：</p><ul><li>职业激情是很稀缺的</li><li>激情需要时间去积累</li><li>激情是精通的副产品</li></ul><p><strong>职场的激情是在努力工作，并在某件有价值的事情上变得优秀之后才出现的，而不是在那之前</strong>。普通人的职业激情很多时候是一点一点，经过长时间的滚雪球来自然形成的。</p><p>在人年轻的时候，或者是没有足够多的职场资本时，更重要的是如何谋生，如何通过刻意练习让自己掌握稀缺技能，让自己变优秀和独特，而不是寻找激情。</p><p>当一个人足够好，对他人能产生价值时，这个人自然无法被忽视，这是 Newport 的书的核心观点，书里还写了些具体的，比如工匠思维、自主力、如何正确地工作等。</p><p>后来我看到了一个 Quora  上的问题，<a href="https://www.quora.com/What-controversial-advice-have-people-given-to-their-children">What controversial advice have people given to their children</a>，Richard Muller 的回答阐述了同样的道理，在小孩这个阶段，简单粗暴地鼓励他们 Follow Your Passion 是不负责任的。</p><p><strong>因为在人的孩童阶段，他们只是接触了世界的很小一部分，所体现的兴趣和激情往往是模仿。</strong> </p><p>有的女生从小喜欢舞蹈，但结果成了舞蹈老师，并不是说舞蹈老师不好，如果这个人很喜欢舞蹈老师这个职业当然没问题，但她的最初愿景可能是成为舞蹈家，如果能选择她希望有一份其他工作，而只是把舞蹈当一个业余爱好。</p><p>更理智的建议是尽自己所能去接受好的教育，接触更广阔的世界，进入更好的平台，多探索，尽量把选择的机会留到年纪更大的阶段，因为这时候人会更笃定，更知道自己要什么。</p><blockquote><p>Exploring is an adventure. It is full of uncertainty. It is much more challenging to explore than it is to follow your passion; there is much more uncertainty. If you feel that you must avoid all anxiety, then it is a very uncomfortable way to go. You live with doubt. It is not easy; in fact, it is full of wrong directions, and when you find yourself on a path that is not going where you want, you have to be ready to get off.</p></blockquote><p>我接着思考了一下，为什么很多成功人士经常会给出这种追随激情的建议。在 <a href="https://www.youtube.com/watch?v=1feBz5ifT-U">Scott Galloway 的这个视频</a> 中，他说如果一个人给你建议 Follow Your Passion,  说明这个人已经变得富有了🤣。</p><p>成功人士说的其实并没有错，我联想到一个比较形象的类比，假设人生是一个大<a href="https://keesiemeijer.github.io/maze-generator/#generate">迷宫</a>，Passion 在迷宫的右下角，人理想的状态当然是做自己有激情的事情，能产生社会价值当然就更好了。</p><p>对于一个普通人而言，很多时候只有一个选择，比如对绝大部分中国高中生来说，高考是必须过的门槛。这种情况下使用 Follow Your Passion 的策略，优先往右下方向走 (比如 A* 算法) 是不现实的，这可能会让人走更多弯路或者更痛苦。</p><p><img src="/images/ob_2022-06-13-105008.png" alt=""></p><p> 但当一个人有足够多的选择资本，下面这个迷宫随机拆掉了 200 个墙，就比如谷爱凌吧，她的每一步都几乎有多个选择，这时候只要沿用 Follow Your Passion 的策略，这无疑就是最优解或者近优解。</p><p> 所以成功者给出的这种建议，对他们来说是显而易见的“正确”建议。</p><p><img src="/images/ob_2022-06-13-105204.png" alt=""></p><p>在没有足够多的选择资本的情况下，我们需要做的是尽量探索、积累、提高，移掉那些墙，让自己有更多选择，试着把第一个迷宫变成第二个。</p><p>以上讨论都有些理性，结论听起来也有点鸡汤。在现实残酷的情况下，是否应该还坚持追随内心和梦想，是否应该抛弃世俗的一切？比如 <a href="https://movie.douban.com/subject/3036997/">《立春》</a> 里的王彩玲，比如《月亮与六便士》里斯特里克兰德，有的人说应该，人生就当如此纯粹；有的人说别拧巴，让自己和身边人活得舒心点。</p><p>这是一个见仁见智的问题，理想和现实、理智和热情，总会有那么些冲突和撕扯，纪伯伦说：憩于理性，行于热情，这是一种最好的状态。</p><p>我有个基友说，等赚够了钱后我们找个小岛好好写代码，我们盯着地上的便士，偶尔仰望月亮，这就是大多数人的选择方式吧。而那些有理想，不顾一切追随内心梦想的人总值得尊敬。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2005 年的今天，乔布斯在斯坦福大学发表了那个著名的&lt;a href=&quot;https://www.youtube.com/watch?v=UF8uR6Z6KLc&quot;&gt;演讲&lt;/a&gt;，这是 Youtube 上被观看过次数最多的演讲，浏览数超过 4000 万次。&lt;/p&gt;
&lt;p&gt;这个演
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="成长" scheme="http://catcoding.me/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>第 16 期，每天写笔记；写个操作系统来治疗自己；软件工程师如何投入到创作者经济中</title>
    <link href="http://catcoding.me/p/weekly-16/"/>
    <id>http://catcoding.me/p/weekly-16/</id>
    <published>2022-06-12T17:55:09.000Z</published>
    <updated>2022-08-18T14:26:29.795Z</updated>
    
    <content type="html"><![CDATA[<p>上周因为家里的事情太忙而断更了一次周刊，没想到收到一些读者的催更😁，看来周期性的更新不止是自己形成了一些写作习惯，有的读者也形成了阅读习惯。</p><p>随着家庭事务增多，独处的时间少了很多，所以没法保证周期性更新，我觉得这没必要强求，写些什么，什么时候写，有感而发挺好的。</p><h2 id="每天写笔记"><a href="#每天写笔记" class="headerlink" title="每天写笔记"></a>每天写笔记</h2><p>近些年笔记管理类软件很火，很多人都在构建自己的第二大脑。而 <a href="https://twitter.com/dvassallo/status/1534774398200098816">Daniel Vassallo</a> 分享了一下他的看法：</p><p><img src="/images/ob_2022-06-10-183418.png" alt=""><br>在这条推特下面确实有不少人回复说放弃了每天写笔记，原因在于：</p><ul><li>记笔记需要花费时间</li><li>记下的东西大多没用，不会再花时间去看</li><li>重要的东西大脑自然会记下来，不重要的忘记了就算了</li></ul><p>我之前间歇性记录笔记，现在经常记录笔记，这里分享一下自己的体会和经验。我之前也觉得记录笔记太花费时间，特别是我有一些强迫症，如果文档的格式不对或者整个笔记的目录没有整理好，自己感觉就不舒服，所以就会花时间去搞这些。</p><p>但这偏离了记录笔记的原本目标，我们记录笔记的目的是：</p><ul><li>整理思路和想法</li><li>记录 todo，备份常用信息，让自己更有效率</li><li>根据自己的想法和笔记来创作</li></ul><p>在我使用 Obsidian 之后，我逐渐地把记录笔记的时间花费降低了。首先我并不刻意组织文件目录，我只有几个固定的目录，比如 Daily 来存放每天的日志，Pub 来存放会发布出去的内容。这种简单的组织形式减轻了我的心理负担。</p><p><img src="/images/ob_2022-06-10-184646.png" alt=""></p><p>然后我所有笔记通过双链和标签来组织，搜索也是通过关键词和标签：<br><img src="/images/ob_2022-06-10-184805.png" alt=""></p><p>每天我都会像 Roam Research 那样随手把自己的一些想法和日常、看到的好东西、读书笔记、照片、链接等记录到 Daily 的文件夹里，如果是打算以后要做的事情就会再加上一个 todo 标志。</p><p>最近我研究了一下 Telegram 的 bot 接口，然后写了个简单的程序 <a href="https://github.com/chenyukang/obweb/blob/main/backend/bot.js">obweb/bot.js</a> 来在 Telegram 手机端提交 Daily Notes，不得不说客户端的这种方式比 web 形式方便很多。</p><p><img src="/images/ob_9c2bd540b47265c6d5916eb0c88500f.jpg" alt=""></p><p>顺便分享一下，最近我用 Telegram 比较多，这东西比微信好用多了，并且开放 100 倍，我实现这个笔记 bot 从看文档到完成几乎一小时搞定，而微信估计一个星期还没申请下来接口权限 🤣。关于 Telegram 这还有很多玩法，参考 <a href="https://reorx.com/blog/sharing-my-footprints-automation/">使用自动化工作流聚合信息摄入和输出</a>。</p><p>我让自己提交记录非常迅速，在手机端就是 append only 式地提交，有时候也使用语音输入，而要大量编辑的时候则使用大屏幕来进行。我尝试过热门的卡片笔记法，但最终还是没有沿用下来，对我而言还是有些复杂，我要找适合自己的方式来记录笔记。</p><p>这一年几乎每天都记录日志，我的感受是好像自己运行的是调试模式，我打开每天的 Daily 就能很快回想起我那天干了什么，产生了什么想法，总体而言我觉得很不错。</p><p><img src="/images/ob_2022-06-10-045806.png" alt=""></p><h2 id="写个操作系统来治疗自己"><a href="#写个操作系统来治疗自己" class="headerlink" title="写个操作系统来治疗自己"></a>写个操作系统来治疗自己</h2><p><a href="https://awesomekling.github.io/I-quit-my-job-to-focus-on-SerenityOS-full-time/">I quit my job to focus on SerenityOS full time</a></p><p>Andreas Kling 是一个瑞典程序员，从 2018 年 10 月，他刚刚在瑞典的一家戒毒所完成了为期 3 个月的康复计划。</p><p>那段时间他无事可做，处于人生最低谷。所幸他想到了自己曾经很喜欢编程，也喜欢倒腾底层开发，所以他开始用编程来治疗自己。</p><p>从一个简单的 ELF Parser，Ext2 文件系统，一些 GUI 开发，通过不断的日夜编程，他逐渐地开发出一个几乎日常可用的操作系统 <a href="https://www.serenityos.org/"><strong>SerenityOS</strong></a>，并且也找到了一份开发的工作。随着捐赠越来越多，他辞职全职做自己的操作系统了。</p><p>可以说 Andreas 通过编程治愈了自己，让自己能够进入心流状态，远离了毒品。这个故事引起了很多人的共鸣。</p><blockquote><p>As you probably understand, I’m not trying to get rich by doing this. I’m just a human being trying to stay sane and healthy, and it just so happens that my therapy/self-care project resonates with thousands of people, many of whom want to support it and see where it goes.</p></blockquote><p>目前一群对计算机感兴趣的学习者围绕 SerenityOS 建立起一个热闹的社区，最近他们还开始着手解决 C++ 开发中的内存问题，开始创建一门新的编程语言 <a href="https://awesomekling.github.io/Memory-safety-for-SerenityOS/">Memory safety for SerenityOS</a>。</p><p>在如今资料浩瀚的时代，写个玩具操作系统不难，但是把一个操作系统做到基本可用，还包括图形界面、浏览器、音乐播放器、画图工具等等，这想想都头大。</p><p><img src="/images/ob_2022-06-10-204824.png" alt=""></p><p>我在学校的时候读过于渊写的<a href="https://book.douban.com/subject/1422377/">自己动手写操作系统</a>，这本书写得很详细也很用心。但我看完后觉得写操作系统还是很难，后来毕业工作后我业余时间继续在互联网上找资料看，我发现于渊的书让我觉得难是因为其中一大半都在折腾汇编，而我在 <a href="https://wiki.osdev.org/Expanded_Main_Page">OSDev wiki</a> 上看到其实我们只需要 bootloader 部分写汇编，开发过程中应该尽快进入 C 编程，于是我边看资料边参考其他人的 hobby OS 折腾出来一个 <a href="https://github.com/chenyukang/Panda">Panda, A hobby OS</a>。</p><p>如果你对计算机感兴趣，自己写一个简单的 OS 非常有帮助，这可以帮你克服对 OS 的恐惧。OS 是贴近硬件一些的复杂程序，开发过程中需要多看看硬件的相关文档，比如 Intel manual 之类的。另外你可以体会到程序开发中的抽象，如何从最底层一层一层地把系统和工具搭建起来，很有玩积木似的成就感。</p><h2 id="软件工程师如何投入到创作者经济中"><a href="#软件工程师如何投入到创作者经济中" class="headerlink" title="软件工程师如何投入到创作者经济中"></a>软件工程师如何投入到创作者经济中</h2><p><a href="https://blog.pragmaticengineer.com/how-to-become-a-full-time-creator/">Becoming a Full-Time Creator as a Software Engineer: Controversial Advice - The Pragmatic Engineer</a></p><p>这篇文章很长也非常干货，我还在继续消化中。</p><p><strong>Gergely Orosz</strong> 之前在 Uber 作为软件工程师工作，2020 年从 Uber 离开后他决定花 6 个月写一本书 <a href="https://www.engguidebook.com/">Growing as a Developer</a>，然后再计划创建一个公司。</p><p>结果他发现投入到创作者经济浪潮是个更明智的选择，他的 Substack 专栏 <a href="https://newsletter.pragmaticengineer.com/">The Pragmatic Engineer</a>  已经是付费用户最多的科技类专栏。</p><p>这篇长文中写了很多，本质上是在谈论如何不依赖公司来赚钱：</p><blockquote><p>Instead of talking about succeeding as a creator, I’ll instead talk about how to succeed as a small business.</p></blockquote><p>其中的一些建议是：</p><ul><li>要更具有产品思维</li><li>尝试在网上卖出一些东西</li><li>理解其他人在做什么，如何做的</li><li>为自己不擅长的部分花些钱</li><li>尝试成为 tech influencer</li></ul><p>如果你打算不再成为公司雇员，那就没有了规则，这可能很可怕，但也充满了机会：</p><blockquote><p><strong>When you work for yourself, there are no rules, which is both scary, and a huge opportunity.</strong> After years of working for corporate, this means you need to let go of old habits and embrace new ones.</p></blockquote><p>在英文环境中，写个电子书在自己的网站和 newsletter 上销售是一种比较常见的模式，另外付费专栏也很多。</p><p>国内像 Substack 这种平台有小报童和竹白，但感觉读者对这种技术类的内容付费意愿会弱很多。如果是写书或者专栏，通常会到极客时间这种平台上，这样平台会帮忙推广，但是会有抽成。</p><p>我还在摸索内容创作，感兴趣的读者一起交流交流。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_obweb-2022-06-11-20-47-28.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周因为家里的事情太忙而断更了一次周刊，没想到收到一些读者的催更😁，看来周期性的更新不止是自己形成了一些写作习惯，有的读者也形成了阅读习惯。&lt;/p&gt;
&lt;p&gt;随着家庭事务增多，独处的时间少了很多，所以没法保证周期性更新，我觉得这没必要强求，写些什么，什么时候写，有感而发挺好
      
    
    </summary>
    
    
      <category term="技术" scheme="http://catcoding.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>白话比特币和去中心化</title>
    <link href="http://catcoding.me/p/bitcoin/"/>
    <id>http://catcoding.me/p/bitcoin/</id>
    <published>2022-06-09T19:10:07.000Z</published>
    <updated>2022-08-18T14:26:29.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近我看了些区块链、以太坊和 Web3 相关的资料，倒不是因为想从事这方面的工作，但我想稍微了解些技术热点。</p><p>顺便写些文章锻炼一下费曼学习法，我想使用通俗易懂的语言来阐述自己的理解。如果我做到了让一个不懂计算机的人也大致明白了区块链是怎么回事，那我就成功了。</p><p>这是系列文的第一篇，为了使得该篇文章完整，我也会加上具体的针对技术人员的解释，以甄别自己的理解是否有误。</p><h2 id="村庄里的交易"><a href="#村庄里的交易" class="headerlink" title="村庄里的交易"></a>村庄里的交易</h2><p>比特币已经不是新鲜事了，对于有技术背景的人来说比特币并不难理解，但对于计算机不太懂的人来说其实不容易理解。那么我们假设没有计算机，现实中货币和交易是如何运行的？</p><p>货币的出现，<strong>本质上是为了交易，是价值的交换</strong>。两个人要交易，从远古时代的以物换物，这样显然不方便。后来出现以贝壳等作为交换物，渐渐地人们开始使用贵重金属，比如使用黄金作为标准交换物。于是，黄金这类东西变成了标准货币，但黄金显然不便于携带，所以纸币就出现了。</p><p>现在的货币交易我们必须通过一个中心节点进行，这个节点就是银行，我们只需要理解为任何一个交易，都在一个巨大的中心上记录了一笔。</p><p>需要解决的一个本质问题是，我的每一分钱不能被花费两次。</p><p><img src="/images/ob_2022-06-07-060827.png" alt=""></p><p>现在假设一个村庄，为了进行交易，村庄有一个交易记录员，所有的的村民要进行交易都得通过这个人来记账。那这样会有什么问题呢？</p><p>假设 A 和 B 两个农民要进行交易，C 是交易记录员，A 和 C 私人交情很好，因此即使 A 转账了一笔钱给 B，C 并没有把钱从 A 的账户里扣掉，这样 A 就可能凭空多出来一笔钱。</p><p>C 作为一个中心点是不可靠的，任何单独的人都不值得信任，<strong>中心节点意味腐败和权力的滥用</strong>。虽然监督可能起到一定作用，但谁来负责监督机构没有问题。那我们如何才能打破中心点呢？</p><p>村庄里有个叫做中本聪的聪明小伙，他提出这么一个想法：</p><p>既然一个交易员不可靠，我们就需要多个交易员，任何人都可以成为这个角色，数量可以无限增多，并且他们的地位是平等的。</p><p>基于这个前提，如果有足够多的交易员，那理论上我们就可以信任这个交易机制。因为任何人都可以成为交易员，交易记录不止存储在某个人手里，而且也可以在其他人那里复核。</p><p>那具体如何实现呢？</p><p>他发明了一种虚拟币，如果某个村民想拥有这种币，那就成为虚拟货币交易员。每个交易员手里都拿着一个本子，里面记录了村庄的所有虚拟币的交易，这些交易员之间相互同步交易记录，比如 A 交易员现在手里已经记录了到目前为止的 99 页，而 B 交易员已经记录了 101 页，所以 A 会从 B 这里拷贝两页新的交易记录，那么最新的交易记录就在页码最长的那个页里。</p><p><img src="/images/ob_2022-06-07-055545.png" alt=""></p><p>可见这里面有很多重复的沟通，但是为了安全效率的问题先不考虑了。那如何防止交易记录被恶意纂改呢？中本聪发明了一种彩票机，如果交易员把一页输入彩票机，彩票机就会根据页的内容计算出一个认证码。</p><p>交易本上的每一页上都附带这个认证码，并且每一页也附带着上一页的认证码，这样如果某个恶意交易员修改了记录，那也也得重新获取对应的认证码，但这样就无法和下一页连接起来，所以他得把接着的页也修改掉，并且让村里的大多数人认可这个改动。</p><p>好了，那接着的问题是谁来负责开始新的一页，如果每次都是固定的人，那必然还会出现中心节点的问题。因此中本聪规定，每周日是交易日，然后在一周的时间内，交易员们尽量在自己的新页内收集村里这期间发生的交易记录。</p><p>如果有多个交易员记录满了一页，如何决策哪个交易员的页为系统承认的新页？</p><p>中本聪还是利用彩票机，每次交易员把自己的页输入彩票机，然后按下摇色子的按钮，按下之后就会出现一个数字，如果连续 5 次都出现数字 1 的情况下才会生成对应的认证码。这样他就能把这个新页加入交易本，并且告知其他交易员。</p><p>可以预见，交易员们觉得摇色子的游戏无脑又无聊，于是中本聪就说，每次那个成功加入了新页的交易员能获得一笔虚拟币。</p><p>刚开始只有几个人在玩这种虚拟货币游戏，但随着时间的推移，认可这种货币的村民越来越多，有的人即使不成为交易员，但他们用钱买虚拟货币，这样也拥有了一些虚拟货币。</p><p>每天都有很多人在村头收集大家的交易，然后去彩票机摇色子。因为竞争过于激烈，中本聪第二个月就增加难度，要求连续 10 次摇出数字 1 才能新增页，并且以后每个月都递增，并且获得的虚拟币数量减半。</p><p>中本聪因此富了，村里其他人也按照类似的方式发了其他虚拟货币，有的人也富了，但有的人从楼顶上跳了下来。</p><h2 id="一些技术细节"><a href="#一些技术细节" class="headerlink" title="一些技术细节"></a>一些技术细节</h2><p>这就是我能想到的一个荒诞的比喻来描述比特币，因为从技术角度来说，比特币确实有那么点荒诞。每天有无数的高性能计算机在做着这样的猜谜语一样的计算，只是为了决定谁来记录新的交易。</p><p><strong>安全，效率，去中心化这三个不能同时达到</strong>，很明显比特币为了去中心化和安全而牺牲了效率。比特币每 10 分钟左右会加入一个新的 block，而每个区块大小被中本聪限定最大为 1 兆，一个区块最多可以容纳 4096 (1024000/250) 笔交易，可以说效率极低。</p><p>我们看比特币里的一个 block 包含以下主要内容，Header 可用于验证该 block 是否合法，另外就是该 block 包含的交易记录：</p><p><img src="/images/ob_2022-06-08-194852.png" alt=""></p><p>挖矿的本质就是猜数字，猜出一个数字 (在 header 中称为 nonce) 和该 block 的交易内容进行 sha256 计算之后的结果 hash 的前 N 位为 0，block 也是以这个 hash 值串联起来。</p><p><img src="/images/ob_2022-06-01-125707.png" alt=""></p><p>当然这个猜数字的意义不限于决定谁来记录新的 block，<strong>更是为了证明工作量 (Proof of Work)</strong>。计算出一个合规的 block 需要耗费如此多的计算资源，可以说每一个 block 都是数字黄金。</p><p>另外这个工作量证明还有个特点，那就是验证很容易，因为只要知道了 nonce 和 block 的内容，进行一次 hash 计算就知道是否是合法的，这样其他节点就能很快地验证。</p><p>如果一个恶意攻击者想篡改 block 的内容，他也得按照这样的规则来生成合规的 block，所以也需要大量的计算量，并且得让大部分节点认同，这就使得恶意篡改的概率几乎没有了。</p><p>而随着时间的推移，这个 N 将变大，因此每此猜中的概率就会越低，挖矿的难度就越高。比特币初始化的时候一个设定的 2100 万个左右的总量，目前据说已经挖出了 90%，预计将于 2140 年将挖完。如果挖完之后，挖矿获得的奖励只能是手续费了，但那时候手续费是否还能让人们有欲望去挖矿，那就无人知晓了。</p><p>从目前上看，比特币的挖矿每年要耗费巨量的能源：</p><p><img src="/images/ob_2022-06-07-062423.png" alt=""></p><p>随着我国前段时间出来的禁止挖矿的政策，可以看到 <a href="https://ccaf.io/cbeci/mining_map">network hashrate</a> 的大头已经转移到美国了：</p><p><img src="/images/ob_2022-06-08-184320.png" alt=""></p><p>关于比特币具体的细节，你可以看看中本聪的原始论文 <a href="https://nakamotoinstitute.org/bitcoin/">Bitcoin, A Peer-to-Peer Electronic Cash System</a></p><h2 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h2><p>比特币就是中本聪的一个乌托邦式情怀的实践，居然能成功破圈。但比特币成为世界货币的可能性极低，交易的效率低是一个原因，另一方面政府作为现实世界的中心，都不想让虚拟货币替代法币。比如美国希望继续捍卫美元的信用，这样才能继续收割，而中国则认为这种虚拟货币不可监管。</p><p>即使如此，近些年越来越多的人开始关注到区块链，去中心化成为人们对未来的期望。</p><p>如果你抛去对具体概念的偏执，现实中最大的区块链实践应该是 Git，Git 的所有提交都是可以追溯的，也是分布式的，我们通过 Git 客户端来提交新的记录 (也可以修改历史节点)，但实践中 Git 通常是有中心节点的，比如 Linux 内核需要内核小组来维护世界上唯一的这个大家公认的分支。</p><p>我认为更重要的是共识基础上的平等和自由，区块链、去中心化、智能合约都是手段。</p><p>中心化和去中心化都是大自然的两类基本组织方式。自然界中，中心化的组织方式包括猴群、狼群、蜜蜂等，这些组织中有等级和分工。人类社会通常采用中心化的组织方式，一个国家、一个公司、一个互联网上的社交平台，都是有中心的。</p><p>而大自然中有的组织形式，比如鸟群、鱼群是没有无中心的，为什么海洋中的鱼群从个体上看都是随机、平等的，而从整体上看却是和谐的，如果来了捕食者，它们也能巧妙地避开。</p><p><img src="/images/ob_2022-06-07-133801.png" alt=""><br>这些鱼当中没有特定的领导，但是每个鱼都遵从相同的规则：不要远离同伴，但也不要离得太近，一直游，这就是它们的共识和自治。</p><p>你可以看看这两个视频里有趣的解释：</p><ul><li><a href="https://www.youtube.com/watch?v=dkP8NUwB2io">How do schools of fish swim in harmony?</a></li><li><a href="https://www.youtube.com/watch?v=Y-5ffl5_7AI">Lens of Time: Secrets of Schooling</a></li></ul><p>虽然现在区块链、Web3 这些领域有很多问题还未解决，也有很多人冲进去是为了搞钱，有的人把一些现在的业务稍微包装一下看起来像是 Web3 的，但我对未来协作、社交的改变保持乐观，因为我们能看到中心化的弊端。</p><p>我们已经有了很多围墙包围的精美花园，现在需要的是任何人都能自由玩耍的大森林，未来的互联网应该是更公平和自由。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近我看了些区块链、以太坊和 Web3 相关的资料，倒不是因为想从事这方面的工作，但我想稍微了解些技术热点。&lt;/p&gt;
&lt;p&gt;顺便写些文章锻炼一下费曼学习法，我想使用通俗易懂的语言来阐述自己的理解。如果我做到了让一个不懂计算机的人也大致明白了区块链是怎么回事，那我就成功了。&lt;
      
    
    </summary>
    
    
      <category term="比特币" scheme="http://catcoding.me/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
      <category term="区块链" scheme="http://catcoding.me/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="web3" scheme="http://catcoding.me/tags/web3/"/>
    
  </entry>
  
</feed>
