<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2022-02-15T04:35:55.920Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何高效使用 Obsidian</title>
    <link href="http://catcoding.me/p/obsidian-for-programmer/"/>
    <id>http://catcoding.me/p/obsidian-for-programmer/</id>
    <published>2022-02-15T10:58:30.000Z</published>
    <updated>2022-02-15T04:35:55.920Z</updated>
    
    <content type="html"><![CDATA[<p>好的东西忍不住分享给大家，今天给大家分享一下我如何使用 Obsidian 来提高效率，打造输入输出系统。</p><h2 id="Obsidian-是什么"><a href="#Obsidian-是什么" class="headerlink" title="Obsidian 是什么"></a>Obsidian 是什么</h2><p><a href="https://obsidian.md/">Obsidian</a> 是一个笔记软件，可能很多人不知道这个工具，因为相对来说比较新，2020.5 才出<a href="https://news.ycombinator.com/item?id=23324598">第一个 Beta 版本</a>。</p><p><img src="/images/ob_pasted-image-20220214234343.png" alt=""></p><p>创始人是一对小情侣 Shida Li 和 Erica Xu，还有一对可爱的猫咪。</p><p>我有点八卦啊，所以查了一下两位小朋友的背景，应该都是从小在加拿大成长的华人，上的大学都是 University of Waterloo。这个大学的计算机非常有名，以培养学生动手能力著名，本科毕业前两年可以去很多大公司实习，所以对学生找工作非常有帮助。他们两做出 Obsidian 之前已经折腾过了 10 来个副业项目，都是类似笔记、工具类的东西。所以，成功都不是随便就能达成的。</p><h2 id="Obsidian-的特点"><a href="#Obsidian-的特点" class="headerlink" title="Obsidian 的特点"></a>Obsidian 的特点</h2><p>现在笔记软件满天飞，为什么我选择 Obsidian。我认为 Obsidian 是特别适合程序员的工具，可以称之为<strong>笔记 IDE</strong>，其特点是：</p><ul><li><strong>Local-first and plain text</strong>;</li><li><strong>Link as first-class citizen</strong>;</li><li><strong>Make it super extensible.</strong></li></ul><p>这三个特点使得 Obsidian 变得独特，Notion 之类的不是本地化的，Roam Research 也不是本地化的，唯一和 Obsidian 有些类似的是  <a href="https://logseq.com/">Logseq</a>，而 Logseq 的插件系统应该是还在打磨，并没有形成 Obsidian 这样的生态。</p><h2 id="我的主要使用场景"><a href="#我的主要使用场景" class="headerlink" title="我的主要使用场景"></a>我的主要使用场景</h2><h3 id="基本编辑"><a href="#基本编辑" class="headerlink" title="基本编辑"></a>基本编辑</h3><p>Obsidian 用来编辑 Markdown 非常舒服，目前也支持了 Typora 那种实时预览的编辑方式。代码高亮没问题，贴图没问题，公式也可以支持，这些基本的东西默认已经足够好用。</p><p>通过一些插件的协助效率更高。我自己比较喜欢的插件是这些：</p><p><a href="https://github.com/tadashi-aikawa/obsidian-various-complements-plugin">obsidian-various-complements-plugin</a>，这个插件用来自动补全很多东西，这是一个日本人在维护的插件，issue 反馈很快。我在使用过程中也对这个插件做了一些贡献：<a href="https://catcoding.me/p/input-complement-algorithm/">自动补全算法</a>。</p><p><a href="https://github.com/chetachiezikeuzor/cMenu-Plugin">cMenu-Plugin</a>，在编辑页面加一些常见的 Markdown 格式按钮。</p><p><a href="https://github.com/zsviczian/obsidian-excalidraw-plugin">obsidian-excalidraw-plugin</a>，可以用来在 Obsidian 上画 excalidraw 格式的图，这是我最喜欢的画图工具，因为可以画出手绘风格的图。</p><p>还有些其他的辅助编辑的插件，大家可以自己去摸索。</p><h3 id="Daily-notes"><a href="#Daily-notes" class="headerlink" title="Daily notes"></a>Daily notes</h3><p>打开核心插件 Daily notes，绑定快捷键 <code>Ctrl-D</code> 到 <code>Open today&#39;s daily notes</code>，即可快速打开或者创建今天的日志，存放在一个自己设定的目录。</p><p>为什么一定要快捷键打开今天的日记页，因为我需要随手记录一点东西的时，这是个很好的选择，只有快才能不打断思维，并且形成习惯。</p><p>我使用双链和 Tag 来把记录的内容和我已有的记录关联起来，这样以后我在打开我的某个主题节点时，所记录的东西自然能找到。</p><h3 id="自动同步"><a href="#自动同步" class="headerlink" title="自动同步"></a>自动同步</h3><p>我的所有笔记自动同步到 Github 上的私有库，通过插件 <a href="https://github.com/denolehov/obsidian-git">obsidian-git</a> 自动定时 2 分钟同步一次，我经常工作的设备是 1 个 PC ，两台笔记本，一个手机。</p><p>虽然 Obsidian 有移动端 App，但我已经习惯自己做的 <a href="https://github.com/chenyukang/obweb">obweb</a>，我在自己的服务器上部署了这个应用，然后通过微信悬浮打开应用的网页。</p><p>虽然有几个设备上，因为同一时间我只在一个设备上工作，定时拉取这种粗暴同步方式的体验甚至好过了 OneNote。即使是偶然出现了一些冲突之类的事情，也就只是解决一下 Git 冲突的小事。</p><h3 id="QuickAdd"><a href="#QuickAdd" class="headerlink" title="QuickAdd"></a>QuickAdd</h3><p>QuickAdd 的概念应该是借鉴于 Emacs 的 org-mode。</p><p>简而言之就是我们可以预设一些文件格式、动作，让我们通过命令就可以快速创建文件，或者按某种格式记录内容，比如我设定了这些预设动作，通过命令运行某个命令，我就可以快速的记录一个 Todo，或者输入一个标题则开始写文章，或者是记录一个单词，或者是记录一个代码片段：</p><p><img src="/images/ob_pasted-image-20220215001825.png" alt=""></p><h3 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h3><p>Todo 的格式就是 Markdown 的 <code>- [ ]</code>，我用 Obsidian 管理 Todo 的好处在于，每个 todo 都有上下文，比如我可能是 Daily 里面记录了 Todo，也可能是网页浏览时留下了一些 Todo，这些 Todo 散落在各个文件，但是我可以通过一条   <a href="https://github.com/schemar/obsidian-tasks">obsidian-tasks</a> 语句生成一个 Task 视角，而在个 Task 视角上编辑就等于编辑了散落在各个文件里的 Todo，真是绝妙！</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">not done<br><span class="hljs-keyword">sort</span> by due desc<br><span class="hljs-keyword">description</span> <span class="hljs-keyword">includes</span> #<span class="hljs-keyword">write</span><br></code></pre></td></tr></table></figure><p>在 Obsidian 里显示为：<br><img src="/images/ob_pasted-image-20220215010029.png" alt=""></p><p>这种工作方式也是来自 Emacs 的 org-mode，但我觉得 Obsidian 的这些插件都做得更容易使用，毕竟不是谁都有心思去学习 elisp 来配置 Emacs 。</p><h3 id="网页标注"><a href="#网页标注" class="headerlink" title="网页标注"></a>网页标注</h3><p>网页标注是非常好的概念，这是我打通输入输出的必要工具。很多人喜欢收藏东西，用浏览器书签、知乎收藏夹之类的。因为收藏的时候没有自己写上标注和自己的理解，而且和自己的输入是隔离的，这样导致收藏的东西基本吃灰。</p><p>所以我们可以使用网页标注这种概念来把自己平时所看的东西变成输入。</p><p>网页标注我使用 <a href="https://sspai.com/post/63033">开源、可定制的网页批注工具 Hypothesis</a>，通过 Hypothesis 我可以在浏览网页的时候把某些内容高亮或者添加注释，然后通过插件 <a href="https://github.com/weichenw/obsidian-hypothesis-plugin">obsidian-hypothesis-plugin</a> 自动同步到我的知识库，这样我就可以在 Obsidian里面看到我的记录。</p><p>比如我在浏览这个网页的时候，我觉得内容不错，那我就写一点自己的评论，加上 #write  标签标识以后可能分享一下。</p><p><img src="/images/ob_pasted-image-20220215003848.png" alt=""></p><p>然后我的这个目录里面就会多出这么一条 Todo 记录，包含了网页的链接，我自己的备注等等信息：</p><p><img src="/images/ob_pasted-image-20220215003935.png" alt=""></p><p>这样的好处在于，我能通过上面类似的 <a href="https://github.com/schemar/obsidian-tasks">obsidian-tasks</a> 语句筛选出来我的写作备选想法。</p><p>我积累了好多平时冒出来的想法，以及浏览网页时觉得想分享的东西，有了这些输入我就一直有输出的材料，这也是为什么我最近写文章更多了。</p><p>顺便说一句，我贡献了这个插件的自动同步功能 ，记得用得时候想起我😊</p><hr><p>写了这么多，我觉得好多东西估计没讲明白，而且我还有好多好玩有用 Obsidian 的玩意，但是我已经写累了。</p><p>我逐渐意识到只有通过视频才能比较好阐明和演示，也许我以后会学着做一些视频，但是目前就先这样吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好的东西忍不住分享给大家，今天给大家分享一下我如何使用 Obsidian 来提高效率，打造输入输出系统。&lt;/p&gt;
&lt;h2 id=&quot;Obsidian-是什么&quot;&gt;&lt;a href=&quot;#Obsidian-是什么&quot; class=&quot;headerlink&quot; title=&quot;Obsidian
      
    
    </summary>
    
    
      <category term="工具，Obsidian" scheme="http://catcoding.me/tags/%E5%B7%A5%E5%85%B7%EF%BC%8CObsidian/"/>
    
  </entry>
  
  <entry>
    <title>一个小的里程碑</title>
    <link href="http://catcoding.me/p/small-milestone/"/>
    <id>http://catcoding.me/p/small-milestone/</id>
    <published>2022-02-12T20:12:37.000Z</published>
    <updated>2022-02-15T03:24:05.195Z</updated>
    
    <content type="html"><![CDATA[<p>我从元旦开始一直在休陪产假，所以在空余时间写了十多篇文章。今天是一个小的里程碑，因为读者数达到了 550 左右，感谢大家。</p><p><img src="/images/ob_pasted-image-20220212190053.png" alt=""></p><p>公众号超过 500 就可以开流量主了，可我不打算开了。我知道这赚不了几块钱，另一个原因是我认为这很影响阅读体验，我觉得阅读体验最好的是 Medium. com，干净的排版能让人静下来阅读长文。目前我还比较理想化，认为自己也是在构建一个<a href="https://www.zhihu.com/question/400660802">数字花园</a> ，不能忍受丑陋和不协调。</p><p>所有可量化的东西都是可以被管理和设定目标的，因为有反馈和量化，能让自己更有创作和分享的动力。<strong>如果你觉得内容对你有帮助和启发，欢迎转发、打赏</strong>。</p><p>在这段时间里，我的主业是帮老婆带孩子，这真的比上班还辛苦。我终于理解了我司有的人下班了还不回家，在公司多磨蹭磨蹭。当然更辛苦的是妈妈们，带孩子一直是她们的主业，而这个任务真的是不分昼夜，时时刻刻都得上心，很艰辛。所以各位程序员也对老婆们好点吧😉</p><p>下面谈谈我以后的更新计划和想法。</p><h2 id="为什么写"><a href="#为什么写" class="headerlink" title="为什么写"></a>为什么写</h2><p>写点东西也是有乐趣的，我之前也分享过这是抵抗焦虑的一个好方式。</p><p>我写博客也有十年了，但是之前大部分都是自己想怎么写就怎么写，我的个人域名丢了两次，所以中文博客并没有固定的读者。我经历过中文互联网开放分享的好年代，那时候大家可以通过博客交换链接，可以认识一些人。那时候很多人在开放的地方讨论问题。</p><p>而现在互联网的中文环境显然没那么好了，我认为主要有几个原因：</p><ol><li><p>移动互联网崛起，大家都在用各种 App 了，而这些 App 的内容是不能够被搜索到的，比如微信群，公众号，知识星球。</p></li><li><p>对质量有要求的作者会自己建站，百度的堕落导致中小站点基本没有流量，没有流量会让很多人没了分享的欲望。</p></li></ol><p>所以当我 2019 年想要好好写些内容时，我选择了写英文，顺便锻炼自己的英文写作能力。从 2019 年开始到 2021 年间，我写了一百多篇英文文章，有的发到 Medium上，这样能赚到一些钱，虽然不是那么多，但是通过英文撰写的练习大大提高了我写作的韧性。</p><p>我写的时候心态不同了，我会想着目标读者是谁，写的东西别人能否有收获，如何排版，如何用图等等，而这些都是中英文写作通用的。</p><p>2022 年我又开始写中文内容，大概是因为年纪大了有一些表达欲，而写英文终究还没达到情感表达的境界。因为受 <a href="https://www.swyx.io/learn-in-public/">Learn In Public</a> 的启发，我会让周围的人知道我在写东西，也会去尝试推广一下自己的内容。</p><h2 id="后续内容"><a href="#后续内容" class="headerlink" title="后续内容"></a>后续内容</h2><p>我还是会围绕自己想的编程技术，英语，写作，个人成长之类的主题写。现在技术类的公众号风评很不好，大家都说正经的技术人谁写公众号啊。我自己也不想做出一个自己讨厌的公号，所以我这里没有告诉你入职大厂的秘籍，我也不擅长那种面试，哈哈。</p><p>写作很重要的是真诚，如果我分享给你读者一定是我觉得好的东西。</p><p>我想做的是那种 NewsLetter 形式，口语化表达也可以。个人经历，体验，故事，所思，所想都是可以分享的，我自己也受到了很多人的个人分享的启发。</p><h2 id="关于风格"><a href="#关于风格" class="headerlink" title="关于风格"></a>关于风格</h2><p>我在写这段时间也在摸索和尝试，甚至我的领导老婆大人会这样指导我如何取标题：<br><img src="/images/ob_pasted-image-20220212195836.png" alt=""></p><p>我觉得这不是程序员风格，标题党看多了会让人生厌。所以我的标题估计大多还是直白的描述，排版也就是现在这样看起来简单即可，都是脚本程序自动生成的。</p><p>可以看到我的号是没有评论的，这是因为 2018 年后开的都是没有，需要花 3000 多去买一个有留言功能的公号，然后再迁移过来。</p><p>这是我觉得匪夷所思的事，如果想留言可以选择阅读原文到我的博客上留言，或者加我微信沟通。</p><h2 id="更新节奏"><a href="#更新节奏" class="headerlink" title="更新节奏"></a>更新节奏</h2><p>现在我已经恢复上班了，除工作之外还得照顾两个孩子，所以时间上我大概只能每周更新两篇，计划一篇是纯自己写的分享，一篇是集合我一周所看的好的文章和资料加上自己的见解。</p><hr><p>我不知道自己能这样写多久，看起来经过一段时间的刻意培养，我现在已经形成了习惯，有时候我抱着娃的时候可能是在写腹稿，有时候睡觉突然觉得某个话题有些意思，所以这些就积累记录下来了。阅读、写作算是性价比很高的精神食粮了。</p><p>好吧，今天就写到这里，这些是我陪孩子在游乐园玩耍的时候敲出来🙌。</p><p>欢迎点赞，打赏，分享，你的激励是最好的反馈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我从元旦开始一直在休陪产假，所以在空余时间写了十多篇文章。今天是一个小的里程碑，因为读者数达到了 550 左右，感谢大家。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220212190053.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="公众号" scheme="http://catcoding.me/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>你想编程到 60 岁么？</title>
    <link href="http://catcoding.me/p/coding-to-60/"/>
    <id>http://catcoding.me/p/coding-to-60/</id>
    <published>2022-02-09T18:25:08.000Z</published>
    <updated>2022-02-10T06:57:02.418Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220209180145.png" alt="Photo by Krys Amon on Unsplash"></p><p>今天看了篇文章关于大龄程序员的：</p><p><a href="https://larshaendler.medium.com/software-engineer-and-hitting-40-how-to-set-up-for-another-20-years-of-coding-f97731a5463b">Software engineer and hitting 40, how to set up for another 20 years of coding</a></p><p>不只是中国，其实整个世界的 IT 行业都有年龄焦虑，奔四的程序员算是稀有物种。这篇文章写了几个建议给那些打算编程到 60 岁的人。</p><p>到了一定年龄很多人的想法是转管理岗，并不是所有人都能转到管理岗位。这不只是因为管理岗位更少，管理岗位的职位核心要求和工程师不同，很多人不适合管理，也有很多人不能忍受管理的工作内容。</p><p>文中提到管理岗位的一个核心能力是：</p><blockquote><p>Thinking about abstract problems and discussing them in endless meetings with non-tech people requires something nobody told us in school or university: suffer endlessly without complaining.</p></blockquote><p>这点不管是国内还是国外都是大同小异的。</p><p>作为大龄程序员我们的优势是经验：</p><blockquote><p>Being 20 years in software engineering gives you the <strong>super power of seeing patterns</strong>. </p></blockquote><p>作者的一个建议是维护历史遗留代码也是个好的选择。我看评论里面有很多人喷这一点，但我倒觉得这确实算个选项，不过前提是：</p><ul><li>所在的公司稳定，通常是大公司</li><li>在有长久生命力的产品线</li></ul><p>比如在微软我就见过一些 60 岁左右的老工程师，他们的职业生涯几乎就在做一个产品，像 SharePoint 这样的产品已经 20 年了，他们从青年到老头，是对这个系统最了解的人，只要产品还在运行，他们就是不可替代的。</p><p>另外，年纪大了之后不容易被打鸡血、也不容易被画饼，所以如果上班就得找那种和自己三观贴合的公司，否则不适合长待。</p><p>文中的另外两个建议就是保持健康，包括身体和精神上的健康。</p><p>年纪大了，首要的健康问题通常是体重，程序员的肩膀、颈椎也容易出问题。我们可能不适合激烈的体育运动，不适合熬夜刷剧之类的，需要找到适合自己的放松方式。我年轻的时候很喜欢打蓝球，现在居然没什么很大兴趣了，我现在喜欢游泳，这对缓解肩膀酸疼很有效。</p><p>另外一方面，找一些能让自己精神上保持充沛的事情：</p><blockquote><p><strong>You need to challenge your mind constantly.</strong> Otherwise it gets fat and lazy too. Don’t always go the easy way. Try building stuff, try coding stuff and get your hands dirty with real hardware. Ask questions online, document your journey and talk to friends about it. It is that easy to get execited again about the things that brought you into software engineering in the first place.</p></blockquote><p>对我来说，写些文章是个兼有放松和自我提高的事情，所以我要一直写下去。40 岁之后家庭生活会占据很多时间，特别是孩子。养孩子是痛并快乐着吧，有时候觉得带孩子很耗费时间和精力，但陪孩子也是一种另类的放松。</p><p>在评论里有很多年纪大的工程师留言，大多是描述自己还乐于其中吧。</p><p>那些到 60+ 还在编程的人，我不知道国内有多少这样的程序员，看起来硅谷还是有一些，而且这些人不缺钱、也不缺机会：</p><p><img src="/images/ob_pasted-image-20220209174912.png" alt=""></p><p>很多人说 IT 行业很累，35 岁就要淘汰了。做什么工作都有累的方面，我身边一些亲戚朋友有在医院，有创业的，有做生意的，聊下来我觉得他们很累。相对来说，在 IT 行业如果不去卷的地方也不至于很累。</p><p>想要编程到 60 岁么？看完文章和评论，我的感受是：<strong>除非你能找到这行的乐趣，还得注意健康，不然绝对坚持不到 60 岁，甚至很难坚持到  40 岁</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220209180145.png&quot; alt=&quot;Photo by Krys Amon on Unsplash&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天看了篇文章关于大龄程序员的：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="职业发展" scheme="http://catcoding.me/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>如何高效阅读源代码</title>
    <link href="http://catcoding.me/p/learn-from-source-code/"/>
    <id>http://catcoding.me/p/learn-from-source-code/</id>
    <published>2022-02-07T16:43:08.000Z</published>
    <updated>2022-02-11T06:59:03.205Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章最初是我 2019 年写的英文版本：<a href="https://coderscat.com/learn-from-source-code/">Learn from Source Code (an Effective Way to Grow for Beginners)</a></p><p>后来陆续到一些读者的积极反馈，所以我最近把这篇翻译为中文，在翻译的过程中我又顺便重写和简化了一部分。</p><h2 id="为什么要读代码"><a href="#为什么要读代码" class="headerlink" title="为什么要读代码"></a>为什么要读代码</h2><p>工作多年后，我觉得自己很多时间花费在了阅读代码上。<strong>能高效地理解代码是一个程序员的核心技能</strong>，这种能力与具体的技术栈没有关系，而是一种通用的、可迁移的能力。</p><p><img src="/images/ob_pasted-image-20220205110149.png" alt="source CodeDoesMeme"></p><p>我们教编程的方式注重在写代码的技能，而不是如何读代码。<em>这里的“读代码”指的是刻意地、有目的地去阅读源代码</em>。</p><p>编程和写作有很多共同点，<strong>我们通过文字或代码表达想法</strong>，Donald Knuth 之前还倡导过文学编程的编程范式。</p><p>还记得我们在学校是如何学习写作的吗？从小学开始开始，我们需要阅读各种优秀作家的文章，并从中学习各种写作技巧。读书破万卷，下笔如有神。</p><p>和看书一样，有目的地阅读代码会帮助程序员更快地成长(尤其是对于初中级程序员)。</p><p>刻意读代码至少有三个好处：</p><h3 id="站在巨人的肩膀上"><a href="#站在巨人的肩膀上" class="headerlink" title="站在巨人的肩膀上"></a>站在巨人的肩膀上</h3><p>读史使人明智，读诗使人灵透。</p><p>好的源代码就像一部文学杰作，不仅仅包含信息和知识，也是好的启蒙。在 Linux Kernel、Redis、Nginx、Rails 这些伟大的开源项目中，可以找到无数优秀的编程技巧、范式选择、设计架构，阅读这些代码你可以汲取全球顶级程序员的技巧和智慧。</p><p>读源码的另一个好处是能够避免常见的陷阱，因为软件开发中的大多数错误已经被其他人犯过。<br><img src="/images/ob_pasted-image-20220205110206.png" alt=""></p><h3 id="解决难题"><a href="#解决难题" class="headerlink" title="解决难题"></a>解决难题</h3><p>在你的整个编程生涯中，肯定会遇到无法通过谷歌搜索解决的问题，阅读源代码通常是解决这类问题的好方法，这也是学习新东西的好机会。</p><p><img src="/images/ob_pasted-image-20220205110225.png" alt=""></p><h3 id="拓展见识"><a href="#拓展见识" class="headerlink" title="拓展见识"></a>拓展见识</h3><p>大多数程序员只是工作在几个特定领域。一般来说，如果你不持续地逼迫自己拓展知识面，你的编程能力将趋于同事的平均水平。</p><p>作为程序员，如果要持续成长就要不断尝试自己感兴趣的新领域，从深度和广度拓展对编程的理解。</p><h1 id="读什么代码"><a href="#读什么代码" class="headerlink" title="读什么代码"></a>读什么代码</h1><p>现在有这么多优秀的开源代码可供选择，我们应该阅读什么样的源代码？</p><p>我们通常是带着目的去阅读源码的，那么有以下是几个典型场景：</p><h3 id="要学习一门新的编程语言时"><a href="#要学习一门新的编程语言时" class="headerlink" title="要学习一门新的编程语言时"></a>要学习一门新的编程语言时</h3><p>学习一门新的编程语言不仅仅意味着学习语法，更需要学习如何完成一些常见的编程任务。这需要读一些小型项目，比如 Learn xxx By Examples 之类的。</p><p>我从 <a href="https://github.com/rust-rosetta/rust-rosetta">rust-rosetta</a> 项目中学到了很多关于 Rust 的知识，Rosetta Code 收集各种编程语言中常见任务的示例代码，这是学习新编程语言的有用资源。</p><p><img src="/images/ob_pasted-image-20220205110252.png" alt=""></p><h3 id="要理解具体技术的实现时"><a href="#要理解具体技术的实现时" class="headerlink" title="要理解具体技术的实现时"></a>要理解具体技术的实现时</h3><p>我们都使用了标准库中的 sort 函数，你有没有想过它是如何实现的？或者说你需要在 Redis 中使用 Set 数据结构，它的实现中用到了哪些数据结构？</p><p>那你需要读标准库的源码或者 Redis 的源码，通常我们关注的是几个文件或函数。</p><p>当你比较熟练使用某个框架后，可以尝试去阅读框架某些组件的源代码，这样可以加深对框架的理解。</p><h3 id="要学习一个新领域时"><a href="#要学习一个新领域时" class="headerlink" title="要学习一个新领域时"></a>要学习一个新领域时</h3><p>这时候适合阅读该领域的经典项目，不要选择太大的项目，可以从优秀的开源课程开始。</p><p>假设你想学习分布式系统，<a href="https://pdos.csail.mit.edu/6.824/">MIT 的分布式课程</a>是很好的课程，里面也有几个经典的大作业。如果你了解 Golang，那么 etcd 可能是个不错选择。</p><p>你想深入了解操作系统的内部实现吗？直接读现在的 Linux Kernel 版本肯定会让新手摸不着北，那么 <a href="https://pdos.csail.mit.edu/6.828/2012/xv6.html">Xv6</a> 或者 Linux Kernel 的早期版本会是一个好的开始。</p><p>想学编译器实现？也许可以看看 <a href="https://github.com/rui314/9cc">rui314/9cc</a>。 </p><p>在 Github 上拥有许多好的的教学性质的开源项目，也有一些重造轮子类的项目，可以尝试 “tiny + 关键词”  或者 “make your own + 关键词” 这样来搜索。</p><p>根据你当前的技能和知识水平选择项目。如果你选择的项目远高于你当前的技能水平，结果会迷失在源码中而受到打击，那么先阅读一些较小的项目，然后继续读较大的项目。</p><p>如果你花了一段时间都无法理解代码，这通常意味着你欠缺背景知识，那么先把代码放在一边，试着阅读一些书籍、论文或相关文档，等有信心了再回来。</p><p>比如我如果一股脑直接去看 Raft 的代码就会很吃力，所以我得先看 <a href="https://raft.github.io/">Raft 配套的文档和论文</a>。</p><p><strong>真正的成长，是始终游走在“舒适区边缘”</strong>。我们总是以这样的模式取得进步：阅读（代码、书籍、论文）、写代码、读更多、写更多。</p><h1 id="如何阅读源代码"><a href="#如何阅读源代码" class="headerlink" title="如何阅读源代码"></a>如何阅读源代码</h1><p><img src="/images/ob_pasted-image-20220205110316.png" alt="source unsplash.com"></p><p>阅读代码并不容易，我们得试图理解代码中的设计和思想，需要比较长时间的精神专注。为了有效地阅读代码，最好准备以下这些技能和工具：</p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>能够高效地使用编辑器，例如快速搜索关键字、查找变量和函数的相关引用。最好能对编辑器熟悉到仅使用键盘来操作，这将使你专注于代码而不会中断思维。</p><p>基本掌握 Git 或其他版本控制工具，比如比较不同版本之间的差异。</p><p>找到所有源码相关的文档，尤其是设计文档、代码约定等。</p><p>对所用编程语言有所了解，如果是阅读大型项目，需要了解设计模式。</p><p>当然，这些也需要在常年地读写代码中积累经验，保持耐心。</p><h2 id="流程和技巧"><a href="#流程和技巧" class="headerlink" title="流程和技巧"></a>流程和技巧</h2><p>读代码的过程和读书有些差别，读书我们通常按照章节的线性顺序去读，如果读代码也是这样从头读到尾则容易瞌睡，而且效果也不好。</p><p>大多数时候我们根据项目的组织，自顶向下、或者自底向上地读代码，很多时候我们的注意力只是专注在少数源文件上。</p><p>以下是一些更有效地阅读代码的技巧：</p><h3 id="带着问题阅读代码"><a href="#带着问题阅读代码" class="headerlink" title="带着问题阅读代码"></a>带着问题阅读代码</h3><p><img src="/images/ob_pasted-image-20220205110332.png" alt="source unsplash.com"></p><p>当你开始阅读代码时，可以尝试抛出一些问题。例如，一个应用程序有一个缓存策略，一个很好的问题是如果缓存失效会发生什么，缓存中的值是如何更新的？</p><p>这样就能在心中确定一个目标，你也可以对自己问题做出一些猜想，然后根据代码验证猜想，这有点像侦探：你想理解代码的真相和逻辑，这就像是找一个故事的真相。</p><p>读代码的经验多了，就能不断抛出各种问题，引导自己不断地挖掘代码，最终的阅读顺序倒不重要了，因为我们是随着自己的好奇心读懂了整个项目。</p><h3 id="运行和调试代码"><a href="#运行和调试代码" class="headerlink" title="运行和调试代码"></a>运行和调试代码</h3><p>写代码的过程有点像搭积木，而已经完成的代码就像一个组装好的乐高。</p><p>如果你想了解它是如何组合在一起的，一个好的办法是沿着提交记录来理解，这时候版本控制工具就很有用了。</p><p>假设我想看某个特定功能是如何实现的，我可以根据提交日志，尝试读 Git 的提交记录。我发现 Lua 的第一个版本要简单得多，这有助于我理解作者最初的设计思想。</p><p><img src="/images/ob_pasted-image-20220205110347.png" alt=""></p><p>调试是另一种理解代码的方式，可以尝试在代码中添加一些断点（或打印语句），把代码运行起来。如果对代码有足够的了解，我们也可以尝试进行一些修改，最简单的是尝试调整配置看看效果，然后逐步尝试添加一些小的功能，如果结果对其他人也有用，可以顺便做些开源贡献。</p><h3 id="画出代码里的关系"><a href="#画出代码里的关系" class="headerlink" title="画出代码里的关系"></a>画出代码里的关系</h3><blockquote><p>“糟糕的程序员担心代码，优秀的程序员会担心数据结构和他们的关系。”</p><p>– Linus Torvalds</p></blockquote><p>在读代码的过程中，用笔或任何工具画出数据结构、模块之间的关系、主要的流程图等。这就像是源代码的地图，在阅读过程中你可能需要经常参考这些地图和索引。</p><p>scitools 等一些工具可用于自动生成 UML 图，我最喜欢的画图工具是 <a href="https://excalidraw.com/">Excalidraw</a>，<a href="https://www.processon.com/">ProcessOn</a>。</p><h3 id="注意模块和边界"><a href="#注意模块和边界" class="headerlink" title="注意模块和边界"></a>注意模块和边界</h3><p>大型项目中通常包含多个模块，在设计良好的项目中一个模块通常具有单一职责，它的变量和函数以一种可读的风格命名，这也使得代码更容易维护。</p><p>模块的接口是抽象边界，我们可以忽略掉那些我们暂时不关心的模块。和《如何阅读一本书》中介绍的精读和泛读一样，自己感兴趣的部分精读，其他部分则泛读，这将大大节省整体时间。</p><p>模块也不止是按照目录来组织的，如果你正在阅读使用 GNU Make 构建的 C/C++ 项目，Makefile 将是了解模块组织方式的一个很好的入口。</p><h3 id="使用测试用例"><a href="#使用测试用例" class="headerlink" title="使用测试用例"></a>使用测试用例</h3><p>测试用例也是理解代码的一个很好的补充，我认为测试用例也是一种文档。像 Rust 就很好，测试和实现通常在一块。</p><p>如果读一个类，试着读一下相关的测试代码，这可以让你弄清楚一个类的接口以以及它的典型用法。集成的测试用例对于调试带有某些特定输入的代码也很有用，它可以让你跟踪程序的整体流程。</p><h3 id="回顾和总结"><a href="#回顾和总结" class="headerlink" title="回顾和总结"></a>回顾和总结</h3><p>花了很长时间读一个项目，为什么不写篇文章阐述一下自己的理解？</p><p>这就像在写读书的读后感，你可以写下源代码中的好坏，以及你从中学到的新东西。教授别人是一种最好的学习方式，写这样的文章会加深你的理解，也有助于其他人阅读源代码。</p><p>我当初在花了好一段时间阅读 Kong 的源码后，写了一系列关于 Kong 的文章：<a href="https://catcoding.me/2017/07/02/kong-intro.html">Kong源码分析</a><br><img src="/images/ob_pasted-image-20220206105523.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写了这么多，我发现代码阅读比想象的要复杂得多，没有标准的、系统的方法来训练这项技能。总而言之，<strong>不断练习读代码，找到适合自己的方法和工具，读得越多就会越快、越高效</strong>。</p><p>最后推荐两本提高读代码能力的好书：</p><ul><li><a href="https://book.douban.com/subject/1052241/">设计模式</a></li><li><a href="https://book.douban.com/subject/30333919/">架构整洁之道</a>                                                    </li></ul><p>如果喜欢这篇文章，记得分享、点赞 👻</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章最初是我 2019 年写的英文版本：&lt;a href=&quot;https://coderscat.com/learn-from-source-code/&quot;&gt;Learn from Source Code (an Effective Way to Grow for Beginn
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DeepMind 发布 AlphaCode ，技术奇点要到来了？</title>
    <link href="http://catcoding.me/p/on-alphacode/"/>
    <id>http://catcoding.me/p/on-alphacode/</id>
    <published>2022-02-04T09:49:57.000Z</published>
    <updated>2022-02-05T01:55:02.246Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到一个新闻，DeepMind 的 AlphaCode 发布: <a href="https://deepmind.com/blog/article/Competitive-programming-with-AlphaCode">Competitive programming with AlphaCode</a>，并且在 Codeforces 的编程比赛中模拟参加比赛，居然能达到中等竞赛者水平。</p><p><img src="/images/ob_pasted-image-20220204083843.png" alt=""></p><p>我对此有些震惊，因为编程竞赛绝对是有<strong>创造性</strong>的智慧活动，现在 AI 竟然已经发展到了程序能自动生成一些有意义的完整程序。</p><p>当我们谈到人工智能的创造性时，通常会想到人工智能来创造艺术作品，比如下面这副 AI 画出来的：</p><p><img src="/images/ob_pasted-image-20220204103649.png" alt="Art and Artificial Intelligence Laboratory, Rutgers University"></p><p>因为在艺术上，很难有一个绝对的标准来衡量这东西到底是好还是坏。但是 AI 生成程序是有绝对的衡量标准，就是生成的程序是否是对的。</p><p>AlphaCode 和以前的 AlphaGo 也不同，围棋的规则简单而确定，只是在下棋过程中搜索空间巨大，AlphaGo 做的事是从巨大的搜索空间中尽量选择合理的下一步。</p><p>你可以说生成代码也是一个搜索问题，在生成每一个字符串时我们都要从 52 个字母加符号中选择下一个字符，其目标是生成一个可以编译运行、解决问题的程序。</p><p>其中的细微差别是，在围棋的中间步骤中，我们都可以通过<strong>评估函数</strong>来衡量当前局势对于目标的距离，就是判断当前局势对谁更有利。</p><p>而在代码自动生成中，这种评估函数并不存在，目前已经生成的代码片段即使包含部分错误，也可以在后续代码片段中修复，所以不到整个程序生成完整，我们没法知道目前做的是对还是错。</p><p>这看起来是一个 Copilot 的更强本版，因为 Copilot 是根据目前写的代码片段和注释，补充新的代码片段，但是 AlphaCode 的输入完全是问题的描述，输出是解决问题的完整代码。</p><p>比如例子中的这个编程问题，上面是输入，下面是输出：</p><p><img src="/images/ob_pasted-image-20220204083502.png" alt="AlphaCode"><br>另外 Copilot 可能是会生成训练集里面的某些代码片段，简单说就是 AI 之前看过某个代码片段，所以在某些场景下背出了这个代码。而从 <a href="https://storage.googleapis.com/deepmind-media/AlphaCode/competition_level_code_generation_with_alphacode.pdf">DeepMind 发布的论文</a>看，AlphaCode 不会完全重复生成训练集中的训练代码。</p><p>那这种工具如果更完善后是否会彻底改变编程？难道我们已经快到<a href="https://en.wikipedia.org/wiki/Technological_singularity">技术奇点</a>了么？</p><blockquote><p>技术奇点（英语：Technological Singularity），出自奇点理论；根据技术发展史总结出的观点，认为人类正在接近一个使得现有技术被完全抛弃或者人类文明被完全颠覆的事件点。例如，意识上传技术可能使人类的意识摆脱有机体的约束，或者人来开发出可以自我进化、有自由意识的人工智能，在这个奇点之后的人类文明将发展到当今完全无法理解的水准。</p><p>之所以被称为奇点，因为它是一个临界点。当我们越来越接近这个临界点，它会对人类的事物产生越来越大的影响，直到它成为人类的共识。但当它最终来临的时候，也许仍会出人意料并且难以想象。</p></blockquote><p>我仔细思考了好一会儿，我的结论是<strong>这种工具也许能极大的拓展编程的范围，也可能会改变程序员的工作内容，但离自动编程还差很远</strong>。</p><p>首先，AlphaCode 也许会提高程序员的工作效率，改变人类学习编程的过程。</p><p>我之前对 Copilot 之类的工具持悲观的态度，甚至认为除了酷炫估计对日常开发没什么帮助，参考<a href="https://www.zhihu.com/question/468950598/answer/1971619358">我关于 Copilot 的知乎回答</a>。</p><p>后来我感觉自己被打脸。收到 Copilot 试用邀请后，我在实际开发中使用了大概半年，结果是超乎我的意料。Copilot 和之前我用的代码补全类工具有一些差别，它看起来能猜测我的编码意图，从而进行有意义的补全。</p><p>特别是当我使用一个不是很熟悉的编程语言时，我敲一些关键词 Copilot 可以帮我补全剩下的代码，这节省了我自己去 Google 搜索的时间。即使这没有从根本上解决编程的难点，也能很大程度上让编程变得更愉悦。</p><p>如果有完美的 AlphaCode，它就是一个 Transformer，输入是英语，输出是程序。</p><p>作为程序员我们的日常工作可能会变成向这个 Transformer 表述我们的意图，所以一个会说英文的人，也许就能生成一些有意义的程序，这就是为什么我说编程的范围扩大了，或者我们学习编程的方式改变了。</p><p>比如 <a href="https://openai.com/blog/openai-codex/">OpenAI Codex</a> ，我们只需要输入想要的 HTML 效果，Codex 自动生成对应的 JavaScript 代码。</p><p><img src="/images/ob_pasted-image-20220204092609.png" alt="Codex"></p><p>但是，它也终究只是一个输入不同的、人造的 Transformer，我们现在的编译器或者解释器也可以理解为 Transformer,  只是输入的是某个编程语言的源代码，这个源代码是程序员按照编程语言的语法写出来的，程序员是个智能的 Transformer。</p><p><img src="/images/ob_pasted-image-20220204090555.png" alt=""></p><p>自然语言是比编程语言更大的一个集合和维度，所以同样目的的代码，如果从自然语言角度来直接生成，会变得更为繁琐，而且不精准。</p><p>在 DeepMind 的论文中也提到了，AlphaCode 的一个问题就是:</p><blockquote><p>Sensitivity to problem descriptions<br>….<br>solve rate goes down dramatically when  given related but different problems, and is not very affected by different ways of describing the same  the problem.</p></blockquote><p>现有的代码生成技术，我们通常会限制输入语言的范围或者规则，这样就是一个<a href="https: //zh.wikipedia.org/wiki/%E9%A2%86%E5%9F%9F%E7%89%B9%E5%AE%9A%E8%AF%AD%E8%A8%80">领域特定语言 : DSL</a>。恕我直言，现在这些鼓吹的低代码，无非就是套壳的领域特定语言。</p><p>作为一个程序员，我也许会使用这种自然语言生成代码的技术来辅助编程，但不可能完全使用这个写代码，我还不担心自己会失业。</p><p><img src="/images/ob_pasted-image-20220204093409.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天看到一个新闻，DeepMind 的 AlphaCode 发布: &lt;a href=&quot;https://deepmind.com/blog/article/Competitive-programming-with-AlphaCode&quot;&gt;Competitive programm
      
    
    </summary>
    
    
      <category term="技术" scheme="http://catcoding.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Elon Musk, 不想让大家看到你的飞行路线？请支付 5 万美金。</title>
    <link href="http://catcoding.me/p/musks-jet/"/>
    <id>http://catcoding.me/p/musks-jet/</id>
    <published>2022-02-02T19:12:56.000Z</published>
    <updated>2022-02-04T02:59:03.277Z</updated>
    
    <content type="html"><![CDATA[<p>你想知道 Elon Musk 的实时位置么？</p><p>关注 <a href="https://twitter.com/elonjet">Elon Musk’s Jet (@ElonJet) / Twitter</a> 就行了，这个 Twitter 账号每天都会发布 Elon Musk 的每一次私人飞机的行踪，详细到每次飞行的起飞时间、落地时间、和降落机场。</p><p>这不，Musk 最近降落在 Brownsville，Texas。</p><p><img src="/images/ob_pasted-image-20220202113030.png" alt=""></p><p>这个 Twitter 账户是一个名叫作 Jack Sweeney 的 19 岁大学生维护的。他不止维护了 Musk 的飞行跟踪数据，也维护了 <a href="https://twitter.com/gatesjets">Bill Gates’ Jets (@GatesJets) / Twitter</a> 和 <a href="https://twitter.com/bezosjets">Jeff Bezos’ Jets (@BezosJets) / Twitter</a> 等其他富豪的数据。</p><p>不过 Musk 的数据是人们最感兴趣的，这个 Twitter 账户的粉丝数已经接近 30 万。作为亿万富豪，自然不想让自己的隐私暴露在公开场合。Musk 去年也关注到了这个 Twitter，然后直接给 Jack Sweeney 发消息：</p><ul><li>Musk: Can you take this down? It is a security risk. I don’t love the idea of being shot by a nutcase,</li><li>Jack:  Yes I can but it’ll cost you a Model 3 only joking unless?<br>………</li><li>Musk：Ok, how about $5K for this account and generally helping make it slightly harder for crazy people to track me?</li><li>Jack: Any chance to up that to $50k? It would be great support in college and would possibly allow me to get a car maybe even a Model 3.</li><li>Musk: I’d think about it</li></ul><p>中间 Jack 解释了如何获取这些数据的，如果不要钱给个实习机会也是可以的。</p><p>虽然 5w 美金对于 Musk 也是九牛一毛吧，不过估计是感觉自己被敲诈了，他最后回复说 “Doesn’t feel right to pay to shut this down”，然后把 Jack 同学拉黑了。</p><p>我就比较好奇 Jack 是如何获取这些信息的，于是搜索了一把。</p><p>Jack 的父亲在航空行业工作，所以从小耳濡目染，他对这些也很感兴趣，喜欢识别飞机型号和跟踪飞机轨迹。他刚刚高中毕业，大学选择的专业也是航空航天工程。因此他对这些了如指掌。</p><p><img src="/images/ob_pasted-image-20220202191124.png" alt=""></p><p>美国联邦航空管理局提供<a href="https://ladd.faa.gov/">LADD (匿名化的飞机数据显示)</a>，这些数据是公开的，只是富豪们的个人信息是被脱敏的，Jack 需要根据更多信息来交叉验证。</p><p>目前他主要使用 ADS-B (Automatic dependent surveillance – broadcast), 飞机通过卫星导航系统确定其位置，并进行定期广播，使得飞机可以可被追踪。数据来源这两个网站：</p><ul><li>ADS-B Exchange data：<a href="https://www.adsbexchange.com/">Serving the Flight Tracking Enthusiast - ADS-B Exchange</a>，社区维护的飞行跟踪数据平台，非盈利。</li><li>OpenSky ： <a href="https://opensky-network.org/">The OpenSky Network - Free ADS-B and Mode S data for Research</a>，2012 年开始，由几个大学、政府组织联合创建的飞行数据收集平台，主要用于优化和改进飞行管控和研究。</li></ul><p>甚至他的代码也是公开的，感兴趣的可以看看这个代码项目：<a href="https://github.com/Jxck-S/plane-notify">Jxck-S/plane-notify</a>。</p><p>有的人指责 Jack 同学干的事情不地道，侵犯他人隐私。 Jack 反驳到他获取数据的途径都是合法的，并且这些数据也是可以被公开分享，该指责的是 ADS-B 不够安全。</p><p><img src="/images/ob_pasted-image-20220202123934.png" alt=""></p><p>这个事情虽然有点小八卦，我觉得可以从事件学到两点。</p><ul><li>个人兴趣是最好的老师，Jack 说自己通过这个项目来学习编程，而且目前自己也乐于其中，这里面的满足感超过 5w 美金。</li><li>数据公开程度超过很多人想象，个人隐私是个难以解决的问题。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你想知道 Elon Musk 的实时位置么？&lt;/p&gt;
&lt;p&gt;关注 &lt;a href=&quot;https://twitter.com/elonjet&quot;&gt;Elon Musk’s Jet (@ElonJet) / Twitter&lt;/a&gt; 就行了，这个 Twitter 账号每天都会发布 E
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>如何无痛苦更新公众号</title>
    <link href="http://catcoding.me/p/publish-to-wechat/"/>
    <id>http://catcoding.me/p/publish-to-wechat/</id>
    <published>2022-01-30T22:57:42.000Z</published>
    <updated>2022-02-04T02:59:03.277Z</updated>
    
    <content type="html"><![CDATA[<p>这个月我刚好完成自己设置的 30 天写作挑战，从结果上看，我达成了 3/4 每日更新的目标。</p><p>这其中有几天，我实在是厌烦了公众号编辑和发布流程。</p><p>和很多技术人员一样，我习惯使用本地的 Markdown 编辑器编辑文档，在发布到公众号之前我已经有一套自己的 Github 流程来自动发布文章到我的博客。</p><p>这个流程实现的效果是每次我本地编辑完文章，Github Action 都会触发我写的脚本生成静态的 HTML，发布到 Github Pages。</p><p>但是在尝试更新公众号这段时间，我一度非常挣扎。我看大家的做法都是使用<a href="https://mdnice.com/">mdnice</a> 一类的在线排版工具，复制粘贴到公众号的后台编辑器。</p><p>最痛苦的是图片！因为目前市面上也没什么免费的图床，即使拷贝了排版好的内容，图片还需要一张一张再上传到公众号，</p><p>在持续更新了十多篇文章之后，我就觉得非常琐碎而无聊，刚好那几天有很多其他杂事，因此我断更了几天。</p><p>后来我搜索了一把，发现有个 Python 包 <a href="https://werobot.readthedocs.io/zh_CN/latest/">WeRoBot</a> 可以通过 API 上传文章和图片到公众号的资源库，所以我花了点时间自己写了一个 Python 脚本 <a href="https://github.com/chenyukang/markdown-to-wechat">markdown-to-wechat</a>，在我自己的服务器上定时拉取我的 Github repo，如果有新文章则自动同步到公号。</p><p>这个代码写得很丑，因为我硬编码了很多 HTML css ，不过真的是太实用了。现在我的写作流程是这样：<br><img src="/images/ob_pasted-image-20220130223622.png" alt=""></p><p>整个过程中除了本地写文章，其他都是自动化实现的。</p><p>公众号是一个封闭的系统，还有诸多限制，比如外链嵌入，比如发布后修改只能一次，这些都是违反互联网开放精神。我目前做的就是任何我发布到公众号的文章，在 catcoding.me 上都有原版，如果后续我修改了文章会自动更新到网页版本。</p><p>我在 <a href="https://catcoding.me/2021/11/23/my-notes-taking-tools-and-experience.html">知识管理工具和经验</a> 提过，最适合自己的工具永远是自己私人定制的，只有工具和流程做到完美配合，才能达到最好的效率。</p><p>懒惰是程序员最好的美德，我们要把琐碎的、重复的事情自动化，这样才能把精力放在需要创意的地方。</p><p>这不，这样折腾好之后，我现在每天写点什么的习惯都养成了😉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个月我刚好完成自己设置的 30 天写作挑战，从结果上看，我达成了 3/4 每日更新的目标。&lt;/p&gt;
&lt;p&gt;这其中有几天，我实在是厌烦了公众号编辑和发布流程。&lt;/p&gt;
&lt;p&gt;和很多技术人员一样，我习惯使用本地的 Markdown 编辑器编辑文档，在发布到公众号之前我已经有一
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="公众号" scheme="http://catcoding.me/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>学习编程难？先解决量的问题</title>
    <link href="http://catcoding.me/p/entry-for-learning-programming/"/>
    <id>http://catcoding.me/p/entry-for-learning-programming/</id>
    <published>2022-01-29T11:24:27.000Z</published>
    <updated>2022-02-04T02:59:03.277Z</updated>
    
    <content type="html"><![CDATA[<p>今天分享一下自己这些年来学习编程的一些体会，来阐述一个朴素的道理和原则。而好多初学者并不太明白这个道理，所以在学习过程中会有迷茫感。</p><p>我是 2004 年上的大学，当时读的是信息安全专业。在上大学之前我没怎么用过计算机，可以说是完全的小白，而且我觉得自己的数学一般，算是一个资质平平的小白。</p><p>当年我们学校还规定大一新生不准自己带电脑进宿舍，所以大学第一年我也没怎么写过代码。我记得当时我们上 C 语言的课，每周大概有一两次去学校机房敲代码，机房里装的是 Turbo C，至今印象深刻。</p><p><img src="/images/ob_pasted-image-20220128151154.png" alt=""></p><p>因为我完全是小白，键盘都不太熟悉，所以我是完全照着书上面的例子敲的。</p><p>而后的三四年里，我买了自己的台式机，平时也写了一些简单程序，但我花费了更多的时间去折腾 Linux 系统。那时候 Linux 发行版本 ubuntu 会免费给学生邮寄光盘，我每年都申请一个新版本，所以毕业时一袋子 Linux 系统光盘。</p><p>我本科期间因为各种原因蹉跎了很多时间，可以说编程并未入门。那是什么感觉呢？就是看起来都好像懂点，自己写起程序来就没底。比如数据结构和算法，我虽然知道很重要，但就是没太学懂，考试过了却不知道实际应用。看相关的书籍，如果没有现成的代码我就总感觉少了点什么，有些困难。</p><p>后来我就考研了，当时我也没太想明白为什么要读研，算是还没准备好参加工作，还想在学校待两年。读研期间我在实验室跟着做一些科研项目，编程做得也不算多。</p><p>2009 年一次偶然的事情改变了我。那天我大概是看到了一个介绍 <a href="http://poj.org/">PKU JudgeOnline - POJ</a> 的网页，然后想起自己 2006 年注册过账号，我就重新登录了进去，没想到从此的一年多时间里，我基本天天泡在上面写程序。</p><p>我不是为了参加比赛，而只是偶然陷入了进去，然后就变得沉迷。我基本从早上九点到实验室，到晚上十一点左右离开实验室。我从一些简单的算法开始写，有时候是按照某些分类去做，实在想不出来就去评论区和别人的博客看解题报告。</p><p>现在回想起来那一年算是自己最专注的学习编程的一段时间，我记得有一次神奇的体验，有次我一直在想一个算法问题，然后在梦里还在做，第二天醒来后居然能回忆起梦里的方法，最后实现出来居然是对的。</p><p>这种忘我的、愉悦的<a href="https://www.zhihu.com/question/24428474">心流</a>体验非常难得，以至于在十年之后，当我遭遇焦虑时仍用这种办法来解决。</p><p>在这一年多的时间里，我基本刷完了 <a href="http://poj.org/userstatus?user_id=chenyukang">500 道题目</a>。其实每个程序通常都比较短，算 100 行每道题的话我也就写了 5 万行代码。</p><p><img src="/images/ob_pasted-image-20220129122255.png" alt=""></p><p>就是这 5 万行代码彻底提高了我的编程能力，感觉就好像就是突然上道了。我对算法和数据结构没有了恐惧感，变得更有耐心，我看其他技术书籍也没任何困难，学习编程语言，框架类的东西快多了。</p><p>在  POJ 上做编程题和自己学习数据结构、算法有什么区别呢？后来我明白，其实我经过了一年多<strong>刻意的有效练习</strong>，这种在线编程的练习有几个好处：</p><ul><li>可以获得即时反馈，一个程序是否通过都是确定的，到底是 Wrong Answer、Memory Limit Exceeded、还是 Time Limit Exceeded</li><li>可以跟踪和量化，我学会了哪些，比如 DFS、BFS、DP、Tree、Graph 等都是可以追踪和量化的</li><li>可以和其他人交流</li></ul><p>在这种练习中，我通过写获得了编程的“语感”，也提高了阅读源码的能力。写代码和写作差不多，编程无非是通过代码来表述自己的想法，需要不断地练习。</p><p>关于这一点我后来看到硅谷王川的表述非常好：</p><blockquote><p>所有的我们以为的质量问题，大多本质是数量问题。因为数量不够，差几个数量级而已。</p><p>数量就是最重要的质量。大部分质量问题，在微观上看，就是某个地方的数量不够。</p><p>最大的误区是，明明是数量不够的问题，因为错误地以为瓶颈在于质量，幻想在不增加数量的前提下，用某种奇技淫巧，偷工减料达到目的。这时候玄学，迷信和各种无病呻吟就出现了。数量不够，底子不够厚时，很多事情时做不到的。即使有时看似有捷径，欠的账迟早是要还的。</p></blockquote><p>有的初学者在量没达到的情况下，怀疑自己的学习方法有问题，然后再怀疑是不是编程语言没选对，试其他的办法又没法长久坚持，最终导致自己好像一直没上道。如果没有写到足够的量，任何方法都是无法阶段性提高自己。</p><p>这个量就像是一个门槛。</p><p>任何复杂技艺的学习都是有门槛的，<strong>通过这个门意味着构建了做这行的韧性和耐心，也可以说是找到了里面的乐趣和成就感，这些是深入下去的基础</strong>。</p><p>在纪录片<a href="https://www.youtube.com/watch?v=r9kX_tPQkNA">寿司之神</a>中有一个片段：</p><blockquote><p>在小野二郎的店里做学徒，先要学会的是拧毛巾。毛巾是刚从开水中蒸出来的，温度骇人，食客使用都需要晾凉。而在这之前，学徒要将其捞出，并拧至全干。</p><p>这种训练非常辛苦，但如果学不会的话，就不能去碰鱼。接着，学徒要学会用刀料理鱼，10 年后才会被允许去煎蛋。</p><p>资深学徒苦修 4 个多月，失败 200 多次，终于做出了人生第一个“合格”的玉子烧。</p></blockquote><p><img src="/images/ob_pasted-image-20220129121542.png" alt=""></p><p>训练和衡量一个飞行员，我们说他累计飞行时间多长；训练长跑运动员，衡量标准是每天跑多少公里；那衡量一个编程初学者，有效编程行数就是一个很好的指标。</p><p><strong>编程中的有效练习不是拷贝粘贴代码，也不只是读代码，而是自己从头到尾去思考，去写出来，然后出了问题自己去调试。</strong></p><p>在 LeetCode 上写也很不错，你可能对算法不感兴趣，那可以去做游戏、 Web 应用开发、后台开发等等项目，找到自己感兴趣的方向作为突破口，然后持续积累到一定程度的代码量，比如三万行代码，那编程自然就入门了。</p><p>就编程来说，三万行代码这么明确的一个指标，实际上大部分人做不到。<strong>以大多数人的努力程度之低，根本轮不到拼天赋</strong>。不信你可以问问，即使是大学计算机专业的学生，很多人毕业的时候并未完成过 3 万行有效编程的这个量。</p><p>有了这种体验，我培养出了作为普通人学习掌握技能的耐心。类似编程，那些难以获得、需要不断锤炼的技能，例如写作、英语、钢琴、绘画等，前期都需要一定量的积累，<strong>我们要做的是找到有效练习的方式，持续投入再阶段性回顾</strong>。 </p><p>这个月我在锻炼写作能力，因此我一个月写了接近 15 篇文章，自我感觉确实有提高了不少，而且在这段时间里我克服了心理问题，解决了写作的流程、和工具的问题，所以我也不感觉到迷茫。</p><hr><p>总而言之，编程初学者不要想着捷径。每个人的方法都可能会有所差别，他人的路径不一定适合你。唯一的共同点是得有量的积累，先在键盘前敲起来，敲几万行代码后你就没有入门学习这类的疑问了，下一阶段是如何写得更好，如何用编程解决现实问题了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天分享一下自己这些年来学习编程的一些体会，来阐述一个朴素的道理和原则。而好多初学者并不太明白这个道理，所以在学习过程中会有迷茫感。&lt;/p&gt;
&lt;p&gt;我是 2004 年上的大学，当时读的是信息安全专业。在上大学之前我没怎么用过计算机，可以说是完全的小白，而且我觉得自己的数学一
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>微软内推</title>
    <link href="http://catcoding.me/p/ms-refer/"/>
    <id>http://catcoding.me/p/ms-refer/</id>
    <published>2022-01-27T20:47:03.000Z</published>
    <updated>2022-02-04T02:59:03.277Z</updated>
    
    <content type="html"><![CDATA[<p>关注我的很多读者是想找份能兼顾生活的工作的，我觉得微软是个很好的选择。微软员工内推入职的比例比较高，因为没和猎头合作，这钱就给员工赚了也挺好。</p><p>微软苏州即将启用第二栋办公楼，又要开启招招招的模式，各个部门目前开放的岗位超过 200+， 并且之后会持续开放新的岗位。</p><p>所以对微软有兴趣的同学们，不要错过加入微软的最好机会！</p><p><strong>内推职位不限于苏州，北京、上海也有职位</strong>，麻烦你在官网找自己感兴趣的职位。</p><p><a href="https://careers.microsoft.com/professionals/us/en/">https://careers.microsoft.com/professionals/us/en/</a></p><h3 id="个人工作感受"><a href="#个人工作感受" class="headerlink" title="个人工作感受"></a>个人工作感受</h3><p>在微软工作，工程师可以大多数时间专注在自己的项目上，没有那么多汇报和扯皮的事情。</p><p>日常接触的技术栈大多是微软自己的那套(不过也看部门)。这个我认为没什么问题，其实工作到一定年限，成熟的做法就是不对技术保有什么偏执。微软近些年在开源方面也做得挺好。</p><p>另一方面的感受是包容、平等和尊重。这里不会有年龄歧视，我们团队有小孩上高中的，也有 96 年左右的同事，其他部门也能看到预计 50 多岁的员工。做管理和不做管理也主要是在于个人志趣。</p><hr><p><img src="/images/ob_pasted-image-20220128114307.png" alt=""></p><p>下面是一些 FAQ:</p><p><strong>Q1: 申请微软需要什么样的学历门槛？</strong> </p><p>A: 学历更好可能会占一些优势，但面试主要还是看能力和经验。如果是技术岗位，前几轮都是编程能力考察。学历在应届生中很重要，如果是社招就没那么重要，例如你有一线大厂有经验，或者是好的项目经验，学历​通常只要是本科就可以，名校和非名校没那么大的差别。我甚至也见到过没有本科学历的同事，但是他技术和工作经验都没问题。</p><p><strong>Q2: 微软的面试流程是什么样的，简历投递之后流程如何？</strong> </p><p>A: 我这里投递简历之后，HR 初步沟通意向，可能会和你讨论哪个组比较合适你。然后一轮技术面试（现在一般是远程面试)。通过之后大概 4-5 轮连续的面试，HR 会尽量安排在一到两天内。面完之后就是等结果和谈 Offer 的过程了。</p><p><strong>Q3: 针对面试需要做哪些准备？</strong>   </p><p>A:  社招主要是编程能力、系统设计、表达能力、英语能力。其中编程能力的考察方式是在线编程。</p><p>我建议刷一下 LeetCode easy/medium 难度。系统设计通常是给一个具体的场景，一起讨论如何设计实现，或者讲一下自己之前做的一些项目，难点和挑战。英语能力要求能简单表述自己，发音和流畅度不要求太高。</p><p><strong>Q4: 微软的职级是怎样的, 我应该申请什么级别？</strong>  </p><p>A: 本科生和研究生校招进入微软都是 59 级，这是你在微软的 level，除了 level 之外，微软制定了不同角色的 title 体系，以多数人申请的 IC(个人研发)岗位为例，一个 title 往往对应 2~3 个 level，大概的对应关系和工作年限要求如下： </p><blockquote><p>Title Level 工作年限要求<br>   SDE 59~60 3 年以下工作经验<br>   SDE2 61~62 3 年到 6 年<br>   Senior SDE 63~64 7 年到 10 年<br>   Principal SDE 65~67 10 年+</p></blockquote><p>当然工作年限和职级的对应关系不是严格对应的，需要自己争取。</p><p><strong>Q5: 英文不好的我是不是和微软无缘了？</strong></p><p>A: 如果是技术岗位对英语的要求没那么高，只要能听懂和简单表达自己即可。当然面试之前准备好英文的自我介绍比较好。</p><p><strong>Q6: 微软需要 996 福报嘛？</strong> </p><p>A: 不会，我的感受是大家都真的在自由安排时间，上下班不打卡，没人关注你什么时候下班，也没有拼加班的风气。有的有孩子的同事回家比较早，通常5、6点开始有人下班了。</p><p>据说有个别组有点卷，这些私聊我会告知你我所知道的。</p><p><strong>Q7: 和外界迥异的技术栈，进入微软水土不服怎么办？</strong>   </p><p>A: 入职后会有比较长时间去给你适应，内部好多文档、书籍、视频资料可以学习。我最近发现公司还给员工买了Oreilly 的会员，还有 Linkedin上的各种学习资料，只要保持学习心态这些不是问题。</p><p><strong>Q8: 带着想要肉身翻墙，去接受美帝资本主义腐蚀的思想也可以加入微软嘛？</strong></p><p>A: 这个时期还有勇气去美帝么？真的勇士！</p><p>据我所知以前去美帝的很多，疫情期间暂停了一段时间。现在据说又有同事开始过去了，不过都是疫情之前已经拿到那边的 Offer 的同事。</p><p>真想要翻墙可以进来再观望，估计以后还是有机会的。</p><p><strong>Q9: 目前开放的岗位有哪些，岗位太多难以抉择怎么办？</strong></p><p>A: 找我或者和 HR 小姐姐沟通。我当时也是抱着随便投投攒点面试经历的想法投了简历。没想到 HR 特别耐心和我沟通了半个多小时。然后就稀里糊涂的面了好几轮。</p><p><strong>Q10: 微软可以远程办公吗？</strong></p><p>A: 如果是不超过 50% 时间在家办公，和组里口头说一下即可，我经常一周在家一两天。如果是想长期永久在家办公，需要走流程让上面审批，我们隔壁组有同事长久在家办公。</p><p>有意向的读者请将简历微信发我(公号回复 0)，或者邮箱 moorekang#gmail.com。我会全程跟进大家的面试流程，为大家解答问题和提供面试的意见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关注我的很多读者是想找份能兼顾生活的工作的，我觉得微软是个很好的选择。微软员工内推入职的比例比较高，因为没和猎头合作，这钱就给员工赚了也挺好。&lt;/p&gt;
&lt;p&gt;微软苏州即将启用第二栋办公楼，又要开启招招招的模式，各个部门目前开放的岗位超过 200+， 并且之后会持续开放新的岗
      
    
    </summary>
    
    
      <category term="微软" scheme="http://catcoding.me/tags/%E5%BE%AE%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>游戏大神 John Carmack 的编程学习建议</title>
    <link href="http://catcoding.me/p/adivces-from-john-carmack/"/>
    <id>http://catcoding.me/p/adivces-from-john-carmack/</id>
    <published>2022-01-27T00:15:54.000Z</published>
    <updated>2022-02-04T02:59:03.277Z</updated>
    
    <content type="html"><![CDATA[<p>John Carmack 是游戏编程祖师爷级别的人物，id Software的创始人之一。代表作有《德军总部3D》（Wolfenstein 3D）、《毁灭战士》（Doom）和《雷神之锤》（Quake）等等，这些游戏和它们的后续版本都获取了巨大的成功。</p><p>《Doom 启示录》这本书可以说是很多游戏创作者的启蒙书。</p><p>他更是创造了游戏编程和图形学中的一些经典技术，比如他在 Doom上第一次使用了二叉树分割技术，表面缓存技术则在 Quake 中第一次出现。</p><p>前段时间看到个说法：</p><blockquote><p>衡量一职业是否越老越吃香，就看能不能在前面加上德高望重四字。例如：德高望重的医生，德高望重的老师，德高望重的鉴定师……</p></blockquote><p>我想 John Carmack 是不是可以配得上这四个字？但是总感觉哪里不对，原来是年纪，其实 John Carmack 今年不过才 51 岁。</p><p><img src="/images/ob_pasted-image-20220126230424.png" alt=""></p><p>就是这样的大神，仍然对编程保持着好奇心和学习的心态，从他的 Twitter <a href="https://twitter.com/ID_AA_Carmack">@ID_AA_Carmack</a> 可以偶尔看到一些关于编程学习的心得和体会。</p><p>比如前几年他对函数式编程感兴趣了，所以做了一个 <a href="https://sdtimes.com/john-carmack/oculus-cto-john-carmack-is-developing-scheme-scripting-language-for-vr/">Scheme 脚本语言来进行 VR 开发</a>。</p><p>他提倡的学习方式是实际动手去做一些小东西，这两年他在学一些 AI 相关的东西 :</p><blockquote><p>My advice to people wanting to get into game programming has been to write small games completely from scratch while also working on commercial game mods and with unity or unreal. I’m following that myself for AI — I have some C++ backprop-from-scratch projects while also learning python / pytorch / jupyter and experimenting with pretrained models. I had to give myself a bit of a kick to not dwell too much in the lowest levels, but now I am enjoying the new world quite a bit. You can do a remarkable amount with very little code, but when I actually write a loop in python because I don’t know the correct way to do something with tensor ops I get reminded just how slow python is relative to C++.</p></blockquote><p>Carmark 甚至还会使用这种静修式的方式来<a href="https://www.facebook.com/permalink.php?story_fbid=2110408722526967&amp;id=100006735798590">找回编程的乐趣</a>，完整地花费一周时间来自己实现神经网络的小项目，顺便玩一些自己用得比较少的工具:</p><blockquote><p>I’m not a Unix geek. I get around ok, but I am most comfortable developing in Visual Studio on Windows. I thought a week of full immersion work in the old school Unix style would be interesting, even if it meant working at a slower pace. It was sort of an adventure in retro computing — this was fvwm and vi. Not vim, actual BSD vi.<br>…..<br>Maybe next time I do this I will try to go full emacs, another major culture that I don’t have much exposure to.</p></blockquote><p>你看，当一个喜欢编程的程序员财富自由了之后，最有乐趣的事还是编程。</p><p>那大佬对学习编程有什么建议么？</p><p>简而言之还是那句话：<strong>多看，多写！</strong></p><p><img src="/images/ob_pasted-image-20220126224701.png" alt=""></p><p>2005 年有个 14 岁的小朋友发邮件问 John Carmack 如何学习编程，他当年给了一个<a href="http://d3dvortex.blogspot.com/2005/07/programming-advice-from-john-carmack-i.html">回复</a>，2018 年的时候又被翻出来，虽然十多年过去了，技术变得越来越复杂，但是这仍然是学习编程的好建议:</p><p><a href="https://twitter.com/id_aa_carmack/status/1047504598527856642">John Carmack on Twitter: “This is still generally good advice.” / Twitter</a></p><p>这里完整地分享一下，顺便一起学学英语 🙌</p><blockquote><p>When I started, computers couldn’t do much more than simple arithmetic and if statements – my first computer had 4k of memory. How I learned probably isn’t very relevant, because there are so much better resources available today.</p><p>Don’t expect it to be easy, you will have to work at it. Get a few more books from the library that cover beginning programming to go with the ones you have – sometimes a different author explaining the same thing will help a concept click. Go through all of them at least twice. Try to do every problem and exercise, don’t just read them and think you get it. Lots of people that want to program will talk a lot about programming, but not actually write that many programs. You should write hundreds of programs</p><p>If you want to get good at something you need to focus on it, which means choosing to exclude some other things from your life. Keep a little journal of what you are working on each day, you may find that you aren’t applying yourself all that hard. Learn something new every single day.</p><p>Avoid “cookbook programming”, where you copy and paste bits of code that you have found to make something work. Make sure you fully understand what everything it actually doing, and that you are comfortable applying the techniques in other situations.</p><p>It isn’t a bad idea to start in an environment that give you more exciting feedback, like visual basic, flash, or javascript, but you should try and “find the excitement” in even the most simple data processing tasks. There are layers and layers of things going on in just compiling and running the simplest program that are worth investigating.</p><p>Pay attention in school to the math classes. It is more important to be able to do basic algebra and trigonometry extremely well than to sort of get by in higher math classes. You should be able to ace all the tests and teach other people if you truly have a complete understanding of the subjects.</p><p>John Carmack</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;John Carmack 是游戏编程祖师爷级别的人物，id Software的创始人之一。代表作有《德军总部3D》（Wolfenstein 3D）、《毁灭战士》（Doom）和《雷神之锤》（Quake）等等，这些游戏和它们的后续版本都获取了巨大的成功。&lt;/p&gt;
&lt;p&gt;《Doo
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
</feed>
