<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yukang&#39;s Page</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenyukang.github.io/"/>
  <updated>2022-01-10T14:08:17.367Z</updated>
  <id>http://chenyukang.github.io/</id>
  
  <author>
    <name>Yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对我有深刻启发的 3 篇文章</title>
    <link href="http://chenyukang.github.io/2022/01/10/share-3-articles.html"/>
    <id>http://chenyukang.github.io/2022/01/10/share-3-articles.html</id>
    <published>2022-01-10T22:07:55.000Z</published>
    <updated>2022-01-10T14:08:17.367Z</updated>
    
    <content type="html"><![CDATA[<p>这些年读过很多的文章，绝大部分看了就忘记了，其中这三篇对我启发很大，这里分享给大家。</p><h2 id="十年学会编程"><a href="#十年学会编程" class="headerlink" title="十年学会编程"></a>十年学会编程</h2><ul><li><a href="https://norvig.com/21-days.html">Teach Yourself Programming in Ten Years (norvig.com)</a></li><li><a href="http://daiyuwen.freeshell.org/gb/misc/21-days-cn.html">十年学会编程</a></li></ul><p>这篇文章是 <a href="http://www.norvig.com/index.html" title="Peter Norvig (Copyright 2001)">Peter Norvig</a> 发表于二十年前。现在和二十年前都一样，很多人学习编程都会浮躁，渴望 21 天甚至是 7 天 就能学会编程，这篇文章很好的解释了为什么不行。甚至是，初学者理解的编程和一个高手理解的编程可能都不是一回事。</p><p>对我的启发是，永远不要妄想有什么捷径，不要浮躁，编程不是一门科学，更像是一种技艺，如同绘画、音乐一样的技能，只有通过长时间的砺练才会有所成。</p><p>另外不要拘泥于单一技术，因为技术可能会过时，这样年纪越大越容易被淘汰。需要不断加基础知识和核心能力，因为技术原理相通，无论适应学习新技术、还是发挥经验优势，都是比年轻人强很多的。</p><p>学习编程这么多年后，反而更加觉得自己渺小和无知，看着那些后浪做出的漂亮东西有时候会感叹，这十年可荒废了不少，想再上一台阶再花十年吧。</p><h2 id="Learn-in-Public"><a href="#Learn-in-Public" class="headerlink" title="Learn in Public"></a>Learn in Public</h2><ul><li><a href="https://www.swyx.io/learn-in-puPublic">Learn In Public</a> </li><li><a href="https://juejin.cn/post/6855456536056037389">当众学习 - 最快的学习方式 </a></li></ul><p>我之前写了 10 来年的博客，但我基本是当作自己的一个私人记录在写，我甚至不希望身边的朋友、同事发现我写的东西，因为我会觉得不舒服，后来我才知道这其实就是<strong>冒名顶替综合症</strong>。我的域名也丢了两次，所以最终导致我写的东西除了自己看没有什么很多人看过。</p><p>这会有什么问题？</p><p>其实也没什么大问题，只是我丧失了很多提高自己的机会。写出来的东西并没有其他人看，就相当于我只是在消费，实际并没有产出。因为没有得到太多的反馈、激励，即使我写了 10 年，这也是断断续续的，兴致来了写上一篇，通常每年十篇左右，这样没有形成习作的习惯。而且我丧失了让其他人纠正我，以及从其他人学习的机会。</p><p>我认为 Learn In Public 是费曼学习法的加强版，如果能在公共场合传授我们所学，是更高的要求。</p><p>具体执行起来可能是在 Github 上通过做贡献，或者是建立一个持久的开源的知识库，或者是记录所做的事和解决的问题。长久来说，人们会注意到真正的学习者，然后会向其提供帮助或者寻求帮助，这个过程就能产生价值。</p><p>我正在实践这个理念，比如我正在写的这个公众号，我想让自己变得更自信和开放，推广自己的想法，让自己成为生产者，同时还能和更多人交流。</p><h2 id="别让自己“墙”了自己"><a href="#别让自己“墙”了自己" class="headerlink" title="别让自己“墙”了自己"></a>别让自己“墙”了自己</h2><ul><li><a href="https://coolshell.cn/articles/20276.html">别让自己“墙”了自己</a></li></ul><p>CoolShell 上有很多不错的文章，其中这篇我会时不时再看。</p><p><strong>偏见和不开放，对一个人的限制是真正有毁灭性的</strong>。</p><p>持有强烈偏见是技术人员经常会出现的问题，大概是因为我们在编程的时候其实是在构建一个简单的世界，所以自认为一切都可控，自己擅长的就是最好的。</p><p>比如有的人认为 C++ 是最强的，所以鄙视其他语言；比如我之前认为 Emacs 是最好的，所以排斥一些现代先进的编辑器；比如自认为是后端开发，所以前端的东西不想碰。行业里这样的偏见到处可见，能形成各种鄙视链。这种不开放的心态就是作茧自缚。</p><p>这篇文章还谈了很多其他的方面：</p><ul><li>站在更高维度上思考和学习</li></ul><blockquote><p>整天在焦虑那些低维度的事（比如自己的薪水、工作的地点、稳不稳定、有没有户口……），只会让你变得越来越平庸，只要你站在更高的维度（比如： 眼界有没有扩大、可能性是不是更多、竞争力是不是更强、能不能解决更大更难的问题、能创造多大的价值……），时间会让你明白那些低维度的东西全都不是事儿。</p><p>技术学习上也一样，站在学习编程语法特性的维度和站在学习编程范式、设计模式的维度是两种完全不一样的学习方式。</p></blockquote><ul><li>扩大眼界</li></ul><p><strong>英文语言能力对你能不能融入世界是起决定性的作用</strong>，所以我也还在提高英语写作和口语。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这些年读过很多的文章，绝大部分看了就忘记了，其中这三篇对我启发很大，这里分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;十年学会编程&quot;&gt;&lt;a href=&quot;#十年学会编程&quot; class=&quot;headerlink&quot; title=&quot;十年学会编程&quot;&gt;&lt;/a&gt;十年学会编程&lt;/h2&gt;&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="写作，个人成长" scheme="http://chenyukang.github.io/tags/%E5%86%99%E4%BD%9C%EF%BC%8C%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>35 岁，我用这三种方法克服焦虑</title>
    <link href="http://chenyukang.github.io/2022/01/07/how-to-beat-anxiety.html"/>
    <id>http://chenyukang.github.io/2022/01/07/how-to-beat-anxiety.html</id>
    <published>2022-01-07T00:10:33.000Z</published>
    <updated>2022-01-10T14:08:17.363Z</updated>
    
    <content type="html"><![CDATA[<p>去年我刚好满 35 岁。</p><p>我 2011 年研究生毕业后参加工作，一直工作在 IT 领域，这些年发展也算比较顺利。毕业后我待了一个创业团队三年，后面六年一直待在深圳一个独角兽企业。这十年算是赶上了行业红利和房产红利，经济上没什么大的压力。</p><p>但是在 2019 年开始我开始焦虑。</p><p>主要压力来自家庭，亲人查出严重疾病，幸好手术后渐渐恢复。另一方面压力来自工作，因为在同一公司工作六年后我感觉到了瓶颈，对自己的工作内容也提不起兴趣。还有一方面来自自己的身体，因为经常晚上睡不好觉导致出了一些肠胃方面的慢性疾病。有段时间我不敢去医院检查，因为怕是什么绝症之类的。后来鼓起勇气去做了比较彻底的检查，医生说这病只能慢慢养，心情要放松才行。</p><p>总之，人生进入后半场不如意十之八九，家庭、工作、健康，突然各方面都需要应对，而精力又大不如前。</p><p>经过一年多的调整，我感觉现在基本摆脱了焦虑，自认为算是迈过了这道坎。总的来说我用了三种方法：</p><ul><li>做让自己进入心流的事</li><li>换工作和城市</li><li>找到自己的长期驱动力，做 PlanB</li></ul><p>分别再详细阐述一下。</p><p>当一个人焦虑的时候，就很容易东想西想、瞻前顾后，这样会加重精神内耗，反过来加重焦虑。如何避免自己想得太多从而进入恶性循环？</p><p><strong>一个好办法是让自己进去心流状态</strong>，尝试找自己感兴趣的、喜欢做的事情，留出较长一段时间来做。这就好像是躲避，但是是一种安全的躲避方式。</p><p>我喜欢编程，有段时间我就也没想到写哪方面的代码，就在 LeetCode 上刷题。后来有一段时间很热衷于玩乐高，所以买了一些夜深人静的时候自己玩。后来我又觉得写作能让自己进去心流，所以那段时间我每天写一篇技术类的英文文章，然后发布到 <a href="https://medium.com/@coderscat">Medium</a> 上。我发现这样也能赚一些钱，所以就动机更大，投入了更多时间在这上面。<strong>兴趣和爱好可以让自己从工作、生活中暂时逃离，可以让人应对心理、精神上的疲劳。</strong></p><p>2020 年中，因为一次偶然的面试，我拿了一个苏州某著名外企的 Offer。然后大概经过了一个多月的考虑，我决定举家从深圳搬迁到苏州。这需要很大的勇气，我甚至让女儿来抽签决定是否离开已经定居的深圳。最终做出换城市和工作的决定还是因为我想多一些不同的体验和尝试。就像是优化算法进入了一个局部最优解，我需要趁还不那么老的时候去做一个更大的改变。</p><p>在苏州待了一年之后，我有些庆幸自己当时做了那个决定。人焦虑很多时候是因为所处的环境。苏州整个城市都是有一种养老的气质，稍晚点街上就没什么人，路上没什么车，完全没有奋斗的氛围。</p><p><strong>如果要在一个公司长待，那么公司企业文化是否和自己贴合特别重要</strong>。外企工作节奏和氛围轻松多了，我工作上时间投入少很多，基本是上午十点上班晚上六点下班。更重要的是成熟的公司管理方式反而更简单些，上班做事下班闪人。</p><p>人到中年有时候得把工作别看得太重，这需要做取舍。在纪伯伦的《先知》中谈论到工作时写道：</p><blockquote><p>所有知识都是无用的，除非有了工作，<br>所有工作都是空洞的，除非有了爱；</p></blockquote><p>毕竟工作也还是为了家。工作相对轻松了，我可以每天晚上回家吃饭，陪女儿玩耍，看书，给她洗漱哄她睡觉。这些陪伴对她的成长很重要，从长远来看这也许比赚钱还重要。在陪小孩的过程中，自己也像是在重新过一个童年，玩积木和拼图都很有趣。</p><p>另外苏州的风景和天气都很不错，所以这一年我经常周末开车出去逛，太湖、阳澄湖、古镇等等，风景好的地方太多了。当一个人整个心态慢下来，漫步在风景优美的自然环境里，就会觉得人间美好，我没心情焦虑了。肠胃方面的问题也渐渐地就没什么症状了。</p><p>说了这么多，有的人可能就说这不就是躺平么？</p><p>我认为不是。我是在调整工作和生活，更好地应对衰老这个自然规律。<strong>职场上的中年危机，本质上就是一种对不确定性的恐惧和焦虑。</strong> 如果是作为工薪阶层，年纪大了还一直还是只盯着职位和工资看，难免为失望，因为命运掌握在公司手里就会有不确定性。</p><p>即使到了 35 岁，后面的路还有很长，不要自己局限在公司和职场上。作为个体来说，我认为需要花时间思考自己的后路，如何能不断保持自己能力的提高，如何能不依赖公司或者机构创造自己的价值，如何找到自己的内在驱动力，如何做复利和时间的朋友。</p><p>这需要不断尝试，找到自己的激情所在，并且需要保持一种开放，终生学习成长的心态。比如我通过摸索，现在能通过写作赚钱，这一年我花了更多时间在<a href="http://github.com/chenyukang">开源</a>上，对技术反而有了更大的兴趣，也能通过做开源软件赚钱。即使这两样加起来目前都不足以养活家庭，但是这是我自己的兴趣和爱好。</p><p>最坏的情况下我失业了，我还可以用此谋生，而且我相信如果投入更多时间，这两块都能做得更好。总之，PlanB 能让人自信和安宁，<strong>只要还在学习和进步就不算躺平</strong>。</p><hr><p>经过了这个焦虑的阶段，回忆起来那种焦虑会让人更深入的认识自己。经过毕业后这么些年，我们也许还不是很确定自己所求，但肯定知道哪些是自己不要的。在某个阶段必须做取舍，就需要不断问自己想要的生活和人生是什么样的，想清楚之后去做决定然后执行，焦虑就少了。</p><p><img src="/images/ob_pasted-image-20220103090311.png" alt="/images/ob_pasted-image-20220103090311.png"></p><p>如果按照中国平均寿命 70 多岁来算，35 岁刚好是一个分界点，在人生四季中算是进入秋季。前段时间在东太湖生态公园看到一排排的红杉树，觉得特别美。</p><p>正如人生的每一个年龄段自有其痛苦和动人之处。努力学会适应和享受，就能克服中年危机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;去年我刚好满 35 岁。&lt;/p&gt;
&lt;p&gt;我 2011 年研究生毕业后参加工作，一直工作在 IT 领域，这些年发展也算比较顺利。毕业后我待了一个创业团队三年，后面六年一直待在深圳一个独角兽企业。这十年算是赶上了行业红利和房产红利，经济上没什么大的压力。&lt;/p&gt;
&lt;p&gt;但是在 
      
    
    </summary>
    
    
      <category term="写作" scheme="http://chenyukang.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>那些年，我们终将碰上的 Bug</title>
    <link href="http://chenyukang.github.io/2022/01/05/those-bugs-will-always-happen.html"/>
    <id>http://chenyukang.github.io/2022/01/05/those-bugs-will-always-happen.html</id>
    <published>2022-01-05T15:12:02.000Z</published>
    <updated>2022-01-10T14:08:17.367Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220103215102.png" alt="/images/ob_pasted-image-20220103215102.png"></p><p>2022 年的新年钟声刚敲响，时钟从 2021 年 12 月 31 日跳转到 2022 年 1  月 1 日，微软 Exchange 准时给大家带来了第一个世界范围内的 Bug。人们写好的新年祝福等邮件，突然发不出去了！大量用户在 Reddit 、Twitter 上亮出新年第一骂。</p><p>那些正准备休假的倒霉的 IT 管理员，被紧急电话呼进公司，排查后发现邮件队列卡住了，日志里显示的是：</p><p><img src="/images/ob_pasted-image-20220103215401.png" alt="/images/ob_pasted-image-20220103215401.png"></p><p>随后微软官方确认了这个 Bug。 这些错误是由 Microsoft Exchange Server 检查 FIP-FS 防病毒扫描引擎的版本，并试图将日期存储在带符号的 int32 变量中引起的。</p><p><img src="/images/ob_pasted-image-20220103214745.png" alt="/images/ob_pasted-image-20220103214745.png"></p><p>在这个变量中使用了 <code>yymmddHHMM</code> 这种格式的约定，我们知道 int32 能表示的最大值是 2,147,483,647，但是到了 2020.01.01  这个值将是 2,201,010,001，所以就溢出了！</p><p>这是一个典型的类似<code>千年虫</code> 问题，即由于时间的数据格式不对导致溢出或者日期逻辑错误，进而导致大量软件出现 Bug。千年虫的问题很多是因为很多老程序使用了两位来表示年份，比如 99 代表 1999 年，那 2000 年只能用 <code>00</code> 来表示了，但是 00 在程序里本意指的是 1900。</p><p>可能现在的新生代程序员会感叹，这些老古董为什么会犯这样低级的错误？</p><p><img src="/images/ob_pasted-image-20220104122103.png" alt="/images/ob_pasted-image-20220104122103.png"></p><p>这就牵扯到一些更复杂的问题：</p><p>一个是约定习俗，1931 年后很多人在写年份的时候，自然就开始用两位来代表年份，因为 1931 年后年和日已经不重合了，例如写成 35 ，任何人看了都是理解为 1935 年。 </p><p>另一个原因是内存曾经又贵又稀缺，早期核心内存的价格是每比特 1 美元，老一辈程序员在写代码的时候都是按 bit 抠的。 前美联储主席 Alan Greenspan 曾经也写过程序：</p><blockquote><p>我是造成这个问题的罪魁祸首之一。<br>我曾在20世纪60年代和70年代编写过这些程序，<br>我为自己能够在程序中挤出一些空格元素而感到自豪，<br>因为我不需要在年份前加上一个19。</p><p>在当时，这是非常重要的。<br>在我们开始编写程序之前，<br>我们曾经花了很多时间进行各种数学练习，<br>这样它们就可以很清楚地根据空间和容量的使用进行划分。</p><p>我们从来没有想到，这些项目会持续几年以上。</p></blockquote><p>“过早优化是万恶之源”，高老头真是诚不我欺：</p><p><img src="/images/ob_pasted-image-20220104114834.png" alt="/images/ob_pasted-image-20220104114834.png"></p><p>这种类型的 Bug 是可以预测的，比如千年虫问题，其实在 1985 年左右就已经有计算机专家发现了。问题是代码已经写好并且运行了，甚至因为早期的系统和软件通用性不高，有很多固化在芯片内部的程序，所以要解决也是大费周折。而且日期的问题与各个地方的不同习俗也有关系，比如台湾某些程序在 2011 年出现了日期溢出问题，大家考虑一下为什么😉？</p><p>总而言之，这些 Bug 就很神奇，我们知道在某些年份这类 Bug 必然会发生，但是我们无法完全消除，我们可以简称为 <strong>那些年，我们终将碰上的 Bug</strong>。</p><p>我们可以列举一下今后会碰到 Bug 的重要年份：</p><h3 id="GPS-星期技术归零"><a href="#GPS-星期技术归零" class="headerlink" title="GPS 星期技术归零"></a>GPS 星期技术归零</h3><p>GPS(全球定位系统) 广播时采用周计数(WN) + 周内时(TOW)的方式组合发布，早期的 GPS 采用 10bits 存储 WN，所以当计数达到 1024 时会翻转为 0。因此每 1024 周(也就是 19.6年) 会轮回一次。</p><p>最近几年发生是 1999，2019，下一次预计就是 2038 年。</p><p><img src="/images/ob_pasted-image-20220104232522.png" alt="/images/ob_pasted-image-20220104232522.png"></p><p>2019 年的这次看起来没有发生特别严重的事故，霍尼韦尔的飞行管理和导航软件因为没有及时打上补丁导致航班延误。一些 2012 年之前生产的 iPhone 和 iPad 可能因此连不上网络。</p><p>为了解决这一问题，现代化的 GPS 导航消息使用 13 位字段，该字段重复周期变成了 8,192 周（157岁），也就是说会直到 2137 年附近才清零。</p><h2 id="Unix-系统-time-溢出"><a href="#Unix-系统-time-溢出" class="headerlink" title="Unix 系统 time 溢出"></a>Unix 系统 time 溢出</h2><p><img src="/images/ob_pasted-image-20220104235957.png" alt="/images/ob_pasted-image-20220104235957.png"></p><p><strong>2038 年将是软件历史上史诗级别的灾难年。</strong></p><p>因为 Unix 系统最初实现的时候采用的是有符号整数 int 来保存时间，而时间系统是由 Epoch 开始计算起，单位为秒，Epoch 则是指定为 1970 年 1 月 1 日凌晨 00:00:00，格林威治时间。</p><p>很多古老的 UNIX 系统都是用 32 位元来记录时间，正值表示为 1970 以后，负值则表示 1970 年以前。也就是说最大为 0xFFFFFFFF 的一半，除以一天 86400 秒的话，就是 68 年。1970 年往后延 68 年刚好是 2038 年。</p><p>2038 年问题比 2000 的千年虫问题更麻烦。虽然目前很多 OS 和硬件已经升级到 64 位系统，32 位的嵌入式系统仍然大量运行。另外因为这涉及到系统层面的改动，如果我们直接修改 time_t 的定义，则会出现兼容性问题。</p><p>乐观情况，在还剩下不到 20 年的时间里，这些 32 位的系统逐渐被 64 位替换掉，这样就不会出现大问题。有可能导致严重问题的是那些无法升级的嵌入式系统，运行这些系统的设备寿命通常比较长，例如交通系统、汽车的稳定控制系统等。</p><h2 id="2106-年"><a href="#2106-年" class="headerlink" title="2106 年"></a>2106 年</h2><p>很多文件格式、通讯协议采用的是类似 Unix 的日期格式，差别是把时间存储在无符号 32 bit 整数里。按照这个范围计算，日期将在 2106 年溢出。</p><h2 id="4501-年"><a href="#4501-年" class="headerlink" title="4501  年"></a>4501  年</h2><p>Microsoft Outlook 使用 4501 年 1 月 1 日作为“none”或“empty”的占位符，不知道那天会出现什么神奇的 Bug，反正我们已经不在了。</p><hr><p>这种类型的 Bug 其实还有很多，时间和日期是程序和系统中非常重要的一个概念，在分布式系统中时间也很容易造成 Bug。我们作为程序员在写代码的时候，<strong>尽量眼光放远一点</strong>，多想想自己的程序一千年以后还在跑🤣，这样大概就没这类问题了。</p><p>不过一千年后还在运行的代码，得多伟大。这时候我脑海里回想起来那首歌：</p><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">别等到 一千年以后<br>所有人都遗忘了我<br>那时红色黄昏的沙漠<br>能有谁 解开缠绕千年的寂寞<br></code></pre></td></tr></table></figure><p><img src="/images/ob_pasted-image-20220105001744.png" alt="/images/ob_pasted-image-20220105001744.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220103215102.png&quot; alt=&quot;/images/ob_pasted-image-20220103215102.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2022 年的新年钟声刚敲响，时钟从 2021 年 
      
    
    </summary>
    
    
      <category term="技术，写作" scheme="http://chenyukang.github.io/tags/%E6%8A%80%E6%9C%AF%EF%BC%8C%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>什么是 Web3</title>
    <link href="http://chenyukang.github.io/2022/01/03/what-is-web3.html"/>
    <id>http://chenyukang.github.io/2022/01/03/what-is-web3.html</id>
    <published>2022-01-03T10:30:46.000Z</published>
    <updated>2022-01-10T14:08:17.367Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220102152645.png" alt="/images/ob_pasted-image-20220102152645.png"></p><p>2021 年 Web3 彻底火了，突然感觉很多人都在讨论，这看起来是在一个大的变革前夕。Web3 被路透社评为今年的科技热词之一，然而马斯克和一些科技大佬直呼没见过 Web3 这东西。</p><p>我花时间来理解了一下这个东西，从非技术角度探讨一下。。</p><p><img src="/images/ob_pasted-image-20220101225425.png" alt="/images/ob_pasted-image-20220101225425.png"></p><p>对于 Web 1.0 和 2.0 的区分，业界似乎是达成了比较一致的共识，但是对 Web3 这个术语其实是有些困惑的，我来解释一下。</p><p><strong>Web 1.0 时代</strong></p><p>年份： 1991 - 2004</p><p>在这个时代，作为互联网的普通用户，我们主要是从互联网获取信息和内容。内容是由那些互联网门户，例如搜狐、网易、新浪、腾讯等四大门户网站。这个时代的最大赢家是 Yahoo！这是一种<strong>单向的信息分享</strong>，信息提供商提供新闻、咨询等，我们上网读取。</p><p><img src="/images/ob_pasted-image-20220102122847.png" alt="/images/ob_pasted-image-20220102122847.png"></p><p>这个阶段社交网络还没有真正成型，大多是还是以企业以及组织机构为主的门户网站。本质上就是单向的信息分享——我通过网络查看我需要的资料。 活化石一样的互联网公司——Yahoo！是这个时期的大赢家。国内比较有代表性的是搜狐、网易、新浪、腾讯为代表的四大门户。</p><p><strong>Web 2.0 时代</strong></p><p>年份：2004 - 2020</p><p>大概从 03 年开始，O’Reilly Media 的副总裁戴尔·杜赫蒂（Dale Dougherty）首先提出 Web2.0 这个词，随后 Web2.0 的浪潮席卷全球。</p><p>Facebook 于 2004 年创办，而后成为社交网络巨头。可以说社交网络定义了 Web 2.0，移动设备比如手机联入互联网，极大地加速了 Web 2.0 的发展。</p><p><img src="/images/ob_pasted-image-20220102104119.png" alt="/images/ob_pasted-image-20220102104119.png"></p><p>在 2. 0 时代，互联网就把<strong>人与内容</strong>的关系变成了<strong>人与人的关系</strong>。在短短十年的时间里，Web2.0 完全重新定义了市场营销和业务运营。Web2.0 包含大量目前我们熟悉的产品和服务，例如RSS、博客、播客、维基、P2P下载、SNS、社区、分享服务等等。</p><p>互联网用户也参与了生产内容，比如你上网发表个博客，发一个照片，发个餐厅的评论等等，大量的数据从普通用户那里产生。</p><p>人对于互联网的影响力与日俱增，以往网站给用户投喂信息的时代已经过去。有影响的网红只需要发一个视频就可以让一个餐馆排满长队，也可以用一句话让一家网店差评如潮。公众号、微博等本质上是把个体做成了品牌。 </p><p>在 Web 2.0 时代，少数超级强大的公司拥有的封闭式平台上进行大量的通信和商业，全球的谷歌，Facebook，亚马逊，国内的腾讯，新浪微博等。</p><p><strong>Web 3.0 时代</strong></p><p>年份：2021 ~ ….</p><p>有的狂热的支持者可能只认可 Web3 这种说法，但是业界目前有的人用 Web 3.0 ，有的人用 Web3，并且他们讨论的可能不是一个东西。Web3 看起来就是一个箩筐，大家都在往里面扔不同的东西，其定义还在不断地改变。里面保罗万象，有物联网、人工智能、区块链等等。我从一些资料梳理了一下，总结发现 Web3 主要是指下面这两个：</p><h3 id="语义互联网"><a href="#语义互联网" class="headerlink" title="语义互联网"></a>语义互联网</h3><p>以 2014 年为分割点，之前大家在讨论 Web 3.0 的时候，更多的是在讨论<strong>语义互联网(Semantic Web)</strong>。语义互联网的概念是 W3C 发起的，目标是改善互联网现状。通过给<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91" title="万维网">万维网</a>上的文档（如: <a href="https://zh.wikipedia.org/wiki/HTML" title="HTML">HTML</a>文档）添加能够被计算机所理解的语义元数据，使得人们能够更方便快捷地找到网络信息。这些元数据描述语言包括 RDF/RDFS 等。</p><p>但这条路其实发展缓慢，或者其实基于关键词的搜索满足了绝大部分场景。有的公司使用自然语言处理(Natural Language Process) 继续在朝着让机器理解内容的方向前进。在知识理解这块我觉得 WolframAlpha 让人耳目一新，WolframAlpha 对自然语言的识别和逻辑感觉比较强大，这更像知识引擎 。</p><h3 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h3><p>2009 年比特币发明，其底层技术<strong>区块链</strong>于2014年开始越来越热。以太坊(Ethereum) 联合创始人 Gavin Wood 于 2014 年重新定义了 Web 3.0。</p><p>在新的概念中，Web3 的特点是去中心化。这也等于要革这些中心化巨头的命，师出有名很重要，Web 3.0 可是个好名称，用来营销再适合不过了。</p><p>区块链信徒相信未来互联网是一个运行在“区块链”技术上面的“去中心化”的互联网。在这种模式下，用户将拥有平台和应用程序的所有权。一些爱好者还将游戏、元世界、增强现实和虚拟现实与 Web3 联系在一起，因为一些虚拟世界依赖于基于区块链的数字资产。</p><p>为什么要去中心化？这得从中心化的弊端开始讨论。所谓中心，即在一个体系中，如果一个节点要和另外的节点产生关联，都要通过特定的一个节点，这个特定的节点就是一个中心。比如阿里的淘宝，我要买东西需要在淘宝下单，然后付钱，对方发货我确认后，对方在淘宝收钱。对于交易来说，淘宝就是一个中心。同理，银行、微信、微博、Facebook 都是中心。</p><p>中心化的弊端是风险和隐私。</p><p>中心拥有所有用户的数据，可以操纵用户的情况下是非常危险的，比如 Facebook 可以通过给不同政见的人群推送不同类型的广告，这样可以用来引导选民。川普那么多粉丝，Twitter 说杀就杀，这就是平台的权力。再比如我们的隐私被电商收集，大数据杀熟成为常规操作。我们的交易产生的数据被第三方平台无偿利用，我们却得不到任何报酬，它往往涉及用户的隐私。如果管理不当，也极易造成隐私的泄露。 </p><p>在 Web3 里，用户不仅是创造内容，还需要拥有自己的数据。</p><p><img src="/images/ob_pasted-image-20220102154006.png" alt="/images/ob_pasted-image-20220102154006.png"></p><p>目前已经出现了一批去中心化的应用，DApp 是 D+App，D 为英文单词 Decentralization 的首字母，中文翻译为去中心化，即 DApp 为去中心化应用。DApp 是在区块链公链上开发并结合智能合约，其数据加密后存储在区块链，难以篡改。从现在有的运行模式看，DApp 更像是众筹模式。先有发起人写好白皮书明确了共识机制和 Token(通证) 分配与激励，以包括智能合约等区块链技术开发好应用，其中持有 Token 的用户都是股东，持有的 Token 也可以在支持的交易所交易。</p><p>前段时间出现了一个典型的案例，一个区块链爱好者在网上发起来了一个<a href="https://www.ruanyifeng.com/blog/2021/11/weekly-issue-185.html">通过区块链筹款来竞拍美国宪法的古董品</a>，最终竟然筹集 4700 万美元。虽然最终没有竞拍成功，但是依然创造了历史，证明基于区块链的集资是可行的。</p><p>目前这些 DApp 都还比较小众，比如下面这些区中心化的应用，你用过多少？</p><p><img src="/images/ob_pasted-image-20220101225622.png" alt="/images/ob_pasted-image-20220101225622.png"></p><p>我看了看其中的这个 Brave  浏览器，它在<a href="https://brave.com/privacy-features/">用户安全和隐私</a>上做了很多优化，特别是去掉了一些可以追踪用户的功能。代码全部开源，同样使用 Chrome 的内核，支持跨平台使用，<strong>它是基于区块链技术的无广告纯净Web浏览器。</strong> Brave 利用区块链技术集成 Token BAT 来让用户可以直接支持投给自己喜欢的文章，视频等创造者。并且用户也可以通过自身加入区块链为基础的数字广告平台，通过推广而获得奖励。这大概就是用户 own 的意思吧。</p><p>虽然目前区块链除了比特币之类的数字货币外，并没有出现另一个现象级应用，资本还是在不断投入到这些初创公司中。如果一个投资公司在某些区块链应用中占大部分股份，那这本质上还是一个中心化的实体。这也是为什么 Twitter 的创始人多西吐槽说，投资机构拥有这些 Web3。</p><p><img src="/images/ob_pasted-image-20220102102859.png" alt="/images/ob_pasted-image-20220102102859.png"></p><hr><p>我不知道 Web3 到底是真的未来互联网方向，还是一个泡沫似的营销术语。但我认为去中心化的大势是好的，去中心化的互联网一个更能促进人与人平等、人与 Web 相处更友好的互联网.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220102152645.png&quot; alt=&quot;/images/ob_pasted-image-20220102152645.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2021 年 Web3 彻底火了，突然感觉很多人都在
      
    
    </summary>
    
    
      <category term="Web" scheme="http://chenyukang.github.io/tags/Web/"/>
    
      <category term="互联网" scheme="http://chenyukang.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>我欣赏的英文技术站</title>
    <link href="http://chenyukang.github.io/2021/12/28/best-english-tech-sites.html"/>
    <id>http://chenyukang.github.io/2021/12/28/best-english-tech-sites.html</id>
    <published>2021-12-28T10:32:58.000Z</published>
    <updated>2022-01-10T14:08:17.359Z</updated>
    
    <content type="html"><![CDATA[<p>做技术这么多年，我订阅了很多英文技术站点。这里介绍一些我认为非常值得关注、学习的技术站点。</p><p>我推荐的标准是：</p><ol><li>持续多年更新</li><li>质量非常高，或者某些文章深刻地启发了我</li></ol><p>后面我会长期更新这个列表：</p><hr><ul><li><a href="https://www.joelonsoftware.com/">Joel on Software</a> </li><li><p><a href="http://www.paulgraham.com/articles.html">Essays (paulgraham.com)</a></p><p>有太多经典的技术文章。<br>分别有中文的《Joel谈软件》和 《黑客与画家》。</p></li></ul><hr><ul><li><a href="https://eli.thegreenplace.net/">Eli Bendersky’s website (thegreenplace.net)</a></li></ul><p>这个博客已经有十多年了。我记得最初搜索到这个站点是自己在 2008 年做SICP的习题时，我发现这里有几乎 SICP 所有的习题答案，附带自己详细的解释。</p><p>难能可贵的是，作者 Eli Bendersky 一直坚持记录自己技术上的心得，这个博客持续在更新。而且他写的内容质量都非常高，既有理论又有实践和代码。例如他写的 Raft 系列： <a href="https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/">Implementing Raft: Part 0 - Introduction</a>，简直就是技术写作的典范。</p><hr><ul><li><a href="https://flaviocopes.com/">Flavio Copes</a></li></ul><p>这个博客是一个意大利开发者维护的，内容偏向于前端和 Web 开发之类的。我欣赏这个站点是因为他在几年内几乎做到了每天都日更写博客。有时候我想写又懒癌发作的时候，就会想到这位作者。他写的东西也许并不高深，但对很多人来说有用。我之前用 SEO 工具看过这个网站的数据，Google 给他带来的自然流量非常高。</p><p><a href="https://flaviocopes.com/developer-blog/">Every developer should have a blog. Here’s why, and how to stick with it</a></p><p><a href="https://flaviocopes.com/blog-seo/">I wrote 1 blog post every day for 2 years. Here’s 5 things I learned about SEO</a></p><hr><ul><li><a href="https://jvns.ca/">Julia Evans (jvns.ca)</a></li></ul><p>这个博客也是持续更新了近 10 年，涉及的领域及其广泛。这个作者深刻启发了我的观点是，通过搞懂内部原理来学习编程：<a href="https://jvns.ca/blog/learn-how-things-work/">Get better at programming by learning how things work</a>。</p><p>当然还有很多其他类的技术类文章如：<a href="https://jvns.ca/blog/2014/12/14/fun-with-threads/">Diving into concurrency: trying out mutexes and atomics</a></p><p>而且作者做了很多技术相关的电子书，用漫画的方式讲解技术，图文并茂：<a href="https://wizardzines.com/">wizard zines</a></p><hr><ul><li><a href="http://journal.stuffwithstuff.com/">journal.stuffwithstuff.com</a></li></ul><p>花 6 年时间，用工匠精神写一本编程语言实现的书是怎样一种体验？<br><a href="http://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/">Crafting “Crafting Interpreters”</a></p><p>在这里所有的图片都是用手画出来的，字体、颜色、对齐等，所有这些细节几乎都做到完美，最终成书可以称之为艺术品。一个技术书籍竟然能做到如此优美！</p><hr><ul><li><a href="https://www.swyx.io/">swyx’s site</a></li></ul><p>主要内容涉及开发、个人成长等。<br>其中 <a href="https://www.swyx.io/learn-in-public/">Learn In Public (swyx.io)</a> 这个概念对我有很大触动，这个博客还有很多 podcast 。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做技术这么多年，我订阅了很多英文技术站点。这里介绍一些我认为非常值得关注、学习的技术站点。&lt;/p&gt;
&lt;p&gt;我推荐的标准是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;持续多年更新&lt;/li&gt;
&lt;li&gt;质量非常高，或者某些文章深刻地启发了我&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后面我会长期更新这个列表
      
    
    </summary>
    
    
      <category term="编程" scheme="http://chenyukang.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>百度是如何死掉的</title>
    <link href="http://chenyukang.github.io/2021/12/27/baidu-die-for-reason.html"/>
    <id>http://chenyukang.github.io/2021/12/27/baidu-die-for-reason.html</id>
    <published>2021-12-27T07:02:34.000Z</published>
    <updated>2022-01-10T14:08:17.359Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20211229221005.png" alt="/images/ob_pasted-image-20211229221005.png"></p><p>“百度已死” 几年前就已经被广泛讨论过，好像现在大家都不怎么讨论了。即使百度仍是最大的中文搜索引擎，但已沦为互联网度量单位，短短数年间的变化不由让人惋惜。</p><p>今天让我重新思考这个问题的是两件小事。</p><h3 id="事件一："><a href="#事件一：" class="headerlink" title="事件一："></a>事件一：</h3><p>我有一个英文小站点，断断续续写了一些技术类的文章。这一年来已经有一些稳定的流量，大部分都是从Google 来的自然流量。我曾经学了点 Amazon 推广的东西，当时把几篇文章的链接换成了亚马逊的推广链接，然后现在隔段时间就能从亚马逊收到一笔小钱，平均每个月大概 10 来块美金吧。</p><p>这个数额很小，但是这种模式确实就是很多小网站的盈利模式。这是已经被验证可行的创造被动收入的可靠方式，有的站点能做到几万美金一个月。</p><h3 id="事件二："><a href="#事件二：" class="headerlink" title="事件二："></a>事件二：</h3><p>我老婆想找一个房屋出租合同模板，结果她在百度上花了十来分钟，我看她已经开始在注册某下载网站的账号，她说要下载就得付费。我大为震惊！这个年代这种免费中文信息居然如此难以获取。然后我打开 Google 输入关键词立马解决。</p><p><img src="/images/ob_pasted-image-20211229165531.png" alt="/images/ob_pasted-image-20211229165531.png"></p><hr><p>从这两件小事上，我分别从内容创作者、互联网普通用户两个角色体验到了百度为什么会死。</p><p>百度这些年来渐渐的沦为互联网公司的度量单位，一个原因是没有拿到移动互联网的门票，另一个更根本的原因就是丢掉了信任，甚至是作恶太多。其结果不只是一个公司发展不好，甚至可以说是阻碍了中文信息的分享，并且让很多初创企业无法生存。</p><p>不知道大家有没有体会，现在互联网上的免费的、好的中文信息越来越少。曾经流行过一段时间独立站点，但是你看现在活下来的，还在好好创作内容的中小站点还有多少？</p><p>但是英文就完全不同，我们可以通过 Google 搜索到的很多结果来自中小站点，而且内容质量很高。</p><p>因为用户相信在 Google 上能找到<em>可靠的、高质量的内容</em>，内容创作者相信高质量的内容可以通过 Google 吸引到用户，有流量就可以通过各种方式来变现。所以创作者就会不断创造高质量的内容，争取能做到 Google 的搜索排名靠前。还衍生了 SEO (Search Engine Optimization ) 这样的行业，有提供咨询和服务的，有提供工具的，有提供数据的等等。这样就形成了一个正向闭环。这种的商业模式对于用户、创作者、Google 三方有益的。可以说 Google  通过搜索打造了一个超级印钞机。</p><p>但是百度选择另外一条路，因为过于短视，竭泽而渔去做竞价排名，最终破坏了这种用户、内容创作者对百度的信任。反正写得好也没流量，结果就是整个开放的互联网上，中文的高质量内容越来越少。而一些高质量的站点，比如 <a href="https://coolshell.cn/articles/9308.html">CoolShell</a> 从来不期望百度能带流量，而且做了anti-baidu 插件来提醒读者不要使用百度。用户搜索行为被分流到了各个垂直领域的 App。这些 App 很多都是对搜索引擎是封闭的，比如微信公众号，整个就是一个大的封闭生态，这样百度可以使用的信息也越来越少。</p><p>2010 年的时候，我的一个师兄在成都创业，做的是房产相关的网站。我当时快毕业了，跟着在里面实习打杂。我印象比较深的一点是，我隔壁座位的师兄时不时叹息：<em>百度账号上的钱又快没了</em>。实际上我们的业务都还没跑上正轨，但是百度已经开始收割了。很多人可能没开过做过初创公司，不信你可以试试，以公司的名义上线一个网站，要不了几个礼拜百度的销售会联系过来，问你要不要充钱。那你说我们可以不充钱啊，不充的结果就是几乎没有任何自然增长的机会 。</p><p>一个公平有效的互联网搜索引擎，应当会给这些中小企业生存机会，而不是一味的凭借自己手握流量来抢夺和豪取，吃自己的饭让别人没饭可吃。理想情况下，如果一个初创企业或个人能够提供好的信息和服务，那就应该被人们搜索到，然后逐渐成长起来。比如 <a href="https://flaviocopes.com/">Flavio Copes</a>，这是一个意大利开发者的个人站点，写的东西简单明了，Google 每天给他带来几万的自然流量，这样他可以开始自己卖电子书，逐渐摸索出了自己的业务。</p><p>当一个公司掌握了流量分发大权时，有太多的手段可以立马来钱，所以抵抗这种诱惑需要克制和智慧。</p><p>在 Google 2004 年首次公开募股的招股说明书中，包含了这几个字：“<strong>不作恶</strong>，我们坚信，从长远来看，即使我们放弃一些短期收益，作为股东，以及在其他方面，作为一家为世界做好事的公司，我们也会得到更好的服务“。</p><p>很遗憾，百度在我看来就是在作恶。从我上面的第二个例子可以看出百度已经把免费的信息拿来换钱了，其他的恶还有把卖百度贴吧，百度全家桶等等，罄竹难书。 我想如果没有百度也许我们会有一个更好的中文互联网环境。</p><p>除了百度的一些核心高管，外界估计无法知晓为什么百度这么多年都坚持做竞价排名。也许这东西就像是毒品一般，用上了之后就在资本的压力下再也无法回头。百度这些年来转头做 AI，作为普通用户我也是不抱任何期待。魏则西事件后大众对百度口诛笔伐，但是现在还是原来那个卵样。你要是想在百度上查个什么病，看几页搜索结果就会觉得自己命不久矣。</p><p>所以，百度的产品能绕开就建议不用，少给自己添麻烦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20211229221005.png&quot; alt=&quot;/images/ob_pasted-image-20211229221005.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;“百度已死” 几年前就已经被广泛讨论过，好像现在大家
      
    
    </summary>
    
    
      <category term="胡写" scheme="http://chenyukang.github.io/tags/%E8%83%A1%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>编译 WebAssembly 模块</title>
    <link href="http://chenyukang.github.io/2021/12/16/compiling-to-wasm.html"/>
    <id>http://chenyukang.github.io/2021/12/16/compiling-to-wasm.html</id>
    <published>2021-12-16T07:02:23.000Z</published>
    <updated>2022-01-10T14:08:17.359Z</updated>
    
    <content type="html"><![CDATA[<p>最近一年经常接触了 WebAssembly , 我把一些老的 C/C++ 代码通过 <a href="https://emscripten.org/docs/getting_started/downloads.html">emcc</a> 编译为 wasm 模块，也可以把 Rust 代码编译为 wasm。</p><p>这里做一个简单的总结，以及我在编译过程中碰到的问题。</p><h2 id="WebAssembly-的优势"><a href="#WebAssembly-的优势" class="headerlink" title="WebAssembly 的优势"></a>WebAssembly 的优势</h2><p><img src="/images/ob_pasted-image-20211215191320.png" alt="/images/ob_pasted-image-20211215191320.png"></p><p>WebAsembly 定义了一个<a href="https://www.wasm.com.cn/docs/portability/">可移植</a>、体积小、加载快的<a href="https://www.wasm.com.cn/docs/mvp/#binary-format">二进制格式</a>作为编译结果。通过充分发挥通用硬件的能力（包括<a href="https://en.wikipedia.org/wiki/Mobile_device">移动设备</a>以及<a href="https://en.wikipedia.org/wiki/Internet_of_Things">物联网</a>），使其在大多数平台上能达到原生的执行效率。借助 wasi，WebAssembly 还可能运行在服务端。WebAssembly 的目标包括：</p><ol><li>现有的 <a href="https://www.wasm.com.cn/docs/web/">Web 平台</a>完美结合并在其中运行：<ul><li>维护无版本、<a href="https://www.wasm.com.cn/docs/feature-test/">特性可测试</a>、向后兼容的 Web 演变过程；</li><li>和 JavaScript 执行在相同的语意环境中；</li><li>允许和 JavaScript 相互的同步调用；</li><li>严格遵守同源策略以及浏览器安全策略；</li><li>和 JavaScript 一样，可以访问相同的 Web API 去调用浏览器的功能；以及</li><li>定义一个可与二进制格式相互转化的人类可编辑的文本格式，并且支持查看源码的功能。</li></ul></li><li>被设计为也可以支持<a href="https://www.wasm.com.cn/docs/non-web/">非浏览器嵌入</a>的运行形式，这样就可能在某些场景下替代 Docker。</li></ol><h2 id="C-C-gt-wasm"><a href="#C-C-gt-wasm" class="headerlink" title="C/C++ =&gt; wasm"></a>C/C++ =&gt; wasm</h2><p>首先需要安装 Emscripten  SDK:<br><a href="https://emscripten.org/docs/getting_started/downloads.html">https://emscripten.org/docs/getting_started/downloads.html</a></p><p>移植一个 C/C++ 项目到 WebAssembly , 最简单的办法是把类似 gcc 命令换成 emcc，难点在于动态链接的第三方库，我们需要改成静态链接。一些常用的库已经被移植了，例如<em>libc</em>, <em>libc++</em> and <em>SDL</em>，这些我们不需要手动处理。不在 emcc 预装里的库，我们只需要在编译的过程中加一些额外的参数，例如我下面这个项目就用到了 PNG，JPEG 这些库：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">emcc -c dbgutil.c -o dbgutil.o<br>emcc -c qrtest.c -o qrtest.o<br>emcc -c decode.c -o decode.o<br>emcc -c identify.c -o identify.o<br>emcc -c quirc.c -o quirc.o<br>emcc -c version_db.c -o version_db.o<br>emcc -g -Oz --llvm-lto 1  -s STANDALONE_WASM *.o -o qrtest.wasm  -lm  -s USE_LIBJPEG -s USE_LIBPNG <br></code></pre></td></tr></table></figure><p>另外 emcc 编译出来的 wasm 模块默认只能做纯计算，没有网络、系统文件等。如果有系统调用则需要运行在浏览器中，用浏览器的接口来模拟某些 C 函数调用，例如 C 语言中的系统调用 <code>time</code> 在 emcc 中被替成为了 JavaScript  代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">clock: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (_clock.start === <span class="hljs-literal">undefined</span>) _clock.start = <span class="hljs-built_in">Date</span>.now();<br>    <span class="hljs-keyword">return</span> ((<span class="hljs-built_in">Date</span>.now() - _clock.start) * (&#123;&#123;&#123; cDefine(<span class="hljs-string">&#x27;CLOCKS_PER_SEC&#x27;</span>) &#125;&#125;&#125; / <span class="hljs-number">1000</span>))|<span class="hljs-number">0</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="Rust-gt-wasm"><a href="#Rust-gt-wasm" class="headerlink" title="Rust =&gt; wasm"></a>Rust =&gt; wasm</h2><p>Rust 是对 WebAssembly  支持得特别好的编程语言。我们可以使用 wasm-pack，或者安装 target:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">rustup target add wasm32-wasi<br></code></pre></td></tr></table></figure><p>然后在编译命令后面加参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">cargo build --target wasm32-wasi<br></code></pre></td></tr></table></figure></p><p>系统函数同样是个问题，有的第三方库可能会支持 wasm 格式，例如 <a href="https://docs.rs/getrandom/latest/getrandom/#webassembly-support">getrandom - Rust (docs.rs)</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://emscripten.org/">Main — Emscripten 3.0.1-git (dev) documentation</a><br><a href="https://marcoselvatici.github.io/WASM_tutorial/">WASM Tutorial (marcoselvatici.github.io)</a><br><a href="https://rustwasm.github.io/docs/book/">Introduction - Rust and WebAssembly (rustwasm.github.io)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一年经常接触了 WebAssembly , 我把一些老的 C/C++ 代码通过 &lt;a href=&quot;https://emscripten.org/docs/getting_started/downloads.html&quot;&gt;emcc&lt;/a&gt; 编译为 wasm 模块，也可以把 
      
    
    </summary>
    
    
      <category term="Programming" scheme="http://chenyukang.github.io/tags/Programming/"/>
    
      <category term="WebAssembly" scheme="http://chenyukang.github.io/tags/WebAssembly/"/>
    
  </entry>
  
  <entry>
    <title>为什么要开源</title>
    <link href="http://chenyukang.github.io/2021/12/14/why-open-source.html"/>
    <id>http://chenyukang.github.io/2021/12/14/why-open-source.html</id>
    <published>2021-12-14T07:02:45.000Z</published>
    <updated>2022-01-10T14:08:17.367Z</updated>
    
    <content type="html"><![CDATA[<p>这篇源于知乎上的一个问题：<a href="https://www.zhihu.com/question/269033309/answer/2277133157">为什么程序员们愿意在 GitHub 上开源自己的成果给别人免费使用和学习？</a></p><p>最近越发觉得，分享越多就会有更多的可能性，这里谈谈自己这些年的收获和想法。</p><p>我 2010 年开始在 Github 上分享自己的代码。在 push 代码之前我根本没想过为什么，只是因我当时学了 Git，而且又觉得 Github 很方便，可以用来备份自己的代码。</p><p>而后我就参加工作了，在工作之余我还会写一些感兴趣的代码分享到 Github，没事也经常在上面瞎逛，找一些自己感兴趣的资料和代码来学习。没想到这么多年下来，在 Github 上玩开源已经成为自己的一种习惯、爱好和生活方式。</p><p>最近一年工作轻松些了，所以有更多时间投入在这上面 (忽略最近两个月的大量提交数据，因为有个自动脚本每天在同步笔记 😁)<br><img src="/images/ob_pasted-image-20211213171045.png" alt="/images/ob_pasted-image-20211213171045.png"></p><h2 id="自我提高"><a href="#自我提高" class="headerlink" title="自我提高"></a>自我提高</h2><p>我建议任何在学编程、想提高开发技能的人参与到开源中来。</p><p>现在的软件开发已经过了刀耕火种，徒手编码的年代。很多开发需要复用大量已有的库和工具，大型软件开发是一种社会化的、集体性的智慧活动。在 Github 上分享代码，给其他开源项目做贡献，是最好的、最直接的方式来练习这种编程能力、协作能力和复用已有代码的能力。在 Github 上混久了，就形成一种自然而然做贡献的习惯，在这里我们不只是使用者，也可以是贡献者，例如：</p><ul><li>我想学学 WebAssembly，所以找来一个Runtime <a href="https://github.com/wasmerio/wasmer">wasmerio/wasmer</a> 实现看看，顺便修复一些自己发现的问题]。</li><li>我在使用这个 <a href="https://github.com/tadashi-aikawa/obsidian-various-complements-plugin/issues/30">Obsidian 补全插件</a>碰到些缺陷，提了个 PR 修一下然后和作者讨论一下怎么更完善。</li><li>在使用 Rust 开发的时候，我看到了一些重复的警告，在 Github 上一搜索发现别人也碰到过，所以我花了一些时间<a href="https://github.com/rust-lang/rust/pull/88493">提 PR 修复</a>。</li><li>我想看看 container 是怎么实现的，所以找来开源代码 <a href="https://github.com/containers/youki">containers/youki</a> 来学习，然后顺便修复自己发现的问题，后来还成了 maintainer。</li></ul><p>在开发中，使用者和贡献者是完全不同的态度，使用者在碰到问题的时候可能会放弃掉，而贡献者会去尝试发现原因、找到解决办法，在这个过程中我们可以学到很多。而且为开源做贡献属于 <a href="https://wsvincent.com/working-in-public-book-review/">Working in Public</a>，也是 <a href="https://www.swyx.io/learn-in-public/">Learn in Public</a>。Working in Public 的好处在于我们做的贡献可以算作能力的证明，参考刘未鹏十年前的<a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/">怎样花两年时间去面试一个人</a>, Github 主页是最直观的开发人员简历。这些年我换工作就碰到过认可我开源贡献的公司，面试的时候就不考八股的问题了。</p><h2 id="创造价值"><a href="#创造价值" class="headerlink" title="创造价值"></a>创造价值</h2><p>实际上绝大多数代码不值钱。纯代码不值钱，业务才能赚钱，所以代码得运行起来、或者是交流起来。如果我分享出来的代码对别人有用，就能产生价值，能产生价值就附带可以赚钱。</p><p>举个例子，我在自己看书《Enssential of Programming Language》的时候，一边学习一边把课后习题用代码实现了：<a href="https://github.com/chenyukang/eopl">my solutions to EOPL3 </a>。</p><p>这个代码如果一直留在我硬盘的某个角落，估计就是分文不值，我总不能把它当作传家宝留给我的后代。但是开源之后居然每年都会收到一些邮件咨询这方面的问题。因为这本书是国外一些大学的教材，他们学编程语言相关的课程就需要做这些编程题，还有一些项目之类的，有的同学就付费让我咨询。所以有的时候赚钱是结果的副产物。</p><h2 id="更多可能"><a href="#更多可能" class="headerlink" title="更多可能"></a>更多可能</h2><p>前段时间我看到 React 核心开发 Dan Abramov 的十年总结 <a href="https://overreacted.io/my-decade-in-review/">My Decade in Review — Overreacted</a>, Dan Abramov 在几年里就从一个 17 岁的编程小白成为行业大牛。从总结里面看好多关键节点都是因为开源和分享，开源让一个人能成长如此快。</p><p>当然每个人的故事都是独一无二无法复制的。我想分享一下自己的小例子，在学习数据结构和算法时我实现了一个生成迷宫程序，还写了一些 A* 路径规划算法相关的文章。后来上海大学有个搞生物的教授看到我的文章，问我能不能帮他们看个程序，他们需要在多个节点里计算 k-th shortest 路径。我花了一些业余时间帮他们把核心算法用 C 实现了，他们后来把文章发表了出来，还把我的名字署上了。</p><p>我可从来没想过自己会发表一篇分子生物类的文章。最近我也开始另一种副业，在 Github 上收费帮有的公司做开源。这些就是分享的奇妙之处，我不知道自己的分享什么时候就帮助了别人，同时创造了更多的可能性。</p><p>无数人的分享让开源改变了整个软件行业，这些如今牛逼的开源项目都是从最开始一个小的分享举动开始的，Linus 在分享自己的小 Kernel 时估计未曾想过整个 IT 行业被自己改变了，尤大在分享自己的前端成果时也未料到 Vue 会被这么多企业使用。</p><hr><p>最后，特别推荐这两期播客 : </p><ul><li><a href="https://avocadotoast.typlog.io/episodes/opensource">和 Vue.js 的创造者尤雨溪聊开源软件</a></li><li><a href="https://bytetalk.fm/posts/episode-6/">跟 Anthony Fu 聊聊全职开源和他的故事</a></li></ul><p>这些开发者已经实现了全职做开源这种工作形态。另外现在国内开始出现了一波用开源软件赚钱的公司，比如 PingCap，TDengine 等。我认为这是个很好的趋势，让我们这些本身喜欢写代码的除了 996 之外有了更多选择。</p><p>这是开发人员最好的时代了，一起学习和贡献吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇源于知乎上的一个问题：&lt;a href=&quot;https://www.zhihu.com/question/269033309/answer/2277133157&quot;&gt;为什么程序员们愿意在 GitHub 上开源自己的成果给别人免费使用和学习？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近越发觉得
      
    
    </summary>
    
    
      <category term="Programming" scheme="http://chenyukang.github.io/tags/Programming/"/>
    
      <category term="OpenSource" scheme="http://chenyukang.github.io/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>为什么印度人占领了硅谷</title>
    <link href="http://chenyukang.github.io/2021/12/12/why-indian-lead-silicon-valley.html"/>
    <id>http://chenyukang.github.io/2021/12/12/why-indian-lead-silicon-valley.html</id>
    <published>2021-12-12T07:02:34.000Z</published>
    <updated>2022-01-10T14:08:17.367Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间 <a href="https://finance.sina.com.cn/tech/2021-12-01/doc-ikyakumx1256967.shtml">Twitter 也换了 CEO</a>，还是一个印度裔。目前，硅谷的很多大的 IT 公司 CEO 位置都被印度裔占了，包括 Google，Microsoft，IBM，Adobe, Palo Alto Network , VMWare 等等，如今硅谷的印度裔高管已经数不过来了。这种现象逐渐成为西方媒体也在讨论的 <a href="https://www.bbc.com/news/world-asia-india-59457015">The Indian CEO Phenomenon</a>。</p><p>从我个人的经历来说，我毕业后所工作的第一家公司(模式是国内研发美国销售)，在创业六年后被印度人的公司收购了。我目前所在的公司也是印度裔 CEO，工作中接触不少印度同事。</p><p>对于这个现象，有时候会和身边的朋友同事交流。综合下来，我认为主要原因有这些：</p><h3 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h3><p>很多印度裔技术人员早年都在印度上完大学。因为印度有种姓制度，社会阶层明显。能在印度上大学的大多家庭条件和阶层都不错。我 2015 年在硅谷出差时，有段时间经常蹭印度同事的车，所以我们会聊一些日常。他吐槽说跑到美国后更累了，因为在印度家里有好几个佣人，过得可是饭来张口的生活😃。</p><p>印度的 STEM 氛围比较重，工程师算得上是一个受人尊重的职位。看过《三傻大闹宝莱坞》的可能对此有些印象。从目前印度高考情况来看，理工科是最热门的、入学门槛最高的学科。像印度理工学院这种顶尖学校，入学难度堪比麻省理工。印度好的理工学校，很多学生毕业后就去美国继续上学、工作。</p><p>所以，我们看到的去美国的印度工程师，其实也和中国类似，经过了好几轮教育体制的筛选，智力、学习能力大多都是不输中国人的。</p><p>在人数众多的 IT 公司中，领导岗位犹如部队的率领，也许枪法不是最好的，更重要的是能带队伍，做正确决策等综合能力。印度是一个非常注重商业管理教育的国家，很多印度人出于职业发展上的考虑，喜欢上商业类的双学位课程，或者像 MBA 这类的项目。</p><p>技术能力对于做 Leader 岗位来说，只是其中一个维度。当大部分都是技术上出众的时候，那么同时具备商业嗅觉、宏观判断力的人就容易突出。Google CEO 的 Sundar Pichai ，当年作为 PM 领导了 Google Chrome ，Google Drive 等明星产品。</p><h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>在公司能踏实做事固然很重要，但如果要走向管理岗，不太会表达就是个大问题。</p><p>在 IT 行业工作的印度程序员，基本都能很流利地用英语表达。日常搜索中我们经常碰到的 geekforgeeks 这种网站都是印度人做的。</p><p>很多印度人说出来的口语口音很重（部分阶层更高的印度人从小接受英语教育，所以口音更纯正一些）。典型的印度口音就像是这个<a href="https://www.youtube.com/watch?v=_IOZ8_cPgu8">视频</a> 里一样。但是这不是一个大问题，欧洲的、俄罗斯的、世界各地的非英语母语国家的人说英语都是由口音的。对于母语是英语的听众来说，有口音大多不影响理解。就像是国内北京人来听带山东、湖南口音的普通话，这完全是没有什么障碍的。在英语这块，中国的技术人员很多是应试教育的受害者，高考后荒废几年，英语日常沟通交流并不顺畅。这种现象在我这种 80 后的年龄段中还比较突出。公司最近有一些毕业生入职，总体感觉 90、00 后相对来说口语会好很多。</p><h3 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h3><p>InfoQ 曾有一篇文章对比了华人与印度裔的领导力：华人是典型的技术型领导者，主张内心修为，务实低调，倾向于个人奋斗，喜欢在技术方向上深钻；印度裔则是典型的商业型领导者，他们更关注传递价值观，注重培养沟通能力、管理能力、影响力及对商业的理解，这更贴近西方文化中领导力的内涵。</p><p>通常中国人相对内敛，表达方式含蓄，东西方这种表达方式上的偏差会在职场上造成巨大影响。所以实际上，韩国、日本能在欧美企业中做到顶尖的也相对较少。</p><p>东方文化中推崇“凡事不做出头鸟”，中国人工程师大多比含蓄和谦虚，自己做了 120 分可能才敢说出 100 分。中国传统文化中，我们推崇那种扫地僧，默默地做技术大牛，在技艺上做到顶尖，而在很多公司决策上、公共事务上成为”沉默的大多数“。这对于美国人是比较陌生的，美国人沟通倾向于直接明、强势自信的。在印度被英国统治多年，印度人的思想、文化、体质几乎都彻底被西方化，所以自然容易同美国人打交道。I</p><p>文化差异的另一方面是团结。传说“公司来了一个印度人，过段时间就是一群”。硅谷的印度人对自己族裔相互提携，非常抱团，部分原因是因为印度的种姓制度，同阶层和种姓的群体容易相互帮助。而华人圈曾经流行过一句话：“一个中国人是条龙，一群中国人是条虫” ，辛辣地批评了中国人的劣根性。北京大学著名学者钱理群先生说：今天大学所培养的，不过是一群精致的“利己主义者”。</p><p>在美国工作了三十年的前老板跟我提到过，华人里面其实暗地里相互的较劲很多，特别是同级别之间。文人相轻自古以来都有，千军万马独木桥走过的做题家，在狭窄的职场上容易引起竞争。攀比、嫉妒等会造成很大内耗，最终影响华人整体发展。</p><h3 id="国情"><a href="#国情" class="headerlink" title="国情"></a>国情</h3><p>中国和印度两国的巨大国情差异也是一个原因，这导致了两国留在美国发展的人的追求就不同。</p><p>近二十年来，因为中国人口基数红利，中国基础设施的完善，互联网对中国各个行业的渗透，国内 IT 行业迅速崛起。机会和资本都不缺，这些年来对于顶尖人才的待遇不输美国，职场天花板更高。在美国的中国技术人员大都犹豫过是否回国。现实也是，很多优秀的、有大抱负的中国人放弃了在美国职场闯荡的路径，选择回国创业或加入国内大公司。另外我发现很多程序员出去是为了逃避内卷，或者是为了孩子教育，他们追求的是工作之余“种竹浇花酿酒”。</p><p>对于印度人而言，在一个好的理工学校毕业，然后去美国赚钱、发展，这是非常理想的，几乎是唯一好的出路。因为印度本土发展落后太多，生活形态和质量也差很多。选择少反而成了优势，留下来扎根的人，自然有些渐渐就爬上去了。</p><hr><p>以上纯是些个人感受和理解，或许和实际情况存在一些偏差。</p><p>其实我们也没必要过于纠结在这点上。总体而言，我认为这些年来中国在 IT 领域取得了全球最快的发展速度，我们有自己的成功 IT 企业，也有很华人创办了成功的创业公司，例如 Zoom、Notion 等等。</p><p>但这事也值得大家思考，职场发展其实不管哪个国家都有一些共性的东西。多向别人学习，发觉自己的不足，这样才能成长和进步。共勉！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间 &lt;a href=&quot;https://finance.sina.com.cn/tech/2021-12-01/doc-ikyakumx1256967.shtml&quot;&gt;Twitter 也换了 CEO&lt;/a&gt;，还是一个印度裔。目前，硅谷的很多大的 IT 公司 CEO 位置都
      
    
    </summary>
    
    
      <category term="瞎写" scheme="http://chenyukang.github.io/tags/%E7%9E%8E%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>什么是好的技术面试</title>
    <link href="http://chenyukang.github.io/2021/12/08/the-good-tech-interview.html"/>
    <id>http://chenyukang.github.io/2021/12/08/the-good-tech-interview.html</id>
    <published>2021-12-08T09:11:49.000Z</published>
    <updated>2022-01-10T14:08:17.367Z</updated>
    
    <content type="html"><![CDATA[<p>今天正好看到两个技术面试相关的分享。结合自己这十年来的面试或者被面试经历，谈谈自己的想法。</p><h2 id="难得的面试分享"><a href="#难得的面试分享" class="headerlink" title="难得的面试分享"></a>难得的面试分享</h2><p>首先我们来看看 ReactJs 核心开发 Dan Abramov 的面试视频。这不算是正式的面试，是一个 Youtube 主播和 Dan 进行的模拟面试。<a href="https://www.youtube.com/watch?v=XEt09iK8IXs">Coding Interview with Dan Abramov - YouTube</a></p><p><img src="/images/ob_pasted-image-20211206220156.png" alt="/images/ob_pasted-image-20211206220156.png"><br>这个面试将近持续了一个小时，但是主要是后面的那个算法题耗费时间，前面几个问题都是很八股的前端面试题：</p><ol><li>let 和 const 区别</li><li>什么时候使用 redux</li><li>dangerouslySetInnerHTML 是什么，该怎么用</li><li>把一个 div 居中</li><li>把一个 binaryTree 镜像翻转</li><li>Bonus Q: 一个找兔子的算法题，兔子出现在数组的某个位置，但是每次可以跳向相邻的位置，用最快的办法找到兔子的位置。</li></ol><p>这里面有意思的点是：</p><blockquote><p>Ben: There is a library called ‘redux’<br>   Dan: “Hmmmm heard about it”</p></blockquote><p><code>Redux</code> 最初版本是 Dan 2015 年发布的……..  面试官小哥羞涩地笑了 🤣</p><p>然后，把 div 居中算是前端中的经典梗了，Dan 花了好一会时间在面试官的提示下才把一个 div 居中。如果对方不是 React 核心开发，手熟的前端可能就会开始鄙视这位“初级前端”了。这让我这种一直觉得 css 很难的前端学习者觉得信心大增。</p><p><img src="/images/ob_pasted-image-20211206221155.png" alt="/images/ob_pasted-image-20211206221155.png"></p><p>反转二叉树问题 Dan 很快就答出来了，但是从面试过程中可以看到他对怎么尽量少代码 swap 两个变量还想了一会儿。我后来看他的十年总结的博文中，职业生涯初期的一次面试也提到了这个点:</p><blockquote><p> At one point I freaked out and panicked because I couldn’t write three lines of code that swap two items in an array. I asked Jing to look away for a few seconds. She said “I know you can swap two items”, and that gave me the confidence to finish the answer and make it through the interview. I probably didn’t pass with flying colors, but I got the offer.</p></blockquote><p>最后一个算法题比较新颖，这不算红黑树式的八股算法题，倒像是一个 IQ 测试题目。可以看出 dan 也很少碰这类算法题。他花费了近半个小时在面试官的提示下，按照自己的直觉一步一步推出了答案。但是他最后写的代码是有点小问题的(没有用 2 来递增 index)，面试者看他思路是对的也没有指出来了。这里可以看到，其实结果可能并不重要，而是在解决这问题中所展现出来的思维方式方法很重要。</p><p>除去 Bonus Question，可以说这轮面试的题目大多比较常规，难度小于很多国内外大厂的面试。Dan 作为前端大咖，愿意参加这样的直播分享很难得。我感觉看到的是一个真实的工程师，在未做过八股训练下的真实表现。</p><p>这是今晚看到的另外一个面试分享， <a href="https://github.com/yihong0618/gitblog/issues/228">经历了人生体验最棒的一次面试 · Issue #228 · yihong0618/gitblog (github.com)</a>：</p><p><img src="/images/ob_pasted-image-20220101215347.png" alt="/images/ob_pasted-image-20220101215347.png"><br>我觉得比较难得的是第一面面试官的面试方式，选择一个面试者的开源项目，然后提一个小需求让他实现。这得很花面试官的心思和时间，也确实能很好地考察应聘者的编程能力和工程能力。国内这种认真面试的公司太少太少，而且一线大厂几乎不可能出现这种面试方式。</p><h2 id="我的一些经历"><a href="#我的一些经历" class="headerlink" title="我的一些经历"></a>我的一些经历</h2><p>在我十年的职业生涯中，经历过多次技术面试，作为应聘者被面试或者面试他人。</p><p>我经历过的最差的面试体验是在 2014 年。面试官没怎么看我的简历，首先让我挑两个主题，然后我能看到他在屏幕前点了点鼠标，从题库中挑选了几个题甩给我。这种感觉就是高中时候的考试体验，我需要在纸上写程序和公式。面试官全程严肃无表情，即使我主动需求交流也无果。这次面试可以说是深深地伤害了我，并给了我很大的心理阴影，导致我后来面试就会忍不住祈祷千万别再碰到这类面试官。</p><p>一些小而美的技术公司倒是更尊重应聘者。前两年我参加过一个新加坡小外企的招聘。首先第一轮面试是双方自我介绍，对方会和我聊他们公司的主要业务和技术栈，以及目前这个岗位的工作内容和职责，确定我感兴趣之后才会约第一轮技术面试。第一轮面试就是一个小的项目，需求都写清楚，但其中也留了一下自由发挥的空间。我一周的时间来完成，然后把代码发过去。第二轮技术面试首先是从那个小项目聊，为什么这么写等等，然后会引出一些技术问题，但是会从深度和广度不断地追问下去。这就有些像是平时工作中，两个同事探讨问题的状态。</p><h2 id="算法有什么用"><a href="#算法有什么用" class="headerlink" title="算法有什么用"></a>算法有什么用</h2><p>面试的难点在于，很难在短时间内了解这个人的全部技能和特点。这些包括编程能力，工程能力，技术视野，沟通能力，应对挑战的能力等。</p><p>刘未鹏曾经在<a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/">怎样花两年时间去面试一个人</a>中提到，用 Github 和书单的方法来面试。这当然是一个不错的面试方法。而大公司采用比较标准的面试，主要是为了节省时间。因为应聘者多，面试的场次多，不可能让面试官在工作之余花大时间主动了解应聘者，通常情况是面试官在面试之前匆匆扫上一眼简历。而且八股文式的面试很容易让面试官得出结论，即使这个结论包含了不少偶然性因素。</p><p>面试造火箭，入职后拧螺丝是行业常态。这也说明，我们工作中极少极少去碰这些基础算法类的东西。工作久了，我能看到很多面试官拿出一个公司的面试题，在不看答案的情况下自己也做不出来。</p><p>算法又是很多程序员所惧怕和不擅长的部分。Programming Pearls(《编程珠玑》)一书的作者 Jon Bentley 曾经说过：“<strong>90%的程序员无法正确实现二分查找算法..</strong>.”。2014 年我在广州参加一个技术聚会上，因为一个一时兴起的赌局验证过这点。当时我们那个会议室 20 多个程序员，其中有工作多年的，也有刚毕业没多久的，能在规定时间写出一个无 bug 的二分查找的确实寥寥无几。</p><p>那面试出这种题目有何意义？</p><p>算法当然对程序员很重要，特别是某些特定的领域，比如图形学、机器学习、高性能计算等等。另外如果一个程序员啃过算法这个硬骨头后，会觉得学其他都不算太难。在学习编程阶段，大量地实现数据结构和算法就是一种很好的提高编程能力的方法。我在学校最后一年刷了 POJ 500 道算法题，自我感觉编程能力大幅提高。</p><p>但我认为面试中的算法题可以当作一个下限标准，使用相对基础的、简单的编程题，会有助于筛选出编程能力不适合的应聘者。另外来自实际工作中的一些算法问题也是很好的面试题，比如上次我碰到的<a href="http://chenyukang.github.io/2021/11/29/input-complement-algorithm.html">输入自动补全算法</a>。这种问题没有唯一解，而且也很容易理解实现，通常有一定编程经验的程序员都可以实现出自己的版本。</p><p>对于绝大部分岗位来说，算法题测试不适合当作上限标准，因为专门训练过的应聘者和没训练过的差别太大。较难的、八股式的算法题对于初步筛选不太有用。一个应聘者如果能很快答这种题，可能是他刷 LeetCode 比较多，或者是刚好之前碰到过这个题。对于资深的应聘者，往往只能通过以往的项目来考察深度和广度。我认为深度比广度重要，因为如果一个人能把某个领域做得很深，如果他花时间换个领域很可能会做得好，反之则不然。</p><hr><p>总而言之，很多大公司的面试看起来八股，也有一定道理。作为应聘者，专门针对这类面试做一些针对性训练结果就会好很多。</p><p>我认为好的技术面试有如下特点：</p><ol><li>对应聘者尊重、真诚，面试是一种平等的沟通和交流</li><li>拒绝八股，更多考察实际解决问题的能力</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天正好看到两个技术面试相关的分享。结合自己这十年来的面试或者被面试经历，谈谈自己的想法。&lt;/p&gt;
&lt;h2 id=&quot;难得的面试分享&quot;&gt;&lt;a href=&quot;#难得的面试分享&quot; class=&quot;headerlink&quot; title=&quot;难得的面试分享&quot;&gt;&lt;/a&gt;难得的面试分享&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="Programming" scheme="http://chenyukang.github.io/tags/Programming/"/>
    
      <category term="面试" scheme="http://chenyukang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
