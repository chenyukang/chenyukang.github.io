<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2022-04-22T05:13:53.503Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我如何学“会”了 Rust</title>
    <link href="http://catcoding.me/p/my-experience-learning-rust/"/>
    <id>http://catcoding.me/p/my-experience-learning-rust/</id>
    <published>2022-04-21T12:35:06.000Z</published>
    <updated>2022-04-22T05:13:53.503Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220421211405.png" alt=""></p><p>最近我打算把自己的小项目 <a href="https://github.com/chenyukang/obweb/">Obweb</a> 后端用 JavaScript 重写，之前是用 Rust 写的。</p><p>重写基于以下考虑：</p><ul><li>Rust 受众少，和 Obsidian 的用户群体重合的就更少了</li><li>Rust 开发 Web 后端确实不便，虽然我也看过其他的 Rust Web Framework，但看起来都还不太成熟</li><li>在使用 Web 框架 Warp 的过程中有很多坑，而且代码看起来异常复杂</li><li>Web 开发这块 JavaScript 有很多现成的库</li><li>这个项目比较简单，性能不敏感，使用 Nodejs 也不会有大的差异</li><li>我想写写 JavaScript </li></ul><p>当初用 Rust 也只是为了练手，今天聊聊自己如何跟进这门小众而、难学的编程语言，顺便谈谈这些年我对 Rust 的一些感受。</p><p>我最早关注到 Rust 是 2014 年，当时还没发布 1.0 ，但是核心的概念和设计理念已经定了，那就是不走 GC，通过编译器保证类型和内存安全，兼顾性能和安全。</p><p>接触没多久后我试着实现一个简单的 scheme 解释器，就写这个小项目 <a href="https://github.com/chenyukang/rust-scm">rust-scm</a> 。这种几百行的项目就能很好的上手一门编程语言，因为在这个过程中会涉及输入输出、递归、测试，抽象方式等。</p><p>当时我觉得 Rust 用起来还行，但是有些部分很复杂，比如指针还有 Borrow Checker，另外最大的问题当然是第三方库太少。</p><p>那时还有一个印度程序员 ckkashyap 开了一个坑，用 Rust 写一个 Unix-like 的操作系统 <a href="https://github.com/ckkashyap/rustix">rustix: Unix kernel in rust</a> ，我看有点意思就跟着做了几个 PR。没多久他就弃坑了，转去搞一门更小众的编程语言 Nim，打算重新用 Nim 实现 xv6 <a href="https://github.com/ckkashyap/nim-xv6">nim-xv6: Translate xv6 to nim</a> 。不过我们一直保持联系，有时候在 gtalk 上聊聊。他工作了大概有 20 年，非常喜欢折腾。后来他换工作去了微软，碰巧随后几年我也去了微软，最近他给我发邮件说又开了新坑 <a href="https://github.com/lispware/minilisp">lispware/minilisp</a> ，一起来搞啊，哈哈，我们这些 Polyglot Programmer 就是这么容易见异思迁。</p><p>后来几年我也没太关注 Rust 了，只是偶尔看看官方的一些文章之类的。在这期间国内的数据库公司 PingCap 发展起来了，国内也出现了一些 Rust 语言爱好者。</p><p>中间这些年，我有时会在 <a href="https://exercism.org">https://exercism.org</a> 上写写练习，这些上面的编程题不是算法，而是一些典型的简单编程挑战，包含测试用例，非常适合用来练手在学的语言。</p><p><img src="/images/ob_pasted-image-20220420174057.png" alt=""></p><p>这个网站更好的地方在于里面有一些各个语言的爱好者当导师，你可以选择让他们 review 你的代码，这样就可以从经验丰富的导师那里学一门语言的最佳实践：</p><p><img src="/images/ob_pasted-image-20220420174816.png" alt=""></p><p>最近一年多我重新关注 Rust，发现热度比之前好多了，Github 上不少项目都在用 Rust 写 (当然也可能是我自己之前关注了一些开发者，他们继续在折腾)，相关的生态和工具链也发展起来了，比如 rust-analyzer 加上 VSCode 的开发体验非常好，比如 Cargo 管理包很好用。</p><p>Rust 近些年在区块链和 WebAssembly  两个领域发展得不错。我认为 Rust 适合那些性能和安全性要求比较高的项目，比如 Infrastructure、存储、交易之类的项目，而一般的纯业务之类的项目就不太适合。</p><p>回顾起来发现 2021 年我参与的几个项目都和 Rust 相关：</p><ul><li><a href="https://github.com/chenyukang/gomoku">gomoku</a></li><li><a href="https://github.com/containers/youki">containers/youki: A container runtime written in Rust</a></li><li><a href="https://github.com/wasmerio/wasmer">wasmerio/wasmer: WebAssembly Runtime</a></li><li><a href="https://github.com/second-state/dapr-wasm/">second-state/dapr-wasm</a></li></ul><p>可以说我学会了 Rust，能自己写些小项目，能在 Rust 的中大型项目中做贡献，也对 Rust 本身做贡献，但是我对一些语言细节不太清楚，比如我做 <a href="https://dtolnay.github.io/rust-quiz/">Rust Quiz</a> 发现好多都做不出来。事实上 Rust 因为走了一条独特的设计思路，导致语言本身比较复杂。</p><p>我的学习方法就是时不时地开个坑练手，或者去参与到一些比较活跃的开源项目中。我买了一本中文版本的 Rust 书，但是感觉没耐心看完。</p><p>对于大部分开发任务，我们没有必要掌握一门编程语言的所有细节。好办法是花尽量少的时间去掌握日常开发所需要的 80%，而不是花 80 % 时间去掌握平时比较少见的 20%。我觉得对于 Rust 来说，20% 包括宏、Unsafe，还有一些复杂的 Pointer、Pin 之类的东西，这些需要了解的时候再去看看就行。</p><p>前几天看到 geekplux 写的<a href="https://geekplux.com/posts/how-i-learned-programming">我是如何学会编程的</a> 有类似的概括：</p><blockquote><p><strong>编程只是一个工具，学习一门技术的时候要快速掌握其最核心的部分，抛弃细枝末节，直接动手实现目标，中途遇到不会的再 Google 即可</strong>。这样才是高效快速的学习方式。</p><p>学会这个思维的<strong>好处</strong>是，我后来学什么都特别快，自我总结出一套<a href="https://geekplux.com/posts/learning-by-index">学习方法</a>。但<strong>坏处</strong>是知识点掌握的不牢靠，很多细节需要现学现卖，这在日常编程中好像没什么影响，随手 Google 随手写，但面试就很差了，毕竟面试是通过考察细碎的知识点来衡量你的知识面（我不苟同这个面试方式，但确实是现在最流行的）。</p></blockquote><p>学习新东西从来不是线性的，所以如果你看别人给出一个最佳的学习路径，比如看完某本书，然后再看另外一本更深入的，然后再买个什么课….</p><p>这种路线也许可以参考，但也别太当真，学会了的标准肯定是能拿来应用。我认为绝大部分书没有官方的文档更有价值，大部分课程还没有直接在开源项目中实践更有效。</p><p>所以我建议不管是新手还是老鸟，要学一门新技术就去看官方文档，然后自己试着做些小项目，如果还想继续深入就做一些更大的项目，或是参与到开源项目中去。</p><p>通常是技术不难学，但是领域知识比较难学，因为要实践某些领域知识需要相关环境和工作内容。</p><hr><p>2022 我打算好好学一下 JavaScript 😉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220421211405.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近我打算把自己的小项目 &lt;a href=&quot;https://github.com/chenyukang/obweb/&quot;&gt;Obweb&lt;/a
      
    
    </summary>
    
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>理想中的开发者</title>
    <link href="http://catcoding.me/p/weekly-9/"/>
    <id>http://catcoding.me/p/weekly-9/</id>
    <published>2022-04-15T18:07:05.000Z</published>
    <updated>2022-04-22T05:13:53.507Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下这周看到的好内容，加上自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：</p><p><a href="https://catcoding.me/p/weekly-6/">#6 创造者和实施者</a></p><p><a href="https://catcoding.me/p/weekly-7/">#7 无聊的技术栈</a></p><p><a href="https://catcoding.me/p/weekly-8/">#8 Valve，另一种公司</a></p><p>这是第 9 期。</p><h2 id="理想中的开发者状态"><a href="#理想中的开发者状态" class="headerlink" title="理想中的开发者状态"></a>理想中的开发者状态</h2><p>你理想中的开发者状态是什么样的？</p><p>肯定不是无尽的会议和摧残的 996。</p><p>看到这位日本开发者的视频之后，我觉得这就是理想中的开发者状态。</p><p>这位独立开发者花了 6 年时间做了一个面向开发人员的 Markdown 编辑器，这里有个产品介绍视频：</p><p><a href="https://www.youtube.com/watch?v=-qBavwqc_mY">How to take notes in Markdown efficiently with Inkdrop</a></p><p>老实说，我已经找到了适合自己的 Markdown 编辑工具，但是我还是被他的视频深深吸引，忍不住试试他的产品。</p><p>他的视频里都没有说一句话，都是通过键盘敲打声音带出字幕，画面从东京街头随拍一直切换到自己临时租的小屋，整整 40 分钟他就在那里默默地使用自己的编辑器，偶尔伸个懒腰或者抿口茶，背景音就是一些好听的键盘声和轻音乐。</p><p><img src="/images/ob_pasted-image-20220415160810.png" alt=""></p><p>这太独特了！我们可以通过视频感受到他对自己产品的执着、自豪、和品味。</p><p>然后我接着看他其他的视频：</p><ul><li><a href="https://www.youtube.com/watch?v=bSMZgXzC9AA">How to build a portfolio website using Next.js, Chakra UI, Framer Motion, and Three.js</a></li><li><a href="https://www.youtube.com/watch?v=GznmPACXBlY">How I built a software agency website with Next.js and Tailwind CSS</a></li></ul><p>里面有从头到尾展示如何做一个好看的主页，跑到深山老林依着山涧泉水给朋友做网站，我想这大概就是程序员界的李子柒吧，他拍出了我理想中的开发者状态。</p><p>现实中独立开发者其实很苦，刚好我这周看到个 v2ex 上关于独立开发者的讨论，<a href="https://www.v2ex.com/t/846708">个人开发者处境是否越来越困难了</a> ，大家在诉苦国内 Andriod 独立开发者要上线一个产品越来越难。</p><p>这里还有些大环境的原因，<strong>这个年代已经是存量时代</strong>，几乎任何一个领域都存在多个竞品，用户似乎不缺少软件，问题是用户为什么要选择你的产品。</p><p>而作为个人开发者除了能写代码，还需要会营销和宣传，比如上面那位日本开发者的手法，品位、情怀、故事，这些都是代码之外的事，但在这个存量年代这些就很重要。</p><h2 id="Generative-Art"><a href="#Generative-Art" class="headerlink" title="Generative Art"></a>Generative Art</h2><p>这周我不经意间看了一些 Generative Art 相关的东西。</p><p>在我的 Ob 里一直收藏着这个介绍傅里叶的网页地址：<a href="https://www.jezzamon.com/fourier/zh-cn.html">傅里叶变换交互式入门</a> 。这个文章写得很好，已经被翻译成多国语言，非常生动地解释了傅里叶变换是如何工作的。网页上看到的动画都是通过纯 JavaScript 在 Canvas 上画出来，所有代码都是开源的。</p><p>然后我又在 B 站看到 AnthonyFu 介绍如何实现梅花的动画，<a href="https://www.bilibili.com/video/BV1wY411n7er?spm_id_from=333.337.search-card.all.click">用 Canvas 做梅花生长动画</a> 。</p><p>我之前看他的个人主页时也注意到了背景里的那个图画效果。他这在视频里介绍这也是递归的一个实现，只是中间加了一些随机性，比如长度、角度上的随机。</p><p>这两个都算是 Code Generative Art 的例子，我们通过这个关键词去搜能找到很多类似、好玩的东西。</p><p>这篇文章 <a href="https://aiartists.org/generative-art-design">Generative Art: 50 Best Examples, Tools &amp; Artists</a> 非常全面地介绍了这个主题。<br><img src="/images/ob_pasted-image-20220415150359.png" alt=""></p><blockquote><p>“What I enjoy the most is the complex and intricate results you can get from a set of simple rules.” </p><p>— Anders Hoff</p></blockquote><p>想起来我在学校的时候也做过一些简陋的类似东西，比如我这个<a href="https://github.com/chenyukang/Maze">迷宫生成器</a>:<br><img src="/images/ob_pasted-image-20220415150012.png" alt=""></p><p>动画和可视化都能给观众深刻的印象，简单的规则加上随机性就能做出很多精妙的东西。</p><h2 id="学习-Container"><a href="#学习-Container" class="headerlink" title="学习 Container"></a>学习 Container</h2><p><a href="https://iximiuz.com/en/posts/container-learning-path/">Learning Containers From The Bottom Up</a></p><p>作者写了很多 Container 相关的文章，质量都非常高。我对这些有兴趣，打算以后如果有时间也写写这个系列。</p><p>如果要学习 Container 的原理和内部实现，不一定要盯着 runc，可以看看后来一个红帽员工用 C 实现的 <a href="https://github.com/containers/crun">crun，A fast and lightweight fully featured OCI runtime and C library for running containers</a> 。</p><p>我参与的这个项目：Rust 实现容器 <a href="https://github.com/containers/youki">containers/youki</a>，里面很多都是参考的 crun 的。C 代码其实比 Go、Rust 都精简。</p><hr><p>这就是本周的分享了。</p><p>我本来打算这周离开苏州回老家待着，结果因为疫情的变化，我不敢去车站了，所以继续宅在苏州等等看吧。</p><p>大家保重！😷</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下这周看到的好内容，加上自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-6/&quot;&gt;#6 创造者和实施者&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;ht
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>成为 UP 主</title>
    <link href="http://catcoding.me/p/be-a-creator/"/>
    <id>http://catcoding.me/p/be-a-creator/</id>
    <published>2022-04-13T18:09:59.000Z</published>
    <updated>2022-04-22T05:13:53.495Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220413084633.png" alt=""></p><p>上周我录制了一个视频分享在 B 站，<a href="https://www.bilibili.com/video/BV18Y4y1H7Gu">程序员使用 Obsidian 的经验</a> 。</p><p>这算是我践行多元发展的一个尝试吧，看起来作为 UP 主我取得了一个好开头，视频发布三天已经有三千多的观看记录，播放量超过了自己公众号文章的阅读量，而且这是一个 28 分钟的视频，可比看一篇文章的几分钟要长多了。</p><p>和大家分享一下过程和收获，算是 BTS。</p><p>先谈谈动机，上次我写了一篇文章 <a href="https://catcoding.me/p/obsidian-for-programmer/">我的 Obsidian 使用经验</a> ，感觉文字在这种需要演示的场景下显得无力，因此萌发了做视频的想法。</p><p>我看过一些 Obsidian 相关的视频，有的讲解得很棒，剪辑得也很好，但太多是关于 Ob 产品的介绍、插件介绍和使用，我想看的是真实的笔记场景和流程，而且我自己总结出来的这套流程好像没有人提及过。</p><p>所以我就开干了。</p><p>前期选择和试用各种录屏工具，我总共花了大概两个小时，最后的选择是 <a href="https://obsproject.com/">Open Broadcaster Software</a> 。其他我觉得也不错的备选是 Zoom 和 B 站的必剪，以后我再试试。</p><p>录制的整个过程花了差不多一个小时，因为我没有经验，首次录制完了之后才发现没声音，然后又重新录制了一遍。</p><p>当然还是有诸多不满意，但我已经比较累了，我想这次就先这样吧，于是立刻发布了。随后我去 v2ex 发了个帖子宣传了一下，B 站的流量很不错，因为我发的帖子点击才 1400 多，那最终点进去看的也不到 1000 左右？所以后续的观看应该基本是 B 站本身的流量积累起来的</p><p>看数据统计时发现我的粉丝 100 % 男性，25 岁以下和 40 岁以上居多，难道就没有对 Ob 感兴趣的女生🤣?</p><p>另外 B 站果然是学习的好地方，通常都是深夜开始学习。</p><p><img src="/images/ob_pasted-image-20220413090508.png" alt=""></p><p>通过第一次实践我学到了：</p><p><strong>不用力求完美</strong>，因为作为新手第一次就力求完美，会导致耗费太大力气，从而产生抗拒心理。如果第一次视频比较快完成，而且我也知道了一些明显的改进点，就会想着赶紧下次实践。</p><p><strong>宣传</strong>，如果我没有在 V 站发帖，肯定是没有这么多人看的。这个朴实策略我之前也提到过：找到自己的目标受众，尽量创造出好的内容。</p><p><strong>自信</strong>，我和大多数技术人一样，不擅长演讲。但这种录视频可以很好地规避公开演说的紧张和压力，我们可以反复练习，也可以后期修改，所以做视频分享其实适合我这种内向型的人。我也怕在录音中听到自己的声音，不太好解释这种心理，反正就是感觉不真实或者和自己想象中的不一样。这次录完后我认真听了一遍，发现普通话确实不太标准，另外有时候稍显啰嗦。但我觉得内容大于形式吧，真实也是一种特色。</p><p><strong>创作者心态</strong>，当自己试着写些文章、做视频之后，会发现不自觉就抱有一种创作者心态，再去看文章、视频时会去关注一些很细的问题，想着哪些地方可以模仿学习。</p><hr><p>后续更新计划，如果时间允许我会再录一些 Obsidian 相关的视频，后续我会尝试着做技术学习、代码解读分析这方面的分享，欢迎关注<a href="https://space.bilibili.com/477825203">我的 B 站</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220413084633.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上周我录制了一个视频分享在 B 站，&lt;a href=&quot;https://www.bilibili.com/video/BV18Y4y1H7
      
    
    </summary>
    
    
      <category term="视频" scheme="http://catcoding.me/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="创作者" scheme="http://catcoding.me/tags/%E5%88%9B%E4%BD%9C%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>魔幻......</title>
    <link href="http://catcoding.me/p/complaint/"/>
    <id>http://catcoding.me/p/complaint/</id>
    <published>2022-04-10T12:13:06.000Z</published>
    <updated>2022-04-22T05:13:53.495Z</updated>
    
    <content type="html"><![CDATA[<p>今天这篇算是一个纯吐槽，我真觉得很魔幻…..</p><p>昨天我看到一个新闻，<a href="https://mp.weixin.qq.com/s/l8u9JifKDlRDoz32-jZWQg">核酸结果统计难？复旦博士生的操作火了</a></p><p><img src="/images/ob_pasted-image-20220410093443.png" alt=""></p><p>这位博士当然干了一件大好事，在疫情这种节骨眼上大量节省了手工操作的时间，为民解难。</p><p>给他点赞！</p><p>接着我就觉得悲哀、难过。</p><p>现在疫情这种紧急情况中，如果这样的事还被拿国字号媒体拿来宣传，这说明这事有些罕见。</p><p><strong>我们仍然用着最原始的数据工具和方法，人肉手工去处理大量疫情相关的数据，效率如此低下。</strong></p><p>就在前几天，我老婆给我发了一个截图，说同学所在单位 (政府机构) 要处理一个疫情的表格，要把批注导出按照小区重新组合，数据量比较大，他们百度之后不知道如何解决，问我这个老程序员能不能解决：</p><p><img src="/images/ob_pasted-image-20220410094110.png" alt=""></p><p>我纳闷了一会儿，这个对于稍微熟悉 Excel 的人应该不难吧，毕竟 Excel 有效率极高的宏操作….  而且发给我这个外人会不会涉及到隐私信息。</p><p>我说发给我试试吧，我老婆把我的号码给了那位同学，不过后来他也没发给我了。</p><p>所以，我昨天看到那个新闻后不禁感叹，复旦这还算是上海，还在人才济济的高校，能有博士出来随手解困，像我老家那种小地方呢？</p><p><strong>全国有多少我老家那种小地方，而上海只有一个。</strong></p><p>即使是做疫情的 IT 系统，技术方式仍然采用的是上世纪的。以前 VeryCD 的老大 Dash 最近在网上吐槽上海核酸检测：</p><p><img src="/images/ob_pasted-image-20220410100020.png" alt=""></p><p>我上个月在深圳的时候，发现也是这样的分了多个入口：<br><img src="/images/ob_pasted-image-20220410101840.png" alt=""></p><p>难道做这些系统的人还不知道负载均衡为何物…..</p><p>后来我看一些网友分析的，可能原因是：</p><ul><li>外行领导内行，领导觉得这样能解决问题</li><li>每个入口是一个承包商【虽然我觉得不太可能】</li></ul><p>最后看到这个解释，我释然了……<br><img src="/images/ob_pasted-image-20220410102014.png" alt=""></p><p>再想想西安「一码通」的那事，唉。</p><p>疫情已经两年多了，我们可以看到各地的流调报告仍然是在用 Word，Excel 之类的东西人肉管理，没有接口，没有系统互联，相关的信息化、数字化建设还没跟上。</p><p>而另一面，我们称自己是人工智能强国，我们互联网技术已经数一数二。</p><p>这就很魔幻…..</p><p>我们并不缺计算机人才，每年毕业几百万的应届生，其中往计算机行业转的人几乎有 1/3？每年也有大量经验丰富的 35 岁技术人员从互联网公司退下，这些都是马老师所说的<strong>为社会输送人才。</strong>…</p><p>人才输送到哪里呢？</p><p>公务员考试超过 35 岁都不行….</p><p>而这些机构单位要是稍微多招几个懂点计算机的，也不至于项目外包的时候被人坑，也不至于这么多民生相关的系统仍然只能用 IE，也不至于数据处理还需要博士使用“黑科技”来解救。</p><p>当然，我知道这很难，也很复杂，很多不能言说……</p><p>最近看了些上海疫情相关的事，心情低落，权当吐槽吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天这篇算是一个纯吐槽，我真觉得很魔幻…..&lt;/p&gt;
&lt;p&gt;昨天我看到一个新闻，&lt;a href=&quot;https://mp.weixin.qq.com/s/l8u9JifKDlRDoz32-jZWQg&quot;&gt;核酸结果统计难？复旦博士生的操作火了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img sr
      
    
    </summary>
    
    
      <category term="吐槽" scheme="http://catcoding.me/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Valve，另一种公司</title>
    <link href="http://catcoding.me/p/weekly-8/"/>
    <id>http://catcoding.me/p/weekly-8/</id>
    <published>2022-04-09T10:49:05.000Z</published>
    <updated>2022-04-22T05:13:53.507Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下这周看到的好内容，加上自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：</p><p><a href="https://catcoding.me/p/weekly-5/">#5 财富的三个车道</a></p><p><a href="https://catcoding.me/p/weekly-6/">#6 创造者和实施者</a></p><p><a href="https://catcoding.me/p/weekly-7/">#7 无聊的技术栈</a></p><p>这是第 8 期。</p><h2 id="Faster-sorting-with-Go-generics"><a href="#Faster-sorting-with-Go-generics" class="headerlink" title="Faster sorting with Go generics"></a>Faster sorting with Go generics</h2><p>Eli Bendersky 的技术文章可以作为技术写作的典范，他写这个博客已经 20 年了。</p><p>最近他写了一篇关于 Go 泛型的文章，通过排序算法来探索 Go 的泛型实现：</p><p><a href="https://eli.thegreenplace.net/2022/faster-sorting-with-go-generics/">Faster sorting with Go generics - Eli Bendersky’s website</a></p><p>文中作者实现了两个版本的冒泡排序算法，第一个版本是通过 Interface 实现，第二个版本是用泛型实现的，通过 Benchmark 发现泛型版本要快 20%。</p><p>Go 团队核心成员 Russ Cox 之前写到过：</p><blockquote><p>When a language decides on whether to have generics and how to implement them, it faces the following decision:</p><ul><li>do you want slow programmers, slow compilers and bloated binaries, or slow execution times?</li></ul></blockquote><p>不支持泛型就是 slow programmers，但是目前主流的泛型实现各有各的问题：</p><ul><li><p><strong>Slow compilers and bloated binaries</strong> 是指 C++ 那种 full monomorphization 的方式，编译器为每一处实际的泛型函数调用生成对应的函数代码，导致编译时间过长。写过 C++ 的程序员都有些体会，我以前那个公司的代码量也不至于很大，但是编译一遍得差不多一个小时。</p></li><li><p><strong>Slow execution times</strong> 是指 Java 那种 dynamic dispatch，调用的时候会动态分发，导致运行时开销。</p></li></ul><p>Go 团队采用了介于这两种之间的方法，像 int、string 这些原子型的类型就通过 full monomorphization 而其他复合类型使用 dynamic dispatch。</p><p>作者继续通过性能分析，对比反汇编后的指令来看这两者之间的差别。基于以上原理，上面的例子程序因为要排序的是 string 所以用的是 full monomorphization，这样对比 interface 版本少了 method dispatch 的时间，而且利用了编译器的另一个叫做  <a href="https://go101.org/article/bounds-check-elimination.html">bounds-check elimination</a> 的优化，这样 string 对比的时候没有 bound index 的检查。</p><p>不过既然 Go 采用的是混合的方式，也可能某些情况使用泛型的代码比 Interface 更慢，参考这篇文章： <a href="https://planetscale.com/blog/generics-can-make-your-go-code-slower">Generics can make your Go code slower</a></p><p>看起来 Eli Bendersky 的这篇文章也写了三周左右！他写博文通常会有完整的示例程序，非常严谨。</p><h2 id="180-天，每天做个简单网页"><a href="#180-天，每天做个简单网页" class="headerlink" title="180 天，每天做个简单网页"></a>180 天，每天做个简单网页</h2><p><a href="https://blog.jenniferdewalt.com/post/62998082815/after-180-websites-im-ready-to-start-the-rest-of">After 180 Websites, I’m Ready to Start the Rest of My Life as a Coder</a></p><p><a href="https://jenniferdewalt.com/">Jennifer Dewalt</a></p><p>这位女生学习编程的方式非常独特：</p><ul><li>连续 180 天</li><li>每天都完成一个虽然简单但足够完整的网页，写对应的博文</li><li>所有的代码都是开源在 Github 上</li></ul><p>她是学美术出身的，但是对互联网很感兴趣，所以想自己试着做一些东西来分享美术。我随便选了一些她完成的网页，感觉有些想法和设计不错。</p><p>比如这个 <a href="https://jenniferdewalt.com/window/page">窗户应用</a> 的效果，看起来非常逼真，而且关闭窗户的时候声音也会跟着变。</p><p>在这个过程中她学到的最重要的是：</p><blockquote><p>“Start Small. Keep Building.”</p></blockquote><p>这个女生的学习编程的方法非常好！</p><p>我虽然编程很多年，但是前端开发很少涉及，去年我想做一些东西所以自学了些前端技能。自学时我发现最有用的是这个 Github 代码仓库 <a href="https://github.com/bradtraversy/vanillawebprojects">Mini projects built with HTML5, CSS, JavaScript</a>  ，如果一个前端新手，能把这些例子都看一遍，基本就能上手了。</p><p>有的人在学习编程的时候，会有一种学生思维，比如等我先学 HTML，然后再看完这本 css 的书，然后就可以继续学 JavaScript ，然后再学 Vue 之类的。</p><p>这样很可能会磨灭学习兴趣，特别是对学习偏实际应用的前端技术而言，更好的学习路线就是想一个应用，做出来，然后再接着做更复杂的，在这个过程中边学边做，不懂的时候去补。<strong>我们要掌握的是能力，而不是知识。</strong></p><h2 id="Valve-的员工手册"><a href="#Valve-的员工手册" class="headerlink" title="Valve 的员工手册"></a>Valve 的员工手册</h2><p><a href="https://www.valvesoftware.com/en/publications">Publications - Valve Corporation</a></p><p>这个员工手册有各种语言的版本，手册里面还配有漫画，写得也很简洁，非常用心。</p><p>Valve 的这种企业几乎是独一无二的，这是他们的组织架构随着人数的变化演变：</p><p><img src="/images/ob_pasted-image-20220408230715.png" alt=""></p><p>可以看到里面完全是自由组织的一些项目组，员工自己决定做什么，加入哪个小组，手册里还说明了如何快速移动办公桌，这样你就可以随意搬到自己喜欢的项目组🤣。</p><p>每个组都有一个组长一样的角色，但主要是承担沟通枢纽的职责，而不是纯粹的管理，Valve 认为完全按照等级制度来构建公司会有严重弊端：</p><blockquote><p>等级制度会通过招募更多适合这一制度的人从而实现自我强化，让更多的人来充当下属的角色。最后，原先为客户服务的单纯目的将逐渐被成员利用体制谋求私利的欲望和行动所取代和吞噬。</p></blockquote><p>员工的成长不是等级的攀升，而是能力和收入的提升，Valve 鼓励员工向各个方面多元发展自己的能力。</p><p>这样看起来每个人都在掌握方向盘：</p><p><img src="/images/ob_pasted-image-20220408231451.png" alt=""></p><p>那这样组建公司的前提是什么？</p><p>就是要招聘到<strong>能力强而又协作、沟通足够好的人</strong>，所以他们的第一任务是<strong>招聘</strong>。</p><p>看完他们的员工手册后，引起了我的一些思考，Valve 看起来像是构建了一个乌托邦，居然还运行得如此好。</p><p>等级制度的弊端我们很容易体会到，比如员工为了晋升可能会做一些短期就有成果的事，虽然员工晋升了，但是这些事对公司而言真的是有价值的么？比如我们看到，很多公司的中层管理肆意招聘，因为手下的人多往往意味着 visibility，这在很多快速扩张的公司并不少见，而当危机真正来临的时候，大量裁员就出现了。</p><p>为什么世界上绝大部分公司是按照等级的架构来组织的，我想这几乎是刻在人类基因里的，我们可以看到在动物世界里，大猩猩、猴子、狼群等都有类似的组织形式。</p><p>另一个原因大概是，大量的优秀而又善协作的人才太少了，等级制度可以认为是精英治理，最基层的员工做的活都是单一而细分的，这样员工都是可以随意替换。</p><p>而且世界上大部分公司，所需要做的事大量是实施类工作，而 Valve 这样的游戏公司需要的是很多创意，公司性质的不同也决定了不同的组织模式。</p><p>当然，世界上有 Valve 这样的公司真是太好了！我顺便看了看这篇文章： <a href="https://www.a9vg.com/article/30432">关于 Steam、Valve 和 G 胖 你可能不知道的二三事</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下这周看到的好内容，加上自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-5/&quot;&gt;#5 财富的三个车道&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;ht
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>写作 12 年，我的经验和技巧</title>
    <link href="http://catcoding.me/p/writing-for-joy/"/>
    <id>http://catcoding.me/p/writing-for-joy/</id>
    <published>2022-04-06T12:58:06.000Z</published>
    <updated>2022-04-22T05:13:53.507Z</updated>
    
    <content type="html"><![CDATA[<p>多年以后，如果我还沉浸在写作的乐趣中，一定还记得 2019 年那位给了我鼓励和帮助的陌生读者，他帮我完整地润色了一篇长文，并给了我些提高写作的建议。</p><p>这让我赚到了第一笔稿费，当我提出用稿费感谢他时，他回复说你以后也帮助别人就好了。</p><p>最近我写文章更多了，收到一些积极的反馈，有的人也想开始写作，咨询我如何持续写作，希望我这篇文章也能帮助到这些朋友。</p><h2 id="为何而写"><a href="#为何而写" class="headerlink" title="为何而写"></a>为何而写</h2><p>大部分人高中毕业之后就再也没有尝试过写文章，没几个人天生喜欢写作，应试作文是很多人上学时所恐惧的事。</p><p>写作当然有很多实际的好处，比如赚钱，卖货，建立个人品牌等。Basecamp 的创始人 Jason Fried 曾经写到，如果你在一堆差不多的候选人中不知道选谁，那就选写作好的那个人；现在网络上也充斥着各种写作培训的广告，可见写作算是个稀缺技能。</p><p>我从 2010 年开始写博客，一直是想起来就写点，大多是随手记录技术心得，我觉得在互联网上有个自留地就很好。 </p><p>直到 2019 我才开始学着如何写好，因为我想搞个长期副业。我看到了一些人的分享和经历，他们说写作改变了自己的人生，会让人更丰富，比如 <a href="https://nik.art/why/">Why I Do What I Do</a> ，所以我也开始尝试英文写作。</p><p>为了赚钱去学习写作也挺好，起码有个目标和动力。<strong>但如果赚钱是唯一目标时，结果往往容易失望和放弃，因为这是一个投入周期如此漫长的事，短期上看也是投入产出比非常低的事，这条路上赚钱往往是副产物</strong>。</p><p>通过更密集的写作，我倒没赚多少钱，但得到了一些成长和乐趣，回想起来也是我当时解决焦虑的一个办法。现在要问我为什么写作，我认为有以下几点：</p><p><strong>我们常说写作即思考，并不是写作让人更丰富，而是思考让人更丰富</strong>。即使一个看似简单的主题，写起来之后发现好像还没想清楚，想写得好也得思考得深入和透彻。</p><p>每写完一个主题，意味着我对这个主题完成了阶段性的思考，分享之后会有畅快感，技术、非技术文章写完后都有这样的感受，我为了写而进行思考和总结，写完之后理解就更为深入了。</p><p>另一个原因是社交，年纪越大，家庭、工作所占时间更多，通常除去同事我们很难结交到更多人，这也是为什么人的年纪越大越容易孤独。</p><p>而写作是高质量社交，是和这个世界产生更多连接的方式。文字是行走的名片，读者和作者之间虽然未曾谋面，偶尔的交流就足够，通过公开写作很容易结识到兴趣相同的人。</p><p><strong>写作和分享是有乐趣的，能对抗生活中的焦虑和无聊</strong>，有闲暇安静下来写些东西分享出去，大概是最好的精神生活了。</p><p>总之，我认为写作是个长期有价值的事，所以我会继续写。</p><h2 id="写些什么"><a href="#写些什么" class="headerlink" title="写些什么"></a>写些什么</h2><p>不要怕写出来的东西太简单而被人嘲笑，不要怕没人关注，恐惧是糟糕作品的根源。刚开始就当写作是记录自己的学习和心得，是 <a href="https://www.swyx.io/learn-in-public/">Learn In Public</a> 的最直接方式。</p><p>作为技术人员，我们通常最容易开始写的就是技术。</p><p>有的人会建议只写某个细分领域，这是个好办法，也有利于品牌建设，比如 <a href="https://draveness.me/golang-book-release">Go 语言设计与实现</a> 这本书就是由一些列博文组成的，类似的还有<a href="https://www.zlovezl.cn/articles/my-book-releases/">用 Python 编程 13 年后，我把经验写成了 400 页的书</a> 。如果以后找到有持续热情的主题，我也会这样试试。</p><p>我最近喜欢写一些非技术类的主题，比如个人成长，理念，经验分享等。我曾是个技术宅，我的技术兴趣广泛， 30 岁以后我逐渐觉得技术不是最重要的，技术是工具，职位只是人生中的一个角色，而人的观念、思维、视野、家庭、健康、甚至运气等决定人生上限和幸福与否。既然有相关的思考我就会写一些相关的文章。</p><p>所以，刚开始写作就随着自己的兴趣和热情。如果还没找到特定的主题，就从轻分享开始，像我的周刊那样就写写最近看到什么好内容、我的想法是什么。这类文章看似简单，要写好也不容易，可以通过这类文章锻炼起来。</p><h2 id="如何持久"><a href="#如何持久" class="headerlink" title="如何持久"></a>如何持久</h2><p>写作固然有益，但是很多人坚持不到发现写作益处的阶段，尝试写几篇，没有什么反馈和收获，而后不了了之。</p><p>不得不说刚开始确实比较难熬。作为普通人我们只能多读多写，不断练习，<strong>写了一定数量的文章后才会获得那种乐趣</strong>。我在写了二十多篇英文长篇后才慢慢体会到心流状态。</p><p>那如何才能坚持写下去？</p><p>可以适当地给自己定一些计划，比如我今年一月份没有上班，我给自己定的目标非常大，每天一篇，最终我完成 3/4 目标，这比没有计划要好了很多。</p><p>如果你给自己定排期，自然会有一些输出的压力。应对这个压力的办法是超前一些，我一直有一些文章在同时写，预计这周发的上周基本写好了，这样留有空间就能从容应对。</p><p><strong>另外重要的是反馈，因为如果你写的东西没有任何反馈，自然就难以坚持</strong>。</p><p>反馈的另一个好处是获得写作主题，比如这篇文章就是来自读者的问题，虽然我觉得自己并未在写作上取得好的成就，但有人问也就意味着我的经验也许能给他人启发。这样就犹如一个正向反馈的轮子，转动起来之后才不容易停下来。</p><p>数据可以用来追踪结果，比如阅读量、订阅数等，这些都可以用来量化自己。但一直盯着数据容易陷入自我怀疑，为什么这篇阅读量不好，为什么关注的人少。看数据要把周期拉长，比如一个月左右回顾一次，不和别人比较，因为每个人的节奏和风格都不同，比较会带来压力。</p><p>要持续写作必须培养出习惯，得有持续输入。<strong>阅读、思考、听播客都是输入，有输入输出的正向循环后才会有习惯</strong>。</p><p>有了习惯后，写的过程无非是把平时所想记录了下来。我觉得并没有花太多时间，思考即写作，而想的过程很多是在思绪乱飞的空余时间。</p><h2 id="写作技巧"><a href="#写作技巧" class="headerlink" title="写作技巧"></a>写作技巧</h2><p>没几个人天生写得好，要写好需要刻意练习。虽然我说自己写了 12 年，但是 2019 年之前我没有认真琢磨过如何写出好文章，我所写的无非是随手记录而已。</p><p>2019 年开始，我写了接近两年的英文技术类文章，有的被人翻译为中文，比如这篇 <a href="https://www.infoq.cn/article/8stbpdw9m9xvgvc2evip">学会所有的编程语言</a> ，我看后觉得如果直接写中文我不一定写得这么细致。再看我以前的博文发现有很多地方可以提高，在写作这方面我这两年的成长超过之前十年。</p><p>究其原因，我认为是学写英文的时候我写得很慢、很细，结果这样摸索了一段时间后更有韧性了，这是刻意练习的结果。</p><blockquote><p>最基本的，是要有一次写一个词的耐心，直至达到所需的长度。太多人缺乏这种耐心了。一旦你习惯了，写起来就会毫无困难</p><p> – 黑泽明</p></blockquote><p>提高的另一个原因是我从 Medium 上看了很多文章，学习文章排版和段落逻辑。</p><p>纯技术类的文章相对好写，因为内容和范围都在那里，我们只管写清楚就好。当然我们看到很多技术类文章质量不够好，说明主动琢磨过技术写作的人不多。我推荐看看 <a href="https://developers.google.com/tech-writing/overview">Technical Writing  </a> ，陈皓翻译过一个中文版本 <a href="https://github.com/chenyukang/share/tree/main/refs">Google 技术写作</a> ，中英文写作有很多共同点，好的观点，通顺的逻辑都是相通的。</p><p>非技术写作更难一些，因为自由度太高，比如讲好一个故事，讲明白一个道理，<strong>我认为最有用的写作技巧是诚实和自然</strong>。</p><p>我曾不够自信，因为我不会使用丰富华丽的修饰，也没有文彩，文章读起来没有快感，犹如白开水。</p><p>我向朋友请教如何提高文彩，朋友说你写的不是小说，大部分是干货而已，直白点就很好。</p><p>确实如此，那些我印象深刻的文章大多是对我有所启发，而不是阅读快感。<strong>好的故事和观点、真诚表达、简洁的格式，组合起来其实就能超过很多人</strong>。斯蒂芬·金在<a href="https://book.douban.com/subject/3888123/">《写作这回事》</a>中写道：</p><blockquote><p>简洁是写作风格的第一要素。尽量简洁，少用副词修饰。</p><p>不要卖弄，不要自我陶醉，最重要的是准确描述一个故事。</p></blockquote><p><strong>公开写作需要在一定程度上保持同理心和读者视角，不能完全自嗨，但也不能完全丢掉自我</strong>。</p><p>有段时间我经常琢磨 SEO 技巧，怎样选择关键词，怎么找热门主题，如何才能让文章排名更高 —— 我犹如一个生产同质内容的机器，这样就没了乐趣。</p><p>后来看到 flaviocopes 的作者写到 SEO trick number 1: do not worry about SEO，<a href="https://flaviocopes.com/blog-seo/">write things that help people</a> ，我深受启发，如果完全为了钱和流量而写，最终就会因为没趣而无法长久地写下去，写出来的也不够好。所以，<strong>更好的心态是把写作当成倾诉和分享</strong>。</p><p>写完后自己读读，看是否顺口，逻辑上是否有问题，哪些地方不对再改改。</p><p>对于特别想写好的主题，我会长时间修改。也许我今天写了主要内容，在接下来的半个月里，我的思绪可能还会在这个主题上，也许散步、看相关资料时有了新的想法，再去修改这篇文章，文章在发布之前经过了断断续续的多次修改。</p><blockquote><p> 如果你写的文字，你自己看都像吃了黄连一样苦憋的表情，那就不要指望别人看的时候能够津津有味。 </p><p> – 村上春树</p></blockquote><h2 id="获得读者"><a href="#获得读者" class="headerlink" title="获得读者"></a>获得读者</h2><p>人们经常说内容为王，你只管写，写得好了自然就会有人看。</p><p>这话放到以前是对的，在如今资讯爆炸的年代，能静下来好好读完一篇文章的人也越来越少了，不推广就根本没人关注到你。</p><p>为了获得反馈，我们就需要稍微做一些自我推广。很多人讨厌推广，这是人之常情，之前我也害羞推广自己。我最近倒发现把自己写的发给朋友看看，或是去自己平时晃悠的社区推广一下也没什么，迈过心里那道坎就无所谓了。</p><p>如果要推广自己的文章，那就推自己非常满意的内容，人们通常不会反感被推销高质量或是对自己有用的东西。</p><p>不用每篇文章都很高质量，但是得有一小部分好内容让人记住，建立起信任感。有了一些固定读者就会有驱动力，最难的是初期滚雪球阶段。</p><p>所谓高质量通常有两种：</p><ul><li><p><em>阐述了一个很好的理念和想法，或者分享了一个很好的故事</em><br>比如我经常提 Learn In Public，我自然会把流量推到最初阐述这个理念的站点。</p></li><li><p><em>很好、很全面地给出了某个 Evergreen 主题的总结和答案</em><br>Evergreen 译为<strong>常绿</strong>，就是不会随着时间流失而失去热度的主题，例如 coolshell 的<a href="https://coolshell.cn/articles/21672.html">我做系统架构的一些原则</a> ，这种是算是常绿主题；而 2022 年十大科技新闻，Rust 社区闹分离了，这些就不算是常绿，因为过一段时间大家就不关注了。</p></li></ul><p>这叫作<a href="https://www.blogmarketingacademy.com/redwood-strategy/">红杉策略</a>，红杉树可以生长上千年，可以长到一百多米高，引人注目，犹如我们说的常绿内容。根据二八原则，少部分高质量的内容会不断带来流量。创作出少部分高质量的内容，不断保持更新，不断地推广，形成口碑效应 。</p><p>如果是写英文，我们还能期望能通过 Google 带来有些自然流量，如果是中文就不要期望百度能带来多少自然流量。</p><p>初期主要靠自己的主动推广和口碑，对于技术类文章我没发现特别好的中文社区，如果想自我推广在 v2ex、知乎试试，也可以向大号投搞，比如我就往 ruanyifeng 的周刊投过稿获得了我新域名的第一波较大的流量。</p><p>每个人获取流量的方式都不同，而且也存在偶然因素，有的人可能写了一两篇爆款就火了，有的人可能是因为被某个大 V 推了一下就成了。但我认为比较靠谱的方式就是，找到你的目标读者可能出现的地方，然后创造出好内容。</p><h2 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h2><p>如果是想短期试试手，不想折腾工具，那就选择现有的平台：</p><ul><li>中文：知乎，InfoQ，掘金</li><li>英文：Medium ，hashnode ，dev. to </li></ul><p>虽然平台各有各的问题，到好处在于不必折腾，自带流量。</p><p>如果要长期写下去那就不要依赖平台，我的博客经历过好几次平台倒闭，没有建立起固定读者。</p><p>内容最好是可以完全自己离线管理，本地编辑器撰写效率最好，文本和图片都通过 Git 管理版本，数据存储在 Github，参考 <a href="https://laike9m.com/blog/people-die-but-long-live-github,122/">People Die, but Long Live GitHub</a> 。域名用 Github Pages 之类的就行，Github Pages 也可以绑定自己的域名。</p><p>编辑工具我推荐使用带有双链支持的软件，比如 Obsidian、Logseq。我使用网页标注工具 Hypothesis 来把自己看过的东西同步到 Obsidian，写完后使用一些小脚本来自动化发布内容，具体参考：<a href="https://catcoding.me/p/obsidian-for-programmer/">我的 Obsidian 使用经验</a> 和 <a href="https://catcoding.me/p/publish-to-wechat/">如何无痛苦更新公众号</a> 。</p><p>国外大家喜欢使用 newsletter，国内习惯用公众号，公众号这种关注关系很弱，还有可能被封掉一下子就失去了读者，通过 RSS 也算是维持比较稳定的订阅关系。如果用我的自动同步的办法就把个人站点和公众号兼容了。</p><p>英文写作我还是推荐 Medium ，即使现在没那么火了，但是有流量还有认真的编辑和读者。中文技术社区我看得不多，但我看一些人在 CSDN 之类的地方写得风生水起，关键还是需要持续输出。</p><hr><p>以上是我的一些经验之谈，如果你能得到一些启发或有了写作的想法，那就很好。我相信认真写作一段时间会让你体会到丰富。</p><p>欢迎点赞、分享这篇文章，也欢迎和我交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多年以后，如果我还沉浸在写作的乐趣中，一定还记得 2019 年那位给了我鼓励和帮助的陌生读者，他帮我完整地润色了一篇长文，并给了我些提高写作的建议。&lt;/p&gt;
&lt;p&gt;这让我赚到了第一笔稿费，当我提出用稿费感谢他时，他回复说你以后也帮助别人就好了。&lt;/p&gt;
&lt;p&gt;最近我写文章更
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="副业" scheme="http://catcoding.me/tags/%E5%89%AF%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>Lex Fridman 播客 -- 高德纳</title>
    <link href="http://catcoding.me/p/knuth-interview/"/>
    <id>http://catcoding.me/p/knuth-interview/</id>
    <published>2022-04-03T19:54:06.000Z</published>
    <updated>2022-04-22T05:13:53.499Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220401203823.png" alt=""></p><p><a href="https://www.youtube.com/watch?v=2BdBfsXbST8">Donald Knuth: Algorithms, Complexity, and The Art of Computer Programming</a></p><p>我最近比较迷 Lex Fridman 的播客，发现他早期还做了很多期技术方面的访谈，而且请到的嘉宾都是些祖师爷级别的人物，比如 Donald Knuth、Bjarne Stroustrup、James Gosling、Brian Kernighan。</p><p>Donald Knuth 是有中文名字的：高德纳，1977 年访问中国前所取。</p><p>高德纳参加了两次 Lex Fridman 的录播，我看的这期是第一次，在他自己的书房里录的。这个采访非常长，我当作英语听力练习来听，断断续续听完了。</p><h2 id="早期经历"><a href="#早期经历" class="headerlink" title="早期经历"></a>早期经历</h2><p>高德纳回忆了 1957 年开始编程时候使用 IBM 650 的情景，这机器尺寸巨大，但是内存只有 4000 bytes，需要打孔纸卡 Punched card。这算是第一个量产的计算机，IBM 当时只是租给大学使用。高德纳那时候刚好是大学新生，他在这台计算机上熏陶了自己的计算思维。</p><p><img src="/images/ob_pasted-image-20220401150407.png" alt=""></p><h2 id="计算思维"><a href="#计算思维" class="headerlink" title="计算思维"></a>计算思维</h2><p>接着聊计算思维 (或是 Geek 思维)，他曾经提到根据经验推算只有 2% 的人有类似自己的<a href="https://www.red-gate.com/simple-talk/opinion/geek-of-the-week/donald-knuth-geek-of-the-week/">计算思维</a> ，而他的书就是为这些人准备的。</p><blockquote><p>I always try to keep a potential reader in mind – basically somebody who is reading my book because they want to, not because they must, and somebody who has a natural ability to do computer programming. <strong>Only about 2 per cent of the population really “resonates” with programming the way I do</strong>; but somebody ought to write books for that 2%, and I try to be one of the authors who does so. Instead of trying to impress the reader with what I know, I try to explain why the things I’ve learned impress me.</p></blockquote><p>高德纳解释了一所说的计算思维，认为自己特别擅长两件事：</p><ol><li><p>能在不同的抽象层之间自由切换，既能把大的问题拆分为小问题，也能在写程序的时候知道下一条指令是什么，知道寄存器里面存的是什么。所以他的书《计算机程序艺术》还是以指令级的 MIX 语言描述算法实现。</p></li><li><p>处理复杂逻辑和系统的能力，比如一个很复杂的算法有 10 来个 case，而每个 case 都在处理不同的逻辑，很多数学问题是基于一两个很通用的规则的，所以他比纯的数学家善于处理更复杂的系统。</p></li></ol><p>我上学的时候买过他的《具体数学》，工作后也买过《计算机程序设计艺术》，都是潦草看了几章就吃灰了。看来我可能不属于这 2% 😭，面壁中….. </p><p>我看汇编和复杂的数学公式就有点头晕。最近无聊时测试了一下 MBTI，我属于 INTP，这还算是很适合做程序员这类职业的性格特征。也许我对细节和数学抽象都达不到某个深度，但是并不妨碍我做一个应用层的程序员。</p><p>高德纳也谈到虽然大家都为了鼓励新手说人人都能学会编程，但是从自己的经验来说，他有一些领域自己非常感兴趣，而且也按照合适的方法练习，但始终都不能达到某种程度，很多领域要达到精通确实需要天分。</p><h2 id="文学编程"><a href="#文学编程" class="headerlink" title="文学编程"></a>文学编程</h2><p>在文学方面，高德纳喜欢托尔斯泰，比如《安娜卡列尼娜》这本书不仅讲述了好的故事也带有一些哲学讨论。</p><p>他于 1980 年左右提出了<strong>文学编程</strong>的概念，用近乎自然语言的形式来实现程序。他认为文学编程像是一种 informal 的方式写程序，而使用编程语言是 formal 的方式，同时用两种方式思考对于技术写作非常有用。</p><blockquote><p>My life is a convex combination of english and mathematics</p></blockquote><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>机器学习使用数据来训练模型，数据和算法都非常重要，高德纳说这看起来是非极客的方式，他很难完全相信这些算法，因为即使是搞机器学习的人，有时候也不确定算法到底从数据中学到了什么，但机器学习的方法确实扩大了算法的适用范围。</p><h2 id="写作流程"><a href="#写作流程" class="headerlink" title="写作流程"></a>写作流程</h2><p>接着高德纳描述了自己典型的写作流程，他会先在纸上把初步的想法和算法写出来：</p><p><img src="/images/ob_pasted-image-20220331225215.png" alt=""></p><p>然后站起来在屏幕前修改初稿，平均每周会写 5 个左右的程序，他会看目前该领域新的算法和论文，还会尝试自己去写程序，因为只有通过写程序验证了之后才算是彻底理解，完成算法实现后就开始写最终版本的初稿，顺便出一些数学习题给他那些数学好的朋友们做，把那些他们能完成的当作书本的习题。</p><p>插个八卦，我以前的老板是 Formal Verification 方面的研究者，他说有一次他收到了高德纳的邮件，咨询他论文里的一些细节问题。高德纳写的《计算机程序设计艺术》可以说是计算机算法领域的百科全书了。</p><h2 id="P-NP"><a href="#P-NP" class="headerlink" title="P = NP"></a>P = NP</h2><p>高德纳倾向于相信 P = NP，但认为即使是成立也可能没有现实意义。额，这段他解释了很多，但是我有的没太听懂细节，以后再学习一下 NP 相关知识。</p><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p>高德纳坦诚自己对人工智能可能不像该领域里的人那么乐观，他觉得现在这些人工智能都是假装有“理解”，和真正智能存在巨大的鸿沟。他有些担心，人们如果真的相信自己制造了的人工智能 — 假装的东西真到一定程度就会让人产生这种幻觉，那就是危险。</p><h2 id="面对死亡"><a href="#面对死亡" class="headerlink" title="面对死亡"></a>面对死亡</h2><p>其中有一段感觉谈起如何面对死亡，听起来有些伤感，高德纳在 2006 年被诊断出患有癌症，后来做了手术，最初的一段时间内他无法正常工作。</p><p>然后他觉得自己应该抓紧时间了却自己一直想做的事。年轻时高德纳就非常热爱音乐，曾经还纠结过是否选音乐专业，如今还有个愿望就是自己作曲，所以他抓紧时间成了这个夙愿，还在 80 岁左右开了音乐会。</p><p>高德纳觉得自己整个人生非常幸运，一直在做自己喜欢的事，而且也已经完成了人生中的大部分目标，剩下的愿望就是继续完成已经写了 50 年的《计算机程序设计艺术》。</p><p>Fex 最后一个问题：当你到了天堂碰到上帝，你会问什么问题？</p><p>他回答到：</p><blockquote><p>What kind of browser do you have up there…. I hope we have a good Internet..</p></blockquote><hr><p>这个访谈还有很多其他细节，有时间各位去看看也挺好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220401203823.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2BdBfsXbST8&quot;&gt;Donald Knuth: 
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="算法" scheme="http://catcoding.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>无聊的技术栈</title>
    <link href="http://catcoding.me/p/weekly-7/"/>
    <id>http://catcoding.me/p/weekly-7/</id>
    <published>2022-04-02T10:16:17.000Z</published>
    <updated>2022-04-22T05:13:53.507Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：</p><p><a href="https://catcoding.me/p/weekly-4/">#4 你对世界足够了解吗</a></p><p><a href="https://catcoding.me/p/weekly-5/">#5 财富的三个车道</a></p><p><a href="https://catcoding.me/p/weekly-6/">#6 创造者和实施者</a></p><p>这是第 7 期。</p><h2 id="使用无聊的技术栈"><a href="#使用无聊的技术栈" class="headerlink" title="使用无聊的技术栈"></a>使用无聊的技术栈</h2><p><a href="https://panelbear.com/blog/boring-tech/">On Choosing Boring Technology</a><br><a href="https://boringtechnology.club/">Choose Boring Technology</a></p><p>我们很多人都非常热衷学习新东西，讨论、实践新的框架、语言、工具也算是一些技术人员的爱好。</p><p>而这些文章阐述了这么一个道理：<strong>很多时候，技术爱好和情怀不能当饭吃，选择无聊的技术栈大多数时候是对的</strong>。</p><p>比如说做一个创业公司，更重要的问题是解决什么问题，产品能否达到要求，而选择什么数据库则属于更次要和细节的问题。人的注意力有限，这种情况下选择那些已经验证过的、无聊的、自己熟练掌握的技术栈。</p><p><img src="/images/ob_pasted-image-20220401211133.png" alt=""></p><p>新的、小众的技术栈通常有一些 unknown unknowns，就是你不知道自己会碰到什么问题，而且碰到这些问题时需要花时间去埋坑，而长时间被大量采用过的技术，该踩的坑通常被人踩过了。</p><blockquote><p>Boring is less surprising</p></blockquote><p>当然这也并不意味着我们不用去学习新东西：</p><blockquote><p>You try to maximize your expected gain by taking advantage of what worked well in the past, while sometimes exploring new things to avoid missing out on a possible goldmine.</p></blockquote><p><img src="/images/ob_pasted-image-20220401211902.png" alt=""></p><p>这方面我有些个人体会，我曾经在的中等规模的独角兽公司。2013 年左右，公司在做一些互联网产品时使用了 Ruby on Rails，RoR 在那时候算是新潮的工具。我 2014 年加入也觉得挺少见，感觉 RoR 适合那种几个人的创业团队。</p><p>后来了解到，对公司来说并没有刻意选择，可以解释为偶然因素。因为有喜欢 Ruby 的技术 Leader，然后就继续招了更多的 Ruby 程序员，代码越来越多，人也越来越多。</p><p>而这么些年后，他们就要换技术栈了，一是因为 Ruby 程序员太少了，很多人也不愿意学，毕竟人家会考虑进来干段时间之后好不好跳槽的问题，内卷的人才市场大家考虑的就是这么实际；二是一些技术问题，比如性能、社区支持等，到了如今和 Java 的开发效率也没有本质区别。</p><p>如果把时间拨回到 2013 年，更理性的选择应该还是主流的 Java？RoR 也许那个时候确实算先进生产力工具，但没经过长时间验证。</p><p>从公司 (大部分公司) 角度来说，要解决的完全是个业务问题，技术人的品味和偏好可能导致额外的技术成本。而对于很多创业公司来说，创业成功与否与所选技术栈关系不大，关键还是做的事和做事的人。</p><p>也有一些创业公司使用小众技术，比如 PingCap 采用  Rust 写存储部分，JaneStreet 大量使用 OCaml ，WhatsApp 使用 Erlang，Roam Research / Logseq 使用 Clojure 等等。</p><p>他们使用小众技术栈有其他方面的因素：</p><ul><li>通过小众技术栈吸引到强的开发者，因为这些人更多比例是 polyglot programming</li><li>有技术上的原因，比如是性能、正确性、可扩展性和灵活性</li><li>对所选技术有信心和十足把握</li></ul><p>小众技术栈不适合绝大部分创业公司，更不适合大公司，因为大公司体量大，小众技术栈并不容易大量招人，而且大量投入资源到小众技术栈投入产出比太大。大公司使用小众技术只是局限在某些组，比如 Facebook 用 Haskell 写代码重构工具，那是因为 FP 之类的语言非常适合干这个。</p><p>还有另外一些场景，某些大公司的技术 Leader，他们要做出新的业绩或者抢眼的项目，但在一个稳定的大公司要做出这些事不容易，一种群众喜闻乐见的做法就是引入新的技术栈，或者是用新的编程语言重写某些系统，我听闻在 AWS 现在一些中层的口头禅是 “Why not rewrite in Rust”.</p><blockquote><p>Adding the technology is easy, living with it is hard.</p></blockquote><p>没有银弹！</p><h2 id="焦虑的人"><a href="#焦虑的人" class="headerlink" title="焦虑的人"></a>焦虑的人</h2><p><img src="/images/ob_pasted-image-20220401220632.png" alt=""><br><a href="https://book.douban.com/subject/35539713/">焦虑的人</a> 作者：弗雷德里克·巴克曼，2021 年出版。</p><p>我在微信读书上偶然碰到这本小说，我看评分非常高所以就读了起来。</p><p>这个故事非常精妙而温暖，还充满了荒诞的喜剧效果。作者的写作手法也很独特，不断地切换视角和时间点。</p><p>故事中的每个人物都是不完美的普通人，他们有各自的背景、伤痛和焦虑，而在这场莫名其妙的人质事件中，他们用一些人类公有的同情心拯救了彼此，也接受了自己。</p><p>太喜欢这句话了：</p><blockquote><p>即使知道世界明天就要毁灭，我们今天也要种下一颗小苹果树。</p></blockquote><p>非常期待哪天这个故事能被拍成电影。</p><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/">Operating Systems: Three Easy Pieces</a> 操作系统相关论文，适合操作系统入门。</p><p><a href="https://csdiy.wiki/">CS 自学指南</a> 一个北大学生写的计算机科学自学指南，目录分类很好，粗看里面列的书有很多好的书籍推荐和公开课，非常适合在校学生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-4/&quot;&gt;#4 你对世界足够了解吗&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>优化自己的信息源</title>
    <link href="http://catcoding.me/p/get-better-info/"/>
    <id>http://catcoding.me/p/get-better-info/</id>
    <published>2022-03-31T12:43:06.000Z</published>
    <updated>2022-04-22T05:13:53.499Z</updated>
    
    <content type="html"><![CDATA[<p>我有个年纪比较大的同事，他的特点就是淡定、从容，还有些单纯。</p><p>你和他一聊，发现他对很多现在的新闻不了解，甚至不知道很多影星、歌手、网络红人。但是他并不是对什么都不感兴趣，他有自己喜欢的主题，只是除了自己喜欢的这些其他的都不关心。</p><p>可以说他的获取信息的方式是经过刻意选择的。</p><p>这有什么坏处么？我没想到，很多热闹的新闻看起来都是关我屁事，比如 xx 明星离婚了这类顶流新闻，不知道也没什么损失。</p><p>而刻意缩小自己的信息源好处显而易见，<strong>我们时间和注意力很宝贵，优化自己的信息源、甚至是获取资讯的习惯，让自己获取高质量的信息</strong>。</p><p>可以看到目前很多 App 和网站已经全面退化，如果不优化自己的信息源，我们将被垃圾包围。<br><img src="/images/ob_pasted-image-20220331122320.png" alt=""></p><hr><p>下面我要开启吐槽模式，先拿知乎来举例。</p><p>我曾是知乎的深度用户，从知乎 2011 年创建后的几个月开始使用，那时候知乎社区的整体氛围非常好。但是这么多年后的今天，我已经基本把这个 App 当作中文搜索引擎来使用了。市面上很多 App 都在学习推荐算法，而推荐算法恰恰不利于获取高质量信息。</p><p>就拿知乎来说，它的推荐栏放在了首要位置，而推荐的内容里面质量极其低下，内容里面夹杂广告不说，还非常粗暴。你看我回趟老家一路打开的就是这些，就把地点给换了一下套进了模板吧？</p><p><img src="/images/ob_pasted-image-20220330161658.png" alt=""></p><p><img src="/images/ob_pasted-image-20220330161745.png" alt=""></p><p>难道做推荐算法都不建一个用户画像么，我在知乎上搜过很多次育儿相关信息，这算法蠢到认为我还没谈恋爱？</p><p>另外这些广告点了“不感兴趣”也是没用的，大概是因为他们的广告主数量太少，反正就是不断弹出。知乎的推荐连内容去重都没做，比如一个刷存在感的推广用户，不断在各个主题下发送同样的文本内容，但是我居然能在推荐页的连续三屏都能看到相同回答。</p><p>知乎的另外一个做法是让自己的付费内容推荐给用户，让你看个开头，剩下的需要会员看才行。</p><p>行，我付费，只要是高质量的内容我付点钱我也愿意。然后我用了几天，在看电子书的时候就发现这么个鬼玩意儿：</p><p><img src="/images/ob_pasted-image-20220330162919.png" alt=""></p><p>我想到自己是尊贵的付费会员，立马打开“盐选会员专属客服”报告问题，客服说这确实不能关闭，他们正在搞个活动，然后给了我这么一个表情表示歉意：<br><img src="/images/ob_pasted-image-20220330163149.png" alt=""></p><p>还有很多知乎的细节问题我就懒得吐槽了，我不反对 App 为了流量整这些玩意，我想要的是干净的、清净的界面、高质量的内容，即使这需要付费也可以。</p><p><strong>推荐系统的目标是流量，不是让我们获取好的内容</strong>，比如今日头条这种 App，我曾经试着去上面发点东西，发现他们的编辑后台居然还有标题生成器，能自动生成一些备用标题，这些标题大多是看起来更吸引人的。我作为老古董看了后有些震惊，居然还能这么玩。</p><p>头条上的内容很多都是同质化的标题党，质量低下。知乎的另外一个趋势是抖音化，而抖音…… 我觉得是毒品。</p><p>以前我觉得这东西放在手机角落里，想搜个什么再拿出来看看就可以。但是我低估了抖音的设计，每当我搜了一个什么之后就会花更多时间去看其他的，然后就形成了每天看的习惯。抖音利用了人性中的三毒“贪、嗔、痴“，还有很多人共有的猎奇这个弱点，能极大的抓住人的注意力，让用户成瘾。</p><p>所以这东西绝对不能留在手机里，<strong>不要高估自己的自制力</strong>。</p><p>现在大部分人都已经被这个 App 降伏，每当我坐地铁、坐火车，附近的人开起来外放之后，那种背景音乐和嘎嘎嘎的笑声随之而来，我整个人都会不好。</p><hr><h3 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h3><p>吐槽了这么多，那如何优化自己的信息源和习惯？</p><p><strong>获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息，而我长期关注的信息来源一定是自己认可和刻意筛选的。</strong></p><p>主动和被动有明显的区别。比如我的四岁女儿，我发现她这段时间过多地接触视频类东西，比如动画片和网课，结果就是不能自己静下来好好看会儿书，或者玩玩具。</p><p>当一个人习惯了被动的方式之后，会排斥主动的方式。对于她来说看着这些东西就能乐呵，而自己看书和玩明显感受不同。我不想让她变成等待喂养的小萌鸡，所以想办法尽量减少她看视频的时间。</p><p><strong>主动阅读仍然是最好的获取知识和信息的方式</strong>。而看视频就得分情况，比如我想了解一个主题所以搜索一些相关视频看，或者是欣赏一个高质量的纪录片，这些都是主动的；而因为无聊刷抖音这则是被动的，这是在让低质量内容填充自己。</p><p>当我主动找到了足够多的好的资讯、书籍需要消化时，就没时间去看那些为了流量而写的东西了。目前我的主要信息来源有以下几个方式：  </p><h4 id="个人订阅"><a href="#个人订阅" class="headerlink" title="个人订阅"></a>个人订阅</h4><p>Rss 订阅现在看起来已经有点复古了，我认为这是保持个人信息源精简的好方式。</p><p>我通过 RSS 订阅了很多个人博客和 newsletter，我们发现那些质量好的内容大多来自真正的领域热爱者。</p><p>newsletter 国外用得很多，近些年 Substack 兴起，而 Substack 是绝对没有推荐机制的，完全是基于读者和创作者的订阅关系。</p><p>我们也可以使用 <a href="https://kill-the-newsletter.com/">kill-the-newsletter.com</a>  来把 newsletter 转化为 Rss feed，这样就只使用一个 App 来阅读，我这篇文章 <a href="https://catcoding.me/p/intro-to-obweb/">打造自己的工具 - Obweb</a> 介绍了自己的这个小工具：</p><p><img src="/images/ob_pasted-image-20220330172309.png" alt=""></p><p>虽然我自己写公众号，但是其他公众号我看得不太多，新加的推荐算法影响了公众号整体内容的质量，弱化了订阅的关系。</p><h4 id="主流网站"><a href="#主流网站" class="headerlink" title="主流网站"></a>主流网站</h4><p>中文社区相对来说知乎用得最多，我也偶尔逛逛 v2ex 之类的。</p><p>英文 Twitter，Medium，Dev. to，Quora，Github，HackerNews 等等。</p><p>微博偶尔看，像 Twitter 、微博这类社交应用，我认为是一个扩展自己信息源的渠道，比如看其他人发的一些有趣的和好的东西。</p><p>很多中文网站我尽量控制在搜索 (还得排除百度) 指向的时候看看，因为 <a href="https://www.zhihu.com/question/49684783/answer/2305132342">中文互联网的产出在渐渐枯萎</a> ，可以说现在整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子。</p><p>主动学习某个主题看维基百科非常不错。</p><h4 id="视频播客"><a href="#视频播客" class="headerlink" title="视频播客"></a>视频播客</h4><p>YouTube 和小宇宙，YouTube 上很多高质量计算机类课程视频，播客也是一个很好的信息源，关键是在抱娃时、开车时候也能听。</p><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p>我之前主要用 Kindle，最近使用微信读书比较多。</p><hr><p>关于如何获取更多、更好的信息，欢迎评论交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我有个年纪比较大的同事，他的特点就是淡定、从容，还有些单纯。&lt;/p&gt;
&lt;p&gt;你和他一聊，发现他对很多现在的新闻不了解，甚至不知道很多影星、歌手、网络红人。但是他并不是对什么都不感兴趣，他有自己喜欢的主题，只是除了自己喜欢的这些其他的都不关心。&lt;/p&gt;
&lt;p&gt;可以说他的获取信
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="阅读" scheme="http://catcoding.me/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>创造者和实施者</title>
    <link href="http://catcoding.me/p/weekly-6/"/>
    <id>http://catcoding.me/p/weekly-6/</id>
    <published>2022-03-26T10:07:05.000Z</published>
    <updated>2022-04-22T05:13:53.507Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：</p><p><a href="https://catcoding.me/p/weekly-3/">#3 Basecamp 的小而美</a></p><p><a href="https://catcoding.me/p/weekly-4/">#4 你对世界足够了解吗</a></p><p><a href="https://catcoding.me/p/weekly-5/">#5 财富的三个车道</a></p><p>这是第 6 期。</p><p><img src="/images/ob_pasted-image-20220326105852.png" alt=""></p><h2 id="创造者和实施者"><a href="#创造者和实施者" class="headerlink" title="创造者和实施者"></a>创造者和实施者</h2><p><a href="http://home.wangjianshuo.com/cn/20210517_%e5%88%9b%e9%80%a0%e8%80%85%e5%92%8c%e5%ae%9e%e6%96%bd%e8%80%85%e7%9a%84%e5%b7%ae%e5%88%ab.htm">创造者和实施者的差别</a></p><p>这篇文章讲述了这两个角色之间的差别。</p><p>作者认为演员是实施者，作家是创造者；类比起来开发工程师是创造者，而支持工程师算实施者；工程师是创造者，而程序员是实施者。</p><blockquote><p>虽然工程师需要具备一些开发者的技能，比如写代码，但从根本上，工程师的能力，和代码无关，而是创造一个脑子中的世界的能力。当然，这种划分并非完全分开，每个人每天都会同时做一些工程师和程序员的工作。</p><p>…</p><p>画家，作曲家，作家，建筑师，工程师，企业家，甚至一些精神领袖，都像创造者。对于精神世界里面创造一些东西，他们游刃有余。对于现实世界里面的实现，他们却未必擅长。</p><p>…</p><p>世界需要那些在思维世界不受现实羁绊而翱翔的人，也需要把这些想法变成现实的人。或许我们并没有如此幸运在自己一个人身上在两种能力都无比优秀，或许他们的思维方式本身就是互斥的。理解这种差异，才能知道自己最强的领域，并且和自己互补的人相互欣赏，组成团队达成合作，一起拼出一幅图景。</p></blockquote><p>我仔细想了想，工作内容决定了身份和角色，也许还有一个维度是深度，上限决定了有的事成与不成。</p><p>比如同样是演员，好的演员表演出来有自己的理解和风格。</p><p>所以，我认为关键点在于独创性？比如你做的事情另一个人也能做出来，那大概率是实施者。画家，作曲家，作家，建筑师，工程师，企业家这些人做的事情换一个人也许不能复制，那就是创造者。</p><p><strong>这个世界不缺实施者，但是缺创造者。</strong></p><p>思考一下自己的两种属性的比例，我认为自己在工作上基本还属于实施者，但在写作的过程中我也算个创造者，暂且不论写出来的东西如何，至少这是一种有独创性的活动 :)</p><h2 id="一个-Linux-漏洞"><a href="#一个-Linux-漏洞" class="headerlink" title="一个 Linux 漏洞"></a>一个 Linux 漏洞</h2><p><a href="https://dirtypipe.cm4all.com/">The Dirty Pipe Vulnerability — The Dirty Pipe Vulnerability documentation</a></p><p>这个文档详细描述了一个 Linux 内核漏洞的发现过程。</p><p>作者的应用出现了一个诡异的 Bug，这个 Bug 有个很诡异的现象，每当月底的时候，他们的日志文件压缩后都有几位校验码不对，这导致解压软件就无法解压，作者时不时被这个 Bug 所困扰。</p><p>但是这种偶发性的问题其实很难问题根源，光是发现那个出现日期的规律就已经过去了几个月。</p><p>作者先查遍了应用层的代码，使用排除法一层层分析，最终怀疑到是内核的问题。然后写了一个简单的 C 程序去验证果然是内核 Bug：</p><p><img src="/images/ob_pasted-image-20220324183158.png" alt=""></p><p>文中还详细解释了内核中 Pipe 和 page cache 的关联，对比内核版本之间的改动发现是由于一个很简单的 C 语言结构体里变量未初始化造成的，当然修复也就是两行代码：<br><img src="/images/ob_pasted-image-20220324183655.png" alt=""></p><p>作者最后尝试写 POC，可以利用这个漏洞可以去覆盖一个没有读权限的文件，这甚至会影响到 Andriod 设备，不过 Google 也已经合并了这个修复。</p><p>判断程序员水平的一个很好方法就是给个隐藏的 Bug，看他的分析方法和思路、如何使用各种工具，这比考八股算法靠谱多了。</p><p>看完这篇 Bug 分析我感觉像是看完了一篇侦探小说！🤣</p><h2 id="写博客-10-年得到的经验"><a href="#写博客-10-年得到的经验" class="headerlink" title="写博客 10 年得到的经验"></a>写博客 10 年得到的经验</h2><p><a href="https://ferrucc.io/posts/starting-a-blog/">ferrucc.io | Everything I’ve learned in 10 years of Blogging</a></p><p>这篇文章很长，这第一句就把人吓唬住：</p><blockquote><p>I’m 21, but I’ve been blogging for almost 10 years.</p><p>I grew up doing this.</p></blockquote><p>我完整地看完了这篇文章，不得不说这个小伙写作很好，行文流畅。里面写的很多确实和我的经验是一致的：<br><img src="/images/ob_pasted-image-20220324214153.png" alt=""></p><p>很多人自己建博客，在样式和设计上花了很多时间，折腾完之后就没写几篇，而最难的是长期持续地写出好内容。</p><p>好文章是修改出来的，他这里说 50 % 花费在写上面，其他时间做润色、画图、重写，这些是重要的细节。</p><p>这篇文章虽然长，但是读起来比较容易读，因为作者是意大利人，所以不会用那种俚语之类的，非母语写作有时反而能写出受众范围更大的文章；另外一个原因是每段都相对短，可能就一两句话，这也是现在很多人写长文所采用的方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下我这周看到的好内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式，前三期为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-3/&quot;&gt;#3 Basecamp 的小而美&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
</feed>
