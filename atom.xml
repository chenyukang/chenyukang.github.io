<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2022-03-02T14:45:08.076Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Basecamp 的小而美</title>
    <link href="http://catcoding.me/p/weekly-3/"/>
    <id>http://catcoding.me/p/weekly-3/</id>
    <published>2022-03-02T22:45:08.000Z</published>
    <updated>2022-03-02T14:45:08.076Z</updated>
    
    <content type="html"><![CDATA[<p>我每周会分享一下我这周看到的值得分享的内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式。</p><p><a href="https://catcoding.me/p/weekly-1/">#1 你可以创造运气</a><br><a href="https://catcoding.me/p/weekly-2/">#2 好的抽象和设计就像积木</a></p><p>这是第 3 期。</p><h2 id="Basecamp-的经验"><a href="#Basecamp-的经验" class="headerlink" title="Basecamp  的经验"></a>Basecamp  的经验</h2><p><a href="https://www.youtube.com/watch?v=wC14JM94BIs">10 Things I’ve Learned | Jason Fried at BIG Omaha - YouTube</a></p><p>Basecamp (37signals）为人所知主要是因为《重来》这些书籍，@dhh 是这公司的主要布道者，而 Basecamp 的创始人就是 Jason Fried。</p><p>这是个独特的小公司，刻意地慢慢发展，在产品做少做精，每周工作 4 天，居然滋润地活了 23 年了，2014 年就创造了高达 300 万美金的年人均营收（同期 Google 仅为 123 万美金）。</p><p>在这个视频中 Jason Fried 谈到他做公司和产品的一些经验，这些很多内容和《重来》有些重复，不过这个演讲还是很值得看看，Jason Fried 的演讲能力非常出色。他主要分享了这么几点：</p><p><strong>bootstrapping company</strong> : bootstrapping 是编译里的自启动，作为公司来说最好从一开始就考虑如何挣钱，如何养活自己，而拿投资意味着从一开始想着的就是如何花钱，拿投资是为了快速发展，而公司太快有很多事情会想不清楚，而且后面会有被资本控制的风险。</p><p><strong>price</strong> :  现在免费的东西太多了，不要总是免费，收费会让紧紧盯住自己的核心业务，而且收费后反而从用户那里获取到更有价值的反馈，因为用户付了钱，所以会在意。</p><p><strong>innovation is overrated, useful is underrated</strong> ： 做产品不能总是追求时髦和创新，很多时候可用性才更重要。</p><p><strong>focus on what won’t  change in your business</strong>  ：对于 Basecamp 来说，简单、快速、可靠最重要，这也许并不新潮，但从长远来看这些才是能得到回报的。</p><p><strong>DIY</strong> ： 自己理解不够的岗位不要盲目招聘。如果想招人，先自己尝试做一段时间这个岗位，比如 dhh 兼职做了两年的系统管理员。只有自己做了才知道如何面试，以及如何衡量这个岗位的工作成果。</p><p><strong>Draw a line on the sand</strong> ：公司不能什么都做，要对很多事情说“不”。</p><p><strong>Sell something, listen to the customer what they care</strong>： 这里演讲中举了他自己卖球鞋的经历，非常贴切。永远关注用户的需求和用户的在意点，做产品不能自嗨。</p><p><strong>Do less thing, do something really good</strong> :  less is always the option, less feature, less people。一个产品有很多功能，但是每个功能都不出色，这会很难而且工作量也会很大。少做，但是做精。同样的道理，公司并不是人越多越好，人少就会少很多管理工作。37signals 成立于 1999 年，到 2009 年即使用户规模扩大了很多倍，员工人数在 10 个左右。</p><p>小而美的公司曾经是个热潮，国内也出现过类似做 Basecamp 这类产品的公司，只是发展到后来都逃不过被收购的命运，比如 Teambition 2018 年被阿里收购，Tower 2020 年被收购。我认为付费意识是个方面，还有些其他复杂的原因。Basecamp 的经营理念在国内就不一定行了，至少在 SaaS 这个领域国内的用户不那么信任小公司。</p><h2 id="如何找到你真正想要的工作"><a href="#如何找到你真正想要的工作" class="headerlink" title="如何找到你真正想要的工作"></a>如何找到你真正想要的工作</h2><p><a href="https://world.hey.com/jason/how-to-land-the-job-you-really-want-dcf208ab">How to land the job you really want (hey.com)</a></p><p>还是 Jason Fried 的博客文章。Jason Fried 基本每周左右会写篇博客，而 dhh 基本每两天写一篇。Jason Fried 的博文相对好读很多，而 dhh 的文章涉及面很宽泛，有的读起来会难懂一些。</p><p>在最近的这篇文章中介绍，Basecamp  从 400 多个应聘者中招了一位 Email Marketing Manager 。这位应聘者特别用心，做了一个非常好、独特的求职信和简历：<a href="https://jobsapp.info/basecamp/">Meet your new Email Marketing Manager </a>，看了这封信和简历后几乎没有特别的理由拒绝这位候选人。</p><p>这真是个非常好的思路，好的工作通常竞争激烈，要脱颖而出可以详细地说明你对这个岗位的理解，对公司文化、产品的理解，以及自己已经为这个岗位做了哪些努力和成果。</p><p>求职信在国内很少见，一份用心写的求职信我觉得还是能加分不少的。</p><h2 id="Lisp-生产环境运用"><a href="#Lisp-生产环境运用" class="headerlink" title="Lisp 生产环境运用"></a>Lisp 生产环境运用</h2><p><a href="https://www.grammarly.com/blog/engineering/running-lisp-in-production/">Running Lisp in Production | Grammarly Engineering Blog</a></p><p>Grammarly 使用了很多种编程语言，比如 Java、Go、Erlang，在一个公司使用多种编程语言可能是一个技术债，最好使用语言无关的基础工具 (language-agnostic infrastructure tools)，比如 StatsD、Graylog2。</p><p>我倒是没看出来 Grammarly 的 core grammar engine 为什么非用 Lisp 。后面提到了 Lisp 提供了一些非常独特的开发和调试体验，用 SLIME 这样的工具可以在远程起一个 console 来进行任何代码上的操作，trace 可以很好的帮助调试。</p><p>这种体验在 Clojure 上开发也有，REPL (Read–Eval–Print Loop)  确实是那种很不同的编程体验，想了解更多可以看看这篇文章：<a href="https://vvvvalvalval.github.io/posts/what-makes-a-good-repl.html">Val on Programming: What makes a good REPL? </a></p><p>另外，我也才知道 Grammarly 是一个乌克兰公司。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://jvns.ca/blog/2022/02/20/things-that-used-to-be-hard-and-are-now-easy/">Things that used to be hard and are now easy</a> 这些事几年以前很难，现在已经变得很简单了。</p><p><a href="https://github.com/nusr/hacker-laws-zh">💻📖对开发人员有用的定律、理论、原则和模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每周会分享一下我这周看到的值得分享的内容，加上我自己的一些个人理解和评注，这算是一种比较轻的持续输出方式。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catcoding.me/p/weekly-1/&quot;&gt;#1 你可以创造运气&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="weekly" scheme="http://catcoding.me/tags/weekly/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>程序员如何做副业</title>
    <link href="http://catcoding.me/p/side-hustle-for-programmer/"/>
    <id>http://catcoding.me/p/side-hustle-for-programmer/</id>
    <published>2022-02-27T19:28:05.000Z</published>
    <updated>2022-02-28T05:28:05.868Z</updated>
    
    <content type="html"><![CDATA[<p>有些人问我程序员如何做副业。我有一些经验，但是并不算多，因为我自己也在摸索中。下面我谈谈自己的一些思考和理解。</p><h2 id="为什么做副业"><a href="#为什么做副业" class="headerlink" title="为什么做副业"></a>为什么做副业</h2><p>我认为主要有以下几个好处：</p><p>副业是一个备用选项，可以让我们尝试如何能不依赖组织，自己创造价值、自己摸索出一条业务。</p><p>副业可以多方面发展自己，因为在公司做可能只是涉及某一方面，做副业可能涉及到如何找需求，如何营销，如何谈价，如何保持收支平衡等等各方面。这也许是创业之前的尝试。</p><p>如果想多赚钱，给公司打工明显是一个慢车道，在慢车道上你不容易撞车，也很不能很快到达财富自由这个目的地。注意，这里的财富自由不单指赚很多钱，还包含那种被动收入能满足所需，这样也算自由了。很多人想搞有些副业，也是为了追求这种自由。</p><p>兴趣，很多人发展副业完全是因为兴趣爱好，愿意投入时间在自己感兴趣上的事上。</p><p><strong>总而言之，副业是一种相对小成本的方式来做各种可能性尝试。</strong></p><h2 id="副业绝不是刚需"><a href="#副业绝不是刚需" class="headerlink" title="副业绝不是刚需"></a>副业绝不是刚需</h2><p>副业听起来很美好，那是否所有人都应该去做副业？特别是疫情这样的灰天鹅事件出现以后，人们发现工作是很没有保障的，有些人甚至喊出了刚需副业，副业比主业更重要这样的口号。</p><p>我们网络上看到的教你月入多少、保证你能做成的 99% 是收割智商税，一定能挣钱、好挣钱的事谁还拿出来教别人？</p><p>实际上很多人也不适合做副业。</p><p><strong>如果你处于刚毕业没多久，事业处于爬坡期，那就好好拼一把主业，不管是从专业技能还是业务方面，多投入时间提高自己</strong>，副业也可以关注，但是不要花太多精力，因为这可能会影响主业。</p><p>任何行业都需要一定时间的积累，如果还没做好积累就花时间做积累，副业以后再考虑。</p><p>另外，如果主业工作已经很忙很累，这种情况做副业只会更累，对身体不好，而且更多的结果可能是两方面都没做好。如果真想做副业，那就得先换工作或者用其他办法让自己有空余时间。我上一次换工作，有一部分原因就是我需要把主业所占的精力和时间降低。</p><h2 id="如何做副业"><a href="#如何做副业" class="headerlink" title="如何做副业"></a>如何做副业</h2><p>所以，副业的前提是：</p><ul><li>有时间和精力来折腾</li><li>自己的主业进入了瓶颈期和疲劳期</li><li>有些想法，有感兴趣的领域，想做点尝试</li></ul><p>下面我们谈谈一些可能的副业，以及我自己的思考。我没法告诉你一个具体能做成的副业，或许能给你一些启发。</p><h3 id="个人品牌"><a href="#个人品牌" class="headerlink" title="个人品牌"></a>个人品牌</h3><p>现在有了个人品牌才可能得到流量和注意力，这是很多事情的开端。</p><p>很多副业不是自己找到的，而是别人通过你的个人品牌找到的。因为现在大家在网络上的时间太多了，个人品牌就如同你逛街看到的广告牌。有了个人品牌别人会向你发问，你只要能帮忙解决掉别人的问题，就会有收入。</p><p>有非凡成就的人自带个人品牌，而如果是平凡人，可能需要常年累月的积累和主动输出。</p><p>我在知乎上混了 10 年 (回答问题不多🤣)，才积累几千关注者，我在 Medium 上写了两年才积累 2 K 左右读者，爆火的公众号仙人 JUMP，写公众号之前已经写了 10 多年网文。</p><p>虽然如此难，但是个人品牌的建立任何时候都不晚，<strong>因为大多数人都不会去输出，而做了的大部分人都不会坚持</strong>。</p><p>我最近半年经常看一个推主 <a href="https://mobile.twitter.com/coolXiao">@coolXiao </a> 的推文和文章，他也是中年突发想做点新的尝试，我觉得这点说得很有道理：</p><p><img src="/images/ob_pasted-image-20220227172243.png" alt=""><br>想通了这点，就可以解决一些困惑，比如现在公众号已经是红海了，还有必要投入吗？</p><p><strong>市场上大多数人都是信息的贩卖者，原创者很少</strong>。所以如果是打算做原创，并且要创造出比其他人更好的同类内容，那什么时候进场都不是事。如果是打算学着做，红海不红海更没有关系。</p><p>当然，网络上的爆红也有些偶然因素，但不去尝试那是更没有可能性。</p><h3 id="提供服务"><a href="#提供服务" class="headerlink" title="提供服务"></a>提供服务</h3><p>给他人提供技术咨询，这类活也通常需要一定人脉积累和个人品牌。如果你做到某个领域优秀或者顶尖，就不缺这类机会。</p><p>还有其他类的服务，比如内推这类事情就是顺手一做的事情。现在内推这行也很卷了，比如有的人做个网站，上面全是各公司的面试题，然后顺带内推。内推说白了是兼职 HR 和猎头，是一个投入可大可小的事情。</p><p>去接平台接项目也算是一种服务，接项目不是一种好的副业，因为通常你接到的项目还抵不过公司给的时薪。除非是极少的个别项目，但这种项目投入的精力和时间也多。这里面还得涉及谈价，收款等麻烦事。</p><p>国内的那些外包平台我不看，国外也有一些平台接外包项目，一上去就可以看到一群印度人和你竞争，而且你可能并不占优势，因为人家英语溜、开价低廉。</p><p>接项目这事终究还是出卖劳动力，和在公司编码一样的，一次性投入一次性产出。我也还做了点在 Github 上做收费开源的这类活，因为我刚好对那个领域有些兴趣。</p><p>提供服务不一定是技术范围内的事，我有个前同事得副业是做咨询教练，为此去考了相关的教练资格证。</p><h3 id="数字资产"><a href="#数字资产" class="headerlink" title="数字资产"></a>数字资产</h3><p>创造个人的数字资产，这是一个不错的方向。写个软件，做个网站，制作课程，拍个视频，写些文章，都可以称之为数字资产。</p><p>数字资产的好处是可以多次销售和推广，同时也可以顺带做个人品牌。</p><p>现在随便做个网站、APP 就能发财的事越来越少了，需求越来越细分，做的事情越来越垂直。</p><p>副业来做软件开发的人很多是兼职的独立开发者，我们可以看看思否的统计数据，<a href="https://segmentfault.com/a/1190000039910514">2020 中国独立开发者生存现状调研报告</a> ，我不确定这数据是否真实：</p><p><img src="/images/ob_pasted-image-20220214104052.png" alt=""></p><p>程序员做开源也可以算作是数字资产，如果你的代码被足够多人用到，就有机会获得赞助，比如这位中国开发者 <a href="https://github.com/sponsors/egoist">egoist</a> 。</p><h3 id="发现机会"><a href="#发现机会" class="headerlink" title="发现机会"></a>发现机会</h3><p>我之前大疆的一个同事，从外表看起来他是最老实的工程师，每天兢兢业业完成工作，看起来无欲无求的那种。</p><p>突然某天他要离职了，他在大疆工作时就开始通过网络做无人机的返利推广。大疆有一个类似推广返利的项目，别人通过他的链接购买了商品，他就可以拿到一定比例的返利。</p><p>他做的事情就是把自己的推广链接放到百度问答，一些论坛之类的地方，当大疆发布新机的时候，一个月可以赚上近十万。他边工作边筹划着副业，顺便做个小网站。具体故事请参考<a href="https://98ct.com/2019/11/how-can-i-earn-the-tesla-by-dji-drones/">我是如何凭借大疆无人机的风口开上特斯拉的？</a></p><p>后来他离职自己做无人机自媒体，然后开始接货卖货，完全成了自由职业者。最近和他聊了一下近况：</p><p><img src="/images/ob_pasted-image-20220213214416.png" alt=""></p><p>要发现机会需要平时多观察、琢磨和积累，我在大疆的时候写这个推广者联盟的代码，但是我并不太懂网络营销，对无人机也没什么太大的兴趣，所以即使我知道这东西能赚钱，但是我没捞上一分钱。 </p><p>程序员通常最容易出现的问题是被技术视野限制，很多时候了解行业外的人和事，不要总是局限于技术，也许会有更多机会。</p><h3 id="被动收入"><a href="#被动收入" class="headerlink" title="被动收入"></a>被动收入</h3><p>这是一种很好的模式，因为这可能会让我们从无尽的工作中逃离出来。被动收入虽然听起来美好，但非常难，<strong>因为正常社会需要绝大部分人来搬砖保持运行，如果大家都被动收入了谁来不断创造？</strong></p><p>投资是常见的制造被动收入的方式，用钱来挣钱。但是投资也有风险，还依赖本金的大小等因素。</p><p>我们如果用英文 Passive Income 去搜索，发现很多人在做的是刚才我说的返利，就是 Affiliate Marketing，这是世界上很好的一种模式，谷歌加上亚马逊返利项目，养活了世界上无数的中小网站。</p><p>很简单，亚马逊返利就是别人通过你的链接购买了东西，亚马逊给你一定比率的返利。Google 可以给高质量内容带去流量，所以很多人做 Google SEO 优化，很多人做内容优化，争取到 Google 的第一页。这种模式对用户、Google、亚马逊都好，用户获得高质量内容和返利，Google 获得用户信任和高质量内容，亚马逊获得流量和营业额。但是在国内为什么中小站点无法获取流量呢？因为国内某搜索引擎作恶了。</p><p>我自己也很快地走通了这个模式，比如在 Google 上搜索这个关键词，我的页面排在第三位，我的文章里就有亚马逊链接。</p><p><img src="/images/ob_pasted-image-20220214000054.png" alt=""></p><p>我放的链接不多，而且我的网站流量也不算多，但我已经可以每个月收到一笔钱，而我的这个网站的投入是多少呢，日常就是五美金一年，我的内容放在了 Github Pages，所以不要服务器的费用。</p><p>当然，做 SEO 这些早些年可能更流行，现在这行很卷，要通过高质量内容拿到 Google 排名不容易。Google 还是非常的智能，可以判断出低劣的、抄袭的内容。目前我们看到很多计算机类的技术网站，其实是印度人做的，我和 <a href="https://reactgo.com/">Reactgo</a> 的作者之前交流过，他说 geeksforgeeks 这类站点非常赚钱，印度人还是有些人在以 blogging 为生。</p><p>Affiliate 如果在某个垂直领域做好了，这就是一个造钱机器，深圳就有一些以这种模式作为主要收入方式的人，只是具体别人做哪个垂直领域，细节方面不会分享出来。中国人在这块天然处于劣势，因为英语会阻拦掉很多人。</p><p>另外一种被动收入就是把<strong>数字资产和流量结合起来</strong>，比如我之前分享过的亚马逊工程师写 AWS 电子书，自己贩卖。</p><p>制造被动收入的关键是把整个流程打通，这样当你睡觉，吃饭，带娃的时候，整个系统都在运行和赚钱，不用一直投入时间和精力。</p><p><strong>当然整个过程会很漫长，而且拿到流量，建立信任，制作内容每一个都是不简单，如果一个人能做好，活该他赚钱和获得自由。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也许还有其他副业，比如投资之类的，我没有谈及，因为这些我不太了解。</p><p>我认为好的副业不是再次出卖劳动力。好的副业需要类似创业者的某些素质，这包括：</p><ul><li>某领域内的顶尖，多个领域的知识和能力</li><li>对某领域的兴趣和爱好，长久的坚持</li><li>发现机会，发现真实问题和需求，提出解决办法</li></ul><p>技术通常不是最重要的，重要是有效地解决问题和满足真实世界的需求。如果还不清楚自己想做什么，可以先从建立个人品牌着手，或者其他任何有复利效应且能提高自己的事情，很多事做起来了才能有些新想法。</p><p>副业可能是为了挣钱，自由，探路，兴趣等等。做得不好也不必焦虑，上班低头做事，副业抬头看路，带着一种探索的心态来做副业就很好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有些人问我程序员如何做副业。我有一些经验，但是并不算多，因为我自己也在摸索中。下面我谈谈自己的一些思考和理解。&lt;/p&gt;
&lt;h2 id=&quot;为什么做副业&quot;&gt;&lt;a href=&quot;#为什么做副业&quot; class=&quot;headerlink&quot; title=&quot;为什么做副业&quot;&gt;&lt;/a&gt;为什么做副
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="副业" scheme="http://catcoding.me/tags/%E5%89%AF%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>好的抽象和设计就像积木</title>
    <link href="http://catcoding.me/p/weekly-2/"/>
    <id>http://catcoding.me/p/weekly-2/</id>
    <published>2022-02-24T10:38:06.000Z</published>
    <updated>2022-02-24T11:48:07.647Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的 Newsletter 第 2 篇。</p><p>我很喜欢玩乐高，我发现很多好的抽象、设计的使用体验就像玩积木，比如现在这些迅猛发展的云服务、比如 Notion。每个组件都不复杂，掌握规律后很容易组合成我们想要的作品。</p><h2 id="云服务架构节省成本"><a href="#云服务架构节省成本" class="headerlink" title="云服务架构节省成本"></a>云服务架构节省成本</h2><ul><li>以不到 400 美元处理每月 80TB 和 500 万的访问量</li></ul><p><a href="https://blog.polyhaven.com/how-we-handle-80tb-and-5m-page-views-a-month-for-under-400/">How we handle 80TB and 5M page views a month for under $400 – Poly Haven Blog</a></p><p>云服务这些东西用起来虽然方便，但是很容易出现资源浪费。我之前的公司一直使用 AWS，后来管理层觉得钱花得实在有点多，后来我们部门稍微优化一段时间，成本降下 1/3。</p><p>这篇文章详细讲述了 Poly haven 如何通过各种云服务来应对大量数据请求。</p><p>Poly haven 是一个专门用来让游戏开发者共享资源的网站，比如模型、纹理等等。这个组织非常透明，他们接受捐赠，然后把所有的花费都显示在个页面上：<a href="https://polyhaven.com/finance-reports">Finance Reports • Poly Haven</a>。</p><p>节省成本的方法简而言之就是缓存一切能缓存的东西，让缓存的命中率尽量地高。</p><p>缓存主要使用 Cloudflare 当 CDN，Cloudflare 和用来替代 S3 的 Backblaze 之间有流量联盟，一起用的话存储就不要钱了。</p><p><a href="https://firebase.google.com/products/firestore">Google Firestore</a> 用来作 Database，Vercel 用来跑 Web Server，系统中还有个 Vultr 服务器专门跑 API。我觉得这个 Vultr 跑的 API 是不是可以换成 AWS Lambda 一类的东西？至少没有单点问题，不过费用上不知道会不会更贵点。</p><p>顺便分享一下，我最近把自己的站点从 Vultr 迁移了出来，因为我的服务器跑了很久了，一个偶然的因素我重启了一下服务器，然后就 …… 再也起不来了，我的网站也处于停服状态。</p><p>我立马给 Vultr 发个 Ticket，这是我得到的回复：<br><img src="/images/ob_pasted-image-20220218223308.png" alt=""></p><p>我看了头大，一狠心就往 Github Pages 上移。过了不到一个小时他们客服问我解决了么，我回答说：Yes, What I’m doing is migrating to Github Pages, and I’m almost done.</p><p>原本我认为搞什么 ssl 证书会麻烦点，没想到 Github Pages 已经和 Let’s encrypt 集成了，不用管服务器真是香！</p><p>未来做业务的大部分公司，可能更需要的是对各种云服务非常了解的架构师，这种架构就有点类似自由式乐高，我们需要对组件了如指掌才能搭出节省成本的作品。</p><h2 id="Notion-创始人的一个访谈"><a href="#Notion-创始人的一个访谈" class="headerlink" title="Notion 创始人的一个访谈"></a>Notion 创始人的一个访谈</h2><p><a href="https://linmi.cc/15951.html">Notion CEO Ivan 专访：即使不会编程，人人都可以成为工作达人 - Linmi</a></p><p>Notion 的“积木感”在于页面无限嵌套，也在于一个简单的 ‘/‘ 让你选择下一个零件。</p><p>Notion 是由华人 Ivan 创建的，好像很多人都不知道这点，毕竟大家都还在吐槽 Notion 的中文支持得不够好和国内访问都不稳定。</p><p>这是创始人 Ivan 两年前接受韩国媒体的访谈，如果你对 Notion 感兴趣应该去看看。其中谈到了 Notion 的设计原则：</p><blockquote><p>Q：有人说 Notion 简洁和直观性和苹果公司很像。</p><p>A：简洁是 Notion 的重要价值。用户们应该感到轻松和易于操作。品牌也是如此，我们希望用户想到 Notion 的话就能想到‘铅笔’。要像身体的一部分一样，成为自然而熟悉的工具。即使不会编程，也要让每个人都能直观地用鼠标解决所有问题。我们觉得自己是制作工艺品（craft）等工具的艺术家。</p></blockquote><blockquote><p>Q：Notion 的简洁感的哲学基础是什么？</p><p>A：我出生在中国，儿时移居加拿大。所以很熟悉东亚的儒学。Notion 的设计和开发哲学也与‘中庸’的概念有着深刻的共鸣。比起过分强调功能或追求变化，更保守地包含了克制。比起华丽，我们更愿意把注意力集中在本质问题上，我们提供有需要的东西用在很多人遇到的共同问题上。</p><p>2013 年，曾是 Zhao 的朋友的 Simon Last 在美国旧金山创立了 Notion 公司。最初开发的项目是‘代码制作应用’，但最终还是失败了。他回忆道：“当时只集中于想展现给世人的东西，但并不知道世界想要什么”。之后，他于 2015 年和 Last 一起来到日本东京并在那里停留了 1 年，构想了现在的 Notion。他在解释选择日本的理由时说：”需要一个语言不通的地方来一整天的集中精力去编程。”</p></blockquote><p>我的感受是，很多好的产品都是非科班出生的人创造出来的，他们可能是学艺术、设计、心理学的等等，而经过了科班训练的人似乎更难找到世界的真实需求，大概是因为很多时候大家在拿着锤子找钉子。</p><p>这让我想到吴军地<a href="https://china.googleblog.com/2009/01/blog-post_3651.html">浪潮之巅</a>里描述到的 ：</p><blockquote><p>一个进入了麻省理工学院的高中毕业生很明确是为了学习理工的，而他们周围的同学也是如此。这些年轻人在一起不断交流，彼此在技术上越来越精深，内境逾宽、外延逾窄。</p><p>我和麻省理工学院的一些博士生谈论过各种浏览器的好坏，他们不和你谈微软的 IE 或者 Mozilla 的火狐，而是 Unix 用户更常用的字处理器 Emacs 下一个很小的浏览网页的功能，这个东西不仅不好用，而且在全世界用它的网民连万分之一都不到。他们和你谈的是里面技术上谁实现的好。</p><p>这些人以后可以是很好的科学家和工程师，但是很难创业。</p></blockquote><h2 id="Linux-复杂么"><a href="#Linux-复杂么" class="headerlink" title="Linux 复杂么"></a>Linux 复杂么</h2><ul><li><a href="https://cstdspace.quora.com/Why-is-Linux-so-complicated-16?ch=10&amp;oid=301698375&amp;share=d44c0f9c&amp;srid=uPh8&amp;target_type=answer">Why is Linux so complicated? - quora.com</a></li></ul><p>Linux 为什么如此复杂？这个 Quora 回答得很好，Linux 对比起来可能没有大多数用户熟悉的 GUI，命令行需要一段时间来学习如何使用。</p><p>但这只是表面的复杂，在内核设计上 Linux 相比  Windows 更简单。这是 2008 年某个安全人员绘制的 Windows 上运行 MS web-server (IIS) 和 Linux 上运行 Apache 的函数调用图：</p><p><img src="/images/ob_pasted-image-20220223001541.png" alt="IIS on Windows"></p><p><img src="/images/ob_pasted-image-20220223001556.png" alt="Apache on Linux"></p><p>如果这是积木说明书，我当然更愿意玩第二个！</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://github.com/huacnlee/autocorrect">huacnlee/autocorrect</a>: 我的文档里中英文之间必须加空格，如果你也有这种偏执的话就试试这个工具。我把这个工具加到了 CI 里，这样我发布的文章都没有空格问题了。</p><p><a href="https://www.youtube.com/watch?v=bxmDnn7lrnk&amp;list=PL4cUxeGkcC9gpXORlEHjc5bgnIi5HEGhw">Tailwind CSS Tutorial -  YouTube</a>: 学习 Tailwind CSS，这周我看完了这系列视频。在这个视频里作者从开始如何安装介绍，做了一个食谱的前端页面，过程非常详细。我理解 TailwindCss 主要还是一个更好用的原子化 CSS，感觉用起来很方便，借助 VSCode 的补全，用熟了会很有效率。</p><p><a href="https://cook.aiurs.co/">程序员做饭指南 | HowToCook</a> : 偶然发现我司这位同事维护了一个程序员做菜指南，这段时间突然就火了。去年我去玩过他放在办公室的微软模拟飞行器，他还给我好好上了一节飞行课。他对飞行了解好多，讲解非常非常详细，他还考了一些飞行相关的证书，没想到对做菜也这么痴迷。这个 Github Repo 真是程序员居家办公，解决日常饮食的好手册🤣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我的 Newsletter 第 2 篇。&lt;/p&gt;
&lt;p&gt;我很喜欢玩乐高，我发现很多好的抽象、设计的使用体验就像玩积木，比如现在这些迅猛发展的云服务、比如 Notion。每个组件都不复杂，掌握规律后很容易组合成我们想要的作品。&lt;/p&gt;
&lt;h2 id=&quot;云服务架构节省成本&quot;
      
    
    </summary>
    
    
      <category term="weekly" scheme="http://catcoding.me/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>深圳 WLB 的 IT 公司</title>
    <link href="http://catcoding.me/p/wlb-shenzhen/"/>
    <id>http://catcoding.me/p/wlb-shenzhen/</id>
    <published>2022-02-20T22:18:06.000Z</published>
    <updated>2022-02-24T11:48:07.595Z</updated>
    
    <content type="html"><![CDATA[<p>我之前在深圳待了 6 年，前两年打算换工作的时候居然找不到什么 WLB 的企业。</p><p>后来通过一些朋友介绍、自己平时的关注了解到深圳还是有一些工作不累的公司。不过从数量上来说比北京、上海少很多，主要是 IT 类的外企相对较少。</p><p>下面这些公司我有认识的朋友在里面，如果你对这些职位感兴趣请联系我，我帮你对接内推！</p><h2 id="Nvidia"><a href="#Nvidia" class="headerlink" title="Nvidia"></a>Nvidia</h2><p>Nvidia 是老牌外企了，这些年随着 AI 的发展势头也不错。</p><p>我之前不知道 Nvidia  在深圳有个分部，前一年有个学弟进去了。里面做基础设施、Web、或者 AI 方面的职位都有。</p><p>Nvidia 是典型的外企，肯定是不怎么加班。我那个学弟通常一周两天去办公室，其余时间在家，据他说工作氛围很好，可以安心做做技术。</p><p><a href="https://nvidia.wd5.myworkdayjobs.com/NVIDIAExternalCareerSite/6/refreshFacet/318c8bb6f553100021d223d9780d30be">Nvidia 职位列表</a></p><h2 id="crypto-com"><a href="#crypto-com" class="headerlink" title="crypto.com"></a>crypto.com</h2><p><a href="http://Crypto.com">http://Crypto.com</a> 成立于 2016 年，总部在香港，全球各地都有员工。这公司的愿景是希望能加速全球经济对加密货币的转型。主要产品包括：以加密货币购买、出售和支付的平台钱包，以及没有年费的金属卡 MCO Visa 信用卡，现在也在做一个公链。</p><p>看起来这个公司近些年发展挺快，crypto 不缺钱，去年年底拿下湖人队球馆 20 年冠名权！</p><p>有个朋友在里面，据说不卷，而且可以远程办公。</p><p><a href="https://app.mokahr.com/m/recommendation-apply/foris/36460?recommendCode=NTAGTdQ&amp;hash=%23%2Fjobs">crypto 职位列表</a> ，目前在招的有后端开发 Go/Java/Ruby/C/C++/Rust 等。</p><h2 id="Shopee"><a href="#Shopee" class="headerlink" title="Shopee"></a>Shopee</h2><p>我有很多前同事跳槽去了 Shopee。</p><p>Shopee 是否卷得看组，现在据说腾讯去的管理者很多，有些部门也比较卷。所以如果想进去得看准部门和领导，可以通过内部的员工了解一下。</p><p><a href="https://app.mokahr.com/apply/shopee/2963#/">深圳虾皮信息科技有限公司 - 社会招聘 (mokahr.com)</a></p><h2 id="AfterShip"><a href="#AfterShip" class="headerlink" title="AfterShip"></a>AfterShip</h2><p>AfterShip 是做全球物流 SaaS 的公司，除了物流他们也在拓展其他相关业务。我最初知道这个公司是因为左耳朵耗子的一个朋友圈介绍，据说里面工程师氛围比较浓厚。</p><p>AfterShip 严谨实施敏捷的那套开发流程，不至于卷。去年 Go 夜话的组织者也加入了 AfterShip。</p><p><a href="https://careers.aftership.com/zh-Hans/">AfterShip 招聘/社招/校招 - we’re hiring</a></p><hr><p>以上就是我目前了解到的一些 WLB 深圳公司。</p><p>也许还有其他的公司，比如微软在深圳只有少部分硬件部门，Apple 据说在深圳有部门，SnapChat 在有个深圳小分队，Flexport 等，但我不太清楚这些公司的具体情况。当然还有一些大公司，里面有一些组氛围好，工作也不累。如果你知道更多深圳 WLB 公司麻烦告知我一声！</p><p>在深圳虽然工作压力比较大、大家都挺忙这两点外，我还是很喜欢深圳的，气候宜人，城市年轻有活力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我之前在深圳待了 6 年，前两年打算换工作的时候居然找不到什么 WLB 的企业。&lt;/p&gt;
&lt;p&gt;后来通过一些朋友介绍、自己平时的关注了解到深圳还是有一些工作不累的公司。不过从数量上来说比北京、上海少很多，主要是 IT 类的外企相对较少。&lt;/p&gt;
&lt;p&gt;下面这些公司我有认识的
      
    
    </summary>
    
    
      <category term="职业" scheme="http://catcoding.me/tags/%E8%81%8C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>你可以创造运气</title>
    <link href="http://catcoding.me/p/weekly-1/"/>
    <id>http://catcoding.me/p/weekly-1/</id>
    <published>2022-02-17T14:04:05.000Z</published>
    <updated>2022-02-24T11:48:07.599Z</updated>
    
    <content type="html"><![CDATA[<p>我在之前的更新计划里提到过想尝试周刊这种方式创作。大概就是每周会分享一下我这周看到的值得分享的内容，加上我自己的一些个人理解和评注。这算是一种比较轻的持续输出方式，我自己平常也会阅读一些这类文章，我觉得有收获，所以我要试试。</p><p>好吧，这是第一次周刊型文章。</p><h2 id="创造运气"><a href="#创造运气" class="headerlink" title="创造运气"></a>创造运气</h2><p><a href="https://www.swyx.io/create-luck">How to Create Luck (swyx.io)</a></p><p>2016 年左右我在深圳一个饭局上，某大佬给我们介绍比特币和以太坊，我们那桌 10 个左右同事只有 1 个人买了点，而且他在大涨之前又卖掉了。有时候我想，运气虽然称之为运气，也与个人有很大关系。我们大多数人好像对新鲜事物的好奇心还不够，或者是没有去实践，去折腾。</p><p>Shawn 的这篇文章解释了关于运气的各种理论和行动指导，还真有一些人严肃地做了一些关于运气的研究：</p><p><strong>Binary Luck</strong>： 二元性运气，比如有的人就生在罗马，含着金钥匙出生。这种没法改变，有就是有，没有就接受。</p><p><strong>Luck Surface Area</strong>： 运气表面积？这个理论阐述的是运气对每个人是公平的，只有扩大自己的运气横截面积，才能让自己运气更好。简而言之，我们需要做更多，并且把自己做的事分享出来。</p><p>这幅图是不是很好理解：</p><p><img src="/images/ob_pasted-image-20220217102743.png" alt="来源 - swyx.io"></p><p>更细化地我们可以培养这些习惯，使用这些策略来创造运气：</p><ul><li>探索、尝试、折腾、模仿</li><li>精通某领域</li><li>经营个人品牌和人脉</li><li>保持好奇心和观察</li></ul><p><img src="/images/ob_pasted-image-20220217103102.png" alt=""></p><h2 id="花-3-个月破解硬件找回-200-万美金"><a href="#花-3-个月破解硬件找回-200-万美金" class="headerlink" title="花 3 个月破解硬件找回 200 万美金"></a>花 3 个月破解硬件找回 200 万美金</h2><p><a href="https://www.youtube.com/watch?v=dT9y-KQbqi4">How I hacked a hardware crypto wallet and recovered $2 million - YouTube</a></p><p>这个幸运的男子几年前买了一些数字货币，后来这个币大涨，价值 200 万美金，他的私钥存在一个移动数字钱包里，要命是他不记得 PIN 码了。</p><p>眼睁睁看着这么一个小小的硬件里存了 200 万美金，而不能拿出来花是什么感受？</p><p><img src="/images/ob_pasted-image-20220216121202.png" alt=""></p><p>如果输入密码错误次数太多，钱包会自动删除里面的内容。</p><p>幸好硬件黑客大神 <a href="https://www.youtube.com/channel/UCqGONXW1ORgz5Y4qK-0JdkQ">Joe Grand</a> 花了近 3 个月时间，外接线路、反复启动钱包、制造噪音 (glitch)、让钱包进入 Debug 模式、然后从 RAM 里读出所有信息、找到密码👏。</p><p>这个 Youtube 视频的观看次数已经达到 400 万次，扶墙推荐你去看看。</p><h2 id="这位独立开发者几乎做错了所有事"><a href="#这位独立开发者几乎做错了所有事" class="headerlink" title="这位独立开发者几乎做错了所有事"></a>这位独立开发者几乎做错了所有事</h2><p><a href="https://www.v2ex.com/t/833951#reply40">8 万变 80 万 - V2EX</a></p><p>原文表达不太好，可以大致浏览看看。</p><p>任何人的努力和梦想都值得鼓励和尊敬，但是当我看到这个人的创业历程后，我真觉得他几乎做错了所有事，除了坚持。</p><p>另一个感受是，如果初入一个行业需要敬畏之心，不要太过自信，觉得什么都看起来容易。</p><p>这位开发者之前教书的，有些开发经验，但没有 IT 行业从业经验，他竟然从学习各种技术栈、设计、一直实践到了去注册美国公司运营，而做出来的东西质量上是半成品……</p><p>关键是在 35 到 40 的这个年龄段这样折腾了 5 年，让家庭生活在困难之中……</p><p>创业不要冲动，尽早做出 MVP 版本，小步快跑，在没找到确定的盈利模式之前节省开支。这位推友总结得非常好：<a href="https://twitter.com/xiqingongzi/status/1493456735180587008">十个错误</a></p><blockquote><p>白宦成： 在 V2ex 看到一个独立开发的哥们，只能说，读书少确实害了他自己，做错了几乎所有事情。得亏是有个好的老婆和岳父，能坚持到现在。 独立开发并非毫无指南，多读书，多看报，会少踩很多坑。不要踩别人踩过的坑。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我在之前的更新计划里提到过想尝试周刊这种方式创作。大概就是每周会分享一下我这周看到的值得分享的内容，加上我自己的一些个人理解和评注。这算是一种比较轻的持续输出方式，我自己平常也会阅读一些这类文章，我觉得有收获，所以我要试试。&lt;/p&gt;
&lt;p&gt;好吧，这是第一次周刊型文章。&lt;/p
      
    
    </summary>
    
    
      <category term="weekly" scheme="http://catcoding.me/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>我的 Obsidian 使用经验</title>
    <link href="http://catcoding.me/p/obsidian-for-programmer/"/>
    <id>http://catcoding.me/p/obsidian-for-programmer/</id>
    <published>2022-02-15T10:58:30.000Z</published>
    <updated>2022-02-24T11:48:07.615Z</updated>
    
    <content type="html"><![CDATA[<p>今天给大家分享一下我如何使用 Obsidian 来管理笔记和提高效率。</p><h2 id="Obsidian-是什么"><a href="#Obsidian-是什么" class="headerlink" title="Obsidian 是什么"></a>Obsidian 是什么</h2><p><a href="https://obsidian.md/">Obsidian</a> 是一个笔记软件，可能很多人还不知道这个工具，因为相对来说比较新，2020.5 才出<a href="https://news.ycombinator.com/item?id=23324598">第一个 Beta 版本</a>。</p><p><img src="/images/ob_pasted-image-20220214234343.png" alt=""></p><p>创始人是一对小情侣 Shida Li 和 Erica Xu，还有一对可爱的猫咪。</p><p>我有点八卦啊，所以随便查了一下两位小朋友的背景，应该都是从小在加拿大成长的华人，上的大学都是 University of Waterloo。这大学的计算机非常有名，以培养学生动手能力著名，本科毕业前两年可以去很多大公司实习，所以对学生找工作非常有帮助。他们俩做出 Obsidian 之前已经折腾过了 10 来个副业项目，都是类似笔记、工具类的东西。所以，成功不是随便就能达成的。</p><h2 id="Obsidian-的特点"><a href="#Obsidian-的特点" class="headerlink" title="Obsidian 的特点"></a>Obsidian 的特点</h2><p>现在笔记软件满天飞，为什么我选择 Obsidian。我认为 Obsidian 是特别适合程序员的笔记工具，可以称之为<strong>笔记 IDE</strong>，其特点是：</p><ul><li><strong>Local-first and plain text</strong></li><li><strong>Link as first-class citizen</strong></li><li><strong>Make it super extensible</strong></li></ul><p>这三个特点使得 Obsidian 变得独特，Notion 之类的不是本地化的，Roam Research 也不是本地化的，唯一和 Obsidian 有些类似的是  <a href="https://logseq.com/">Logseq</a>，而 Logseq 的插件系统应该是还在打磨，并没有形成 Obsidian 这样的生态。</p><h2 id="我的主要使用场景"><a href="#我的主要使用场景" class="headerlink" title="我的主要使用场景"></a>我的主要使用场景</h2><h3 id="基本编辑"><a href="#基本编辑" class="headerlink" title="基本编辑"></a>基本编辑</h3><p>Obsidian 用来编辑 Markdown 非常舒服，目前也支持了 Typora 那种实时预览的编辑方式。代码高亮没问题，贴图没问题，公式也可以支持，这些基本的东西默认已经足够好用。</p><p>通过一些插件的协助效率更高。我自己比较喜欢的插件是这些：</p><p><a href="https://github.com/tadashi-aikawa/obsidian-various-complements-plugin">obsidian-various-complements-plugin</a>，这个插件用来自动补全很多东西，这是一个日本人在维护的插件，issue 反馈很快。我在使用过程中也对这个插件做了一些贡献：<a href="https://catcoding.me/p/input-complement-algorithm/">自动补全算法</a>。</p><p><a href="https://github.com/chetachiezikeuzor/cMenu-Plugin">cMenu-Plugin</a>，在编辑页面加一些常见的 Markdown 格式按钮。</p><p><a href="https://github.com/zsviczian/obsidian-excalidraw-plugin">obsidian-excalidraw-plugin</a>，可以用来在 Obsidian 上画 excalidraw 格式的图，这是我最喜欢的画图工具，因为可以画出手绘风格的图。</p><p>还有些其他的辅助编辑的插件，大家可以自己去摸索。</p><h3 id="Daily-Notes"><a href="#Daily-Notes" class="headerlink" title="Daily Notes"></a>Daily Notes</h3><p>打开核心插件 Daily notes，绑定快捷键 <code>Ctrl-D</code> 到 <code>Open today&#39;s daily notes</code>，即可快速打开或者创建今天的日志，存放在一个自己设定的目录。</p><p>为什么一定要快捷键打开今天的日记页，因为我需要随手记录一点东西的时，这是个很好的选择，只有快才能不打断思维，并且形成习惯。</p><p>我使用双链和 Tag 来把记录的内容和我已有的记录关联起来，这样以后我在打开我的某个主题节点时，所记录的东西自然能找到。</p><h3 id="自动同步"><a href="#自动同步" class="headerlink" title="自动同步"></a>自动同步</h3><p>我的所有笔记自动同步到 Github 上的私有库，通过插件 <a href="https://github.com/denolehov/obsidian-git">obsidian-git</a> 自动定时 2 分钟同步一次，我经常工作的设备是 1 个 PC ，两台笔记本，一个手机。</p><p>虽然 Obsidian 有移动端 App，但我已经习惯自己做的 <a href="https://github.com/chenyukang/obweb">obweb</a>，我在自己的服务器上部署这个应用，然后通过微信悬浮打开应用的网页。</p><p>虽然有几个设备上，因为同一时间我只在一个设备上工作，定时拉取这种粗暴同步方式的体验甚至好过了 OneNote。即使是偶然出现了一些冲突之类，也就只是解决一下 Git 冲突的小事。</p><h3 id="QuickAdd"><a href="#QuickAdd" class="headerlink" title="QuickAdd"></a>QuickAdd</h3><p>QuickAdd 的概念应该是借鉴于 Emacs 的 org-mode。</p><p>简而言之就是我们可以预设一些文件格式、动作，让我们通过命令就可以快速创建文件，或者按某种格式记录内容，比如我设定了这些预设动作，通过命令运行某个命令，我就可以快速的记录一个 Todo，或者输入一个标题则开始写文章，或者是记录一个单词，或者是记录一个代码片段：</p><p><img src="/images/ob_pasted-image-20220215001825.png" alt=""></p><h3 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h3><p>Todo 的格式就是 Markdown 的 <code>- [ ]</code>，我用 Obsidian 管理 Todo 的好处在于每个 todo 都有上下文，我可能是 Daily 里面记录了 Todo，也可能是网页浏览时留下了一些 Todo，这些 Todo 散落在各个文件，但是我可以通过一条   <a href="https://github.com/schemar/obsidian-tasks">obsidian-tasks</a> 语句生成一个 Task 视角，而在这个 Task 视角上编辑就等于编辑了散落在各个文件里的 Todo，真是绝妙！</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">not done<br><span class="hljs-keyword">sort</span> by due desc<br><span class="hljs-keyword">description</span> <span class="hljs-keyword">includes</span> #<span class="hljs-keyword">write</span><br></code></pre></td></tr></table></figure><p>在 Obsidian 里显示为：<br><img src="/images/ob_pasted-image-20220215010029.png" alt=""></p><p>这种工作方式也是来自 Emacs 的 org-mode，我觉得 Obsidian 的这些插件都做得更容易使用，毕竟不是谁都有心思去学习 elisp 来配置 Emacs 。</p><h3 id="网页标注"><a href="#网页标注" class="headerlink" title="网页标注"></a>网页标注</h3><p>网页标注是非常好的概念，这是我打通输入输出的必要工具。很多人喜欢收藏东西，用浏览器书签、知乎收藏夹之类的。因为收藏的时候没有自己写上标注和自己的理解，而且和自己的输入是隔离的，这样导致收藏的东西基本吃灰。</p><p>所以我们可以使用网页标注这种概念来把自己平时所看的东西变成输入。</p><p>网页标注我使用 <a href="https://sspai.com/post/63033">开源、可定制的网页批注工具 Hypothesis</a>，通过 Hypothesis 我可以在浏览网页的时候把某些内容高亮或者添加注释，然后通过插件 <a href="https://github.com/weichenw/obsidian-hypothesis-plugin">obsidian-hypothesis-plugin</a> 自动同步到我的知识库，这样我就可以在 Obsidian 里面看到我的记录。</p><p>比如我在浏览这个网页的时候，如果我觉得内容不错就写一点自己的评论，加上 #write  标签标识以后可能分享一下。</p><p><img src="/images/ob_pasted-image-20220215003848.png" alt=""></p><p>然后我的这个目录里面就会多出这么一条 Todo 记录，包含了网页的链接，我自己的备注等等信息：</p><p><img src="/images/ob_pasted-image-20220215003935.png" alt=""></p><p>这样的好处在于，我能通过上面类似的 <a href="https://github.com/schemar/obsidian-tasks">obsidian-tasks</a> 语句筛选出来我的写作备选想法。</p><p>我积累了好多平时冒出来的想法，以及浏览网页时觉得想分享的东西，有了这些输入我就一直有输出的材料，这也是为什么我最近写文章更多了。</p><p>我贡献了这个插件的自动同步功能 ，记得用得时候想起我😊</p><hr><p>写了这么多，我觉得好多东西估计没讲明白，而且我还有好多好玩有用 Obsidian 的玩意，但是我已经写累了。</p><p>我逐渐意识到只有通过视频才能比较好阐明和演示，也许我以后会学着做一些视频，但是目前就先这样吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天给大家分享一下我如何使用 Obsidian 来管理笔记和提高效率。&lt;/p&gt;
&lt;h2 id=&quot;Obsidian-是什么&quot;&gt;&lt;a href=&quot;#Obsidian-是什么&quot; class=&quot;headerlink&quot; title=&quot;Obsidian 是什么&quot;&gt;&lt;/a&gt;Obsidia
      
    
    </summary>
    
    
      <category term="工具" scheme="http://catcoding.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Obsidian" scheme="http://catcoding.me/tags/Obsidian/"/>
    
  </entry>
  
  <entry>
    <title>一个小的里程碑</title>
    <link href="http://catcoding.me/p/small-milestone/"/>
    <id>http://catcoding.me/p/small-milestone/</id>
    <published>2022-02-12T20:12:37.000Z</published>
    <updated>2022-02-24T11:48:07.643Z</updated>
    
    <content type="html"><![CDATA[<p>我从元旦开始一直在休陪产假，所以在空余时间写了十多篇文章。今天是一个小的里程碑，因为读者数达到了 550 左右，感谢大家。</p><p><img src="/images/ob_pasted-image-20220212190053.png" alt=""></p><p>公众号超过 500 就可以开流量主了，可我不打算开了。我知道这赚不了几块钱，另一个原因是我认为这很影响阅读体验，我觉得阅读体验最好的是 Medium. com，干净的排版能让人静下来阅读长文。目前我还比较理想化，认为自己也是在构建一个<a href="https://www.zhihu.com/question/400660802">数字花园</a> ，不能忍受丑陋和不协调。</p><p>所有可量化的东西都是可以被管理和设定目标的，因为有反馈和量化，能让自己更有创作和分享的动力。<strong>如果你觉得内容对你有帮助和启发，欢迎转发、打赏</strong>。</p><p>在这段时间里，我的主业是帮老婆带孩子，这真的比上班还辛苦。我终于理解了我司有的人下班了还不回家，在公司多磨蹭磨蹭。当然更辛苦的是妈妈们，带孩子一直是她们的主业，而这个任务真的是不分昼夜，时时刻刻都得上心，很艰辛。所以各位程序员也对老婆们好点吧😉</p><p>下面谈谈我以后的更新计划和想法。</p><h2 id="为什么写"><a href="#为什么写" class="headerlink" title="为什么写"></a>为什么写</h2><p>写点东西也是有乐趣的，我之前也分享过这是抵抗焦虑的一个好方式。</p><p>我写博客也有十年了，但是之前大部分都是自己想怎么写就怎么写，我的个人域名丢了两次，所以中文博客并没有固定的读者。我经历过中文互联网开放分享的好年代，那时候大家可以通过博客交换链接，可以认识一些人。那时候很多人在开放的地方讨论问题。</p><p>而现在互联网的中文环境显然没那么好了，我认为主要有几个原因：</p><ol><li><p>移动互联网崛起，大家都在用各种 App 了，而这些 App 的内容是不能够被搜索到的，比如微信群，公众号，知识星球。</p></li><li><p>对质量有要求的作者会自己建站，百度的堕落导致中小站点基本没有流量，没有流量会让很多人没了分享的欲望。</p></li></ol><p>所以当我 2019 年想要好好写些内容时，我选择了写英文，顺便锻炼自己的英文写作能力。从 2019 年开始到 2021 年间，我写了一百多篇英文文章，有的发到 Medium 上，这样能赚到一些钱，虽然不是那么多，但是通过英文撰写的练习大大提高了我写作的韧性。</p><p>我写的时候心态不同了，我会想着目标读者是谁，写的东西别人能否有收获，如何排版，如何用图等等，而这些都是中英文写作通用的。</p><p>2022 年我又开始写中文内容，大概是因为年纪大了有一些表达欲，而写英文终究还没达到情感表达的境界。因为受 <a href="https://www.swyx.io/learn-in-public/">Learn In Public</a> 的启发，我会让周围的人知道我在写东西，也会去尝试推广一下自己的内容。</p><h2 id="后续内容"><a href="#后续内容" class="headerlink" title="后续内容"></a>后续内容</h2><p>我还是会围绕自己想的编程技术，英语，写作，个人成长之类的主题写。现在技术类的公众号风评很不好，大家都说正经的技术人谁写公众号啊。我自己也不想做出一个自己讨厌的公号，所以我这里没有告诉你入职大厂的秘籍，我也不擅长那种面试，哈哈。</p><p>写作很重要的是真诚，如果我分享给你读者一定是我觉得好的东西。</p><p>我想做的是那种 NewsLetter 形式，口语化表达也可以。个人经历，体验，故事，所思，所想都是可以分享的，我自己也受到了很多人的个人分享的启发。</p><h2 id="关于风格"><a href="#关于风格" class="headerlink" title="关于风格"></a>关于风格</h2><p>我在写这段时间也在摸索和尝试，甚至我的领导老婆大人会这样指导我如何取标题：<br><img src="/images/ob_pasted-image-20220212195836.png" alt=""></p><p>我觉得这不是程序员风格，标题党看多了会让人生厌。所以我的标题估计大多还是直白的描述，排版也就是现在这样看起来简单即可，都是脚本程序自动生成的。</p><p>可以看到我的号是没有评论的，这是因为 2018 年后开的都是没有，需要花 3000 多去买一个有留言功能的公号，然后再迁移过来。</p><p>这是我觉得匪夷所思的事，如果想留言可以选择阅读原文到我的博客上留言，或者加我微信沟通。</p><h2 id="更新节奏"><a href="#更新节奏" class="headerlink" title="更新节奏"></a>更新节奏</h2><p>现在我已经恢复上班了，除工作之外还得照顾两个孩子，所以时间上我大概只能每周更新两篇，计划一篇是纯自己写的分享，一篇是集合我一周所看的好的文章和资料加上自己的见解。</p><hr><p>我不知道自己能这样写多久，看起来经过一段时间的刻意培养，我现在已经形成了习惯，有时候我抱着娃的时候可能是在写腹稿，有时候睡觉突然觉得某个话题有些意思，所以这些就积累记录下来了。阅读、写作算是性价比很高的精神食粮了。</p><p>好吧，今天就写到这里，这些是我陪孩子在游乐园玩耍的时候敲出来🙌。</p><p>欢迎点赞，打赏，分享，你的激励是最好的反馈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我从元旦开始一直在休陪产假，所以在空余时间写了十多篇文章。今天是一个小的里程碑，因为读者数达到了 550 左右，感谢大家。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220212190053.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="公众号" scheme="http://catcoding.me/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>你想编程到 60 岁么？</title>
    <link href="http://catcoding.me/p/coding-to-60/"/>
    <id>http://catcoding.me/p/coding-to-60/</id>
    <published>2022-02-09T18:25:08.000Z</published>
    <updated>2022-02-24T11:44:57.599Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220209180145.png" alt="Photo by Krys Amon on Unsplash"></p><p>今天看了篇文章关于大龄程序员的：</p><p><a href="https://larshaendler.medium.com/software-engineer-and-hitting-40-how-to-set-up-for-another-20-years-of-coding-f97731a5463b">Software engineer and hitting 40, how to set up for another 20 years of coding</a></p><p>不只是中国，其实整个世界的 IT 行业都有年龄焦虑，奔四的程序员算是稀有物种。这篇文章写了几个建议给那些打算编程到 60 岁的人。</p><p>到了一定年龄很多人的想法是转管理岗，并不是所有人都能转到管理岗位。这不只是因为管理岗位更少，管理岗位的职位核心要求和工程师不同，很多人不适合管理，也有很多人不能忍受管理的工作内容。</p><p>文中提到管理岗位的一个核心能力是：</p><blockquote><p>Thinking about abstract problems and discussing them in endless meetings with non-tech people requires something nobody told us in school or university: suffer endlessly without complaining.</p></blockquote><p>这点不管是国内还是国外都是大同小异的。</p><p>作为大龄程序员我们的优势是经验：</p><blockquote><p>Being 20 years in software engineering gives you the <strong>super power of seeing patterns</strong>. </p></blockquote><p>作者的一个建议是维护历史遗留代码也是个好的选择。我看评论里面有很多人喷这一点，但我倒觉得这确实算个选项，不过前提是：</p><ul><li>所在的公司稳定，通常是大公司</li><li>在有长久生命力的产品线</li></ul><p>比如在微软我就见过一些 60 岁左右的老工程师，他们的职业生涯几乎就在做一个产品，像 SharePoint 这样的产品已经 20 年了，他们从青年到老头，是对这个系统最了解的人，只要产品还在运行，他们就是不可替代的。</p><p>另外，年纪大了之后不容易被打鸡血、也不容易被画饼，所以如果上班就得找那种和自己三观贴合的公司，否则不适合长待。</p><p>文中的另外两个建议就是保持健康，包括身体和精神上的健康。</p><p>年纪大了，首要的健康问题通常是体重，程序员的肩膀、颈椎也容易出问题。我们可能不适合激烈的体育运动，不适合熬夜刷剧之类的，需要找到适合自己的放松方式。我年轻的时候很喜欢打蓝球，现在居然没什么很大兴趣了，我现在喜欢游泳，这对缓解肩膀酸疼很有效。</p><p>另外一方面，找一些能让自己精神上保持充沛的事情：</p><blockquote><p><strong>You need to challenge your mind constantly.</strong> Otherwise it gets fat and lazy too. Don’t always go the easy way. Try building stuff, try coding stuff and get your hands dirty with real hardware. Ask questions online, document your journey and talk to friends about it. It is that easy to get execited again about the things that brought you into software engineering in the first place.</p></blockquote><p>对我来说，写些文章是个兼有放松和自我提高的事情，所以我要一直写下去。40 岁之后家庭生活会占据很多时间，特别是孩子。养孩子是痛并快乐着吧，有时候觉得带孩子很耗费时间和精力，但陪孩子也是一种另类的放松。</p><p>在评论里有很多年纪大的工程师留言，大多是描述自己还乐于其中吧。</p><p>那些到 60+ 还在编程的人，我不知道国内有多少这样的程序员，看起来硅谷还是有一些，而且这些人不缺钱、也不缺机会：</p><p><img src="/images/ob_pasted-image-20220209174912.png" alt=""></p><p>很多人说 IT 行业很累，35 岁就要淘汰了。做什么工作都有累的方面，我身边一些亲戚朋友有在医院，有创业的，有做生意的，聊下来我觉得他们很累。相对来说，在 IT 行业如果不去卷的地方也不至于很累。</p><p>想要编程到 60 岁么？看完文章和评论，我的感受是：<strong>除非你能找到这行的乐趣，还得注意健康，不然绝对坚持不到 60 岁，甚至很难坚持到  40 岁</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220209180145.png&quot; alt=&quot;Photo by Krys Amon on Unsplash&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天看了篇文章关于大龄程序员的：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="职业发展" scheme="http://catcoding.me/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>如何高效阅读源代码</title>
    <link href="http://catcoding.me/p/learn-from-source-code/"/>
    <id>http://catcoding.me/p/learn-from-source-code/</id>
    <published>2022-02-07T16:43:08.000Z</published>
    <updated>2022-02-24T11:48:07.591Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章最初是我 2019 年写的英文版本：<a href="https://coderscat.com/learn-from-source-code/">Learn from Source Code (an Effective Way to Grow for Beginners)</a></p><p>后来陆续到一些读者的积极反馈，所以我最近把这篇翻译为中文，在翻译的过程中我又顺便重写和简化了一部分。</p><h2 id="为什么要读代码"><a href="#为什么要读代码" class="headerlink" title="为什么要读代码"></a>为什么要读代码</h2><p>工作多年后，我觉得自己很多时间花费在了阅读代码上。<strong>能高效地理解代码是一个程序员的核心技能</strong>，这种能力与具体的技术栈没有关系，而是一种通用的、可迁移的能力。</p><p><img src="/images/ob_pasted-image-20220205110149.png" alt="source CodeDoesMeme"></p><p>我们教编程的方式注重在写代码的技能，而不是如何读代码。<em>这里的“读代码”指的是刻意地、有目的地去阅读源代码</em>。</p><p>编程和写作有很多共同点，<strong>我们通过文字或代码表达想法</strong>，Donald Knuth 之前还倡导过文学编程的编程范式。</p><p>还记得我们在学校是如何学习写作的吗？从小学开始开始，我们需要阅读各种优秀作家的文章，并从中学习各种写作技巧。读书破万卷，下笔如有神。</p><p>和看书一样，有目的地阅读代码会帮助程序员更快地成长 (尤其是对于初中级程序员)。</p><p>刻意读代码至少有三个好处：</p><h3 id="站在巨人的肩膀上"><a href="#站在巨人的肩膀上" class="headerlink" title="站在巨人的肩膀上"></a>站在巨人的肩膀上</h3><p>读史使人明智，读诗使人灵透。</p><p>好的源代码就像一部文学杰作，不仅仅包含信息和知识，也是好的启蒙。在 Linux Kernel、Redis、Nginx、Rails 这些伟大的开源项目中，可以找到无数优秀的编程技巧、范式选择、设计架构，阅读这些代码你可以汲取全球顶级程序员的技巧和智慧。</p><p>读源码的另一个好处是能够避免常见的陷阱，因为软件开发中的大多数错误已经被其他人犯过。<br><img src="/images/ob_pasted-image-20220205110206.png" alt=""></p><h3 id="解决难题"><a href="#解决难题" class="headerlink" title="解决难题"></a>解决难题</h3><p>在你的整个编程生涯中，肯定会遇到无法通过谷歌搜索解决的问题，阅读源代码通常是解决这类问题的好方法，这也是学习新东西的好机会。</p><p><img src="/images/ob_pasted-image-20220205110225.png" alt=""></p><h3 id="拓展见识"><a href="#拓展见识" class="headerlink" title="拓展见识"></a>拓展见识</h3><p>大多数程序员只是工作在几个特定领域。一般来说，如果你不持续地逼迫自己拓展知识面，你的编程能力将趋于同事的平均水平。</p><p>作为程序员，如果要持续成长就要不断尝试自己感兴趣的新领域，从深度和广度拓展对编程的理解。</p><h1 id="读什么代码"><a href="#读什么代码" class="headerlink" title="读什么代码"></a>读什么代码</h1><p>现在有这么多优秀的开源代码可供选择，我们应该阅读什么样的源代码？</p><p>我们通常是带着目的去阅读源码的，那么有以下是几个典型场景：</p><h3 id="要学习一门新的编程语言时"><a href="#要学习一门新的编程语言时" class="headerlink" title="要学习一门新的编程语言时"></a>要学习一门新的编程语言时</h3><p>学习一门新的编程语言不仅仅意味着学习语法，更需要学习如何完成一些常见的编程任务。这需要读一些小型项目，比如 Learn xxx By Examples 之类的。</p><p>我从 <a href="https://github.com/rust-rosetta/rust-rosetta">rust-rosetta</a> 项目中学到了很多关于 Rust 的知识，Rosetta Code 收集各种编程语言中常见任务的示例代码，这是学习新编程语言的有用资源。</p><p><img src="/images/ob_pasted-image-20220205110252.png" alt=""></p><h3 id="要理解具体技术的实现时"><a href="#要理解具体技术的实现时" class="headerlink" title="要理解具体技术的实现时"></a>要理解具体技术的实现时</h3><p>我们都使用了标准库中的 sort 函数，你有没有想过它是如何实现的？或者说你需要在 Redis 中使用 Set 数据结构，它的实现中用到了哪些数据结构？</p><p>那你需要读标准库的源码或者 Redis 的源码，通常我们关注的是几个文件或函数。</p><p>当你比较熟练使用某个框架后，可以尝试去阅读框架某些组件的源代码，这样可以加深对框架的理解。</p><h3 id="要学习一个新领域时"><a href="#要学习一个新领域时" class="headerlink" title="要学习一个新领域时"></a>要学习一个新领域时</h3><p>这时候适合阅读该领域的经典项目，不要选择太大的项目，可以从优秀的开源课程开始。</p><p>假设你想学习分布式系统，<a href="https://pdos.csail.mit.edu/6.824/">MIT 的分布式课程</a>是很好的课程，里面也有几个经典的大作业。如果你了解 Golang，那么 etcd 可能是个不错选择。</p><p>你想深入了解操作系统的内部实现吗？直接读现在的 Linux Kernel 版本肯定会让新手摸不着北，那么 <a href="https://pdos.csail.mit.edu/6.828/2012/xv6.html">Xv6</a> 或者 Linux Kernel 的早期版本会是一个好的开始。</p><p>想学编译器实现？也许可以看看 <a href="https://github.com/rui314/9cc">rui314/9cc</a>。 </p><p>在 Github 上拥有许多好的的教学性质的开源项目，也有一些重造轮子类的项目，可以尝试 “tiny + 关键词”  或者 “make your own + 关键词” 这样来搜索。</p><p>根据你当前的技能和知识水平选择项目。如果你选择的项目远高于你当前的技能水平，结果会迷失在源码中而受到打击，那么先阅读一些较小的项目，然后继续读较大的项目。</p><p>如果你花了一段时间都无法理解代码，这通常意味着你欠缺背景知识，那么先把代码放在一边，试着阅读一些书籍、论文或相关文档，等有信心了再回来。</p><p>比如我如果一股脑直接去看 Raft 的代码就会很吃力，所以我得先看 <a href="https://raft.github.io/">Raft 配套的文档和论文</a>。</p><p><strong>真正的成长，是始终游走在“舒适区边缘”</strong>。我们总是以这样的模式取得进步：阅读（代码、书籍、论文）、写代码、读更多、写更多。</p><h1 id="如何阅读源代码"><a href="#如何阅读源代码" class="headerlink" title="如何阅读源代码"></a>如何阅读源代码</h1><p><img src="/images/ob_pasted-image-20220205110316.png" alt="source unsplash.com"></p><p>阅读代码并不容易，我们得试图理解代码中的设计和思想，需要比较长时间的精神专注。为了有效地阅读代码，最好准备以下这些技能和工具：</p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>能够高效地使用编辑器，例如快速搜索关键字、查找变量和函数的相关引用。最好能对编辑器熟悉到仅使用键盘来操作，这将使你专注于代码而不会中断思维。</p><p>基本掌握 Git 或其他版本控制工具，比如比较不同版本之间的差异。</p><p>找到所有源码相关的文档，尤其是设计文档、代码约定等。</p><p>对所用编程语言有所了解，如果是阅读大型项目，需要了解设计模式。</p><p>当然，这些也需要在常年地读写代码中积累经验，保持耐心。</p><h2 id="流程和技巧"><a href="#流程和技巧" class="headerlink" title="流程和技巧"></a>流程和技巧</h2><p>读代码的过程和读书有些差别，读书我们通常按照章节的线性顺序去读，如果读代码也是这样从头读到尾则容易瞌睡，而且效果也不好。</p><p>大多数时候我们根据项目的组织，自顶向下、或者自底向上地读代码，很多时候我们的注意力只是专注在少数源文件上。</p><p>以下是一些更有效地阅读代码的技巧：</p><h3 id="带着问题阅读代码"><a href="#带着问题阅读代码" class="headerlink" title="带着问题阅读代码"></a>带着问题阅读代码</h3><p><img src="/images/ob_pasted-image-20220205110332.png" alt="source unsplash.com"></p><p>当你开始阅读代码时，可以尝试抛出一些问题。例如，一个应用程序有一个缓存策略，一个很好的问题是如果缓存失效会发生什么，缓存中的值是如何更新的？</p><p>这样就能在心中确定一个目标，你也可以对自己问题做出一些猜想，然后根据代码验证猜想，这有点像侦探：你想理解代码的真相和逻辑，这就像是找一个故事的真相。</p><p>读代码的经验多了，就能不断抛出各种问题，引导自己不断地挖掘代码，最终的阅读顺序倒不重要了，因为我们是随着自己的好奇心读懂了整个项目。</p><h3 id="运行和调试代码"><a href="#运行和调试代码" class="headerlink" title="运行和调试代码"></a>运行和调试代码</h3><p>写代码的过程有点像搭积木，而已经完成的代码就像一个组装好的乐高。</p><p>如果你想了解它是如何组合在一起的，一个好的办法是沿着提交记录来理解，这时候版本控制工具就很有用了。</p><p>假设我想看某个特定功能是如何实现的，我可以根据提交日志，尝试读 Git 的提交记录。我发现 Lua 的第一个版本要简单得多，这有助于我理解作者最初的设计思想。</p><p><img src="/images/ob_pasted-image-20220205110347.png" alt=""></p><p>调试是另一种理解代码的方式，可以尝试在代码中添加一些断点（或打印语句），把代码运行起来。如果对代码有足够的了解，我们也可以尝试进行一些修改，最简单的是尝试调整配置看看效果，然后逐步尝试添加一些小的功能，如果结果对其他人也有用，可以顺便做些开源贡献。</p><h3 id="画出代码里的关系"><a href="#画出代码里的关系" class="headerlink" title="画出代码里的关系"></a>画出代码里的关系</h3><blockquote><p>“糟糕的程序员担心代码，优秀的程序员会担心数据结构和他们的关系。”</p><p>– Linus Torvalds</p></blockquote><p>在读代码的过程中，用笔或任何工具画出数据结构、模块之间的关系、主要的流程图等。这就像是源代码的地图，在阅读过程中你可能需要经常参考这些地图和索引。</p><p>scitools 等一些工具可用于自动生成 UML 图，我最喜欢的画图工具是 <a href="https://excalidraw.com/">Excalidraw</a>，<a href="https://www.processon.com/">ProcessOn</a>。</p><h3 id="注意模块和边界"><a href="#注意模块和边界" class="headerlink" title="注意模块和边界"></a>注意模块和边界</h3><p>大型项目中通常包含多个模块，在设计良好的项目中一个模块通常具有单一职责，它的变量和函数以一种可读的风格命名，这也使得代码更容易维护。</p><p>模块的接口是抽象边界，我们可以忽略掉那些我们暂时不关心的模块。和《如何阅读一本书》中介绍的精读和泛读一样，自己感兴趣的部分精读，其他部分则泛读，这将大大节省整体时间。</p><p>模块也不止是按照目录来组织的，如果你正在阅读使用 GNU Make 构建的 C/C++ 项目，Makefile 将是了解模块组织方式的一个很好的入口。</p><h3 id="使用测试用例"><a href="#使用测试用例" class="headerlink" title="使用测试用例"></a>使用测试用例</h3><p>测试用例也是理解代码的一个很好的补充，我认为测试用例也是一种文档。像 Rust 就很好，测试和实现通常在一块。</p><p>如果读一个类，试着读一下相关的测试代码，这可以让你弄清楚一个类的接口以以及它的典型用法。集成的测试用例对于调试带有某些特定输入的代码也很有用，它可以让你跟踪程序的整体流程。</p><h3 id="回顾和总结"><a href="#回顾和总结" class="headerlink" title="回顾和总结"></a>回顾和总结</h3><p>花了很长时间读一个项目，为什么不写篇文章阐述一下自己的理解？</p><p>这就像在写读书的读后感，你可以写下源代码中的好坏，以及你从中学到的新东西。教授别人是一种最好的学习方式，写这样的文章会加深你的理解，也有助于其他人阅读源代码。</p><p>我当初在花了好一段时间阅读 Kong 的源码后，写了一系列关于 Kong 的文章：<a href="https://catcoding.me/2017/07/02/kong-intro.html">Kong 源码分析</a><br><img src="/images/ob_pasted-image-20220206105523.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写了这么多，我发现代码阅读比想象的要复杂得多，没有标准的、系统的方法来训练这项技能。总而言之，<strong>不断练习读代码，找到适合自己的方法和工具，读得越多就会越快、越高效</strong>。</p><p>最后推荐两本提高读代码能力的好书：</p><ul><li><a href="https://book.douban.com/subject/1052241/">设计模式</a></li><li><a href="https://book.douban.com/subject/30333919/">架构整洁之道</a>                                                    </li></ul><p>如果喜欢这篇文章，记得分享、点赞 👻</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章最初是我 2019 年写的英文版本：&lt;a href=&quot;https://coderscat.com/learn-from-source-code/&quot;&gt;Learn from Source Code (an Effective Way to Grow for Beginn
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DeepMind 发布 AlphaCode ，技术奇点要到来了？</title>
    <link href="http://catcoding.me/p/on-alphacode/"/>
    <id>http://catcoding.me/p/on-alphacode/</id>
    <published>2022-02-04T09:49:57.000Z</published>
    <updated>2022-02-24T11:48:07.599Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到一个新闻，DeepMind 的 AlphaCode 发布：<a href="https://deepmind.com/blog/article/Competitive-programming-with-AlphaCode">Competitive programming with AlphaCode</a>，并且在 Codeforces 的编程比赛中模拟参加比赛，居然能达到中等竞赛者水平。</p><p><img src="/images/ob_pasted-image-20220204083843.png" alt=""></p><p>我对此有些震惊，因为编程竞赛绝对是有<strong>创造性</strong>的智慧活动，现在 AI 竟然已经发展到了程序能自动生成一些有意义的完整程序。</p><p>当我们谈到人工智能的创造性时，通常会想到人工智能来创造艺术作品，比如下面这副 AI 画出来的：</p><p><img src="/images/ob_pasted-image-20220204103649.png" alt="Art and Artificial Intelligence Laboratory, Rutgers University"></p><p>因为在艺术上，很难有一个绝对的标准来衡量这东西到底是好还是坏。但是 AI 生成程序是有绝对的衡量标准，就是生成的程序是否是对的。</p><p>AlphaCode 和以前的 AlphaGo 也不同，围棋的规则简单而确定，只是在下棋过程中搜索空间巨大，AlphaGo 做的事是从巨大的搜索空间中尽量选择合理的下一步。</p><p>你可以说生成代码也是一个搜索问题，在生成每一个字符串时我们都要从 52 个字母加符号中选择下一个字符，其目标是生成一个可以编译运行、解决问题的程序。</p><p>其中的细微差别是，在围棋的中间步骤中，我们都可以通过<strong>评估函数</strong>来衡量当前局势对于目标的距离，就是判断当前局势对谁更有利。</p><p>而在代码自动生成中，这种评估函数并不存在，目前已经生成的代码片段即使包含部分错误，也可以在后续代码片段中修复，所以不到整个程序生成完整，我们没法知道目前做的是对还是错。</p><p>这看起来是一个 Copilot 的更强本版，因为 Copilot 是根据目前写的代码片段和注释，补充新的代码片段，但是 AlphaCode 的输入完全是问题的描述，输出是解决问题的完整代码。</p><p>比如例子中的这个编程问题，上面是输入，下面是输出：</p><p><img src="/images/ob_pasted-image-20220204083502.png" alt="AlphaCode"><br>另外 Copilot 可能是会生成训练集里面的某些代码片段，简单说就是 AI 之前看过某个代码片段，所以在某些场景下背出了这个代码。而从 <a href="https://storage.googleapis.com/deepmind-media/AlphaCode/competition_level_code_generation_with_alphacode.pdf">DeepMind 发布的论文</a>看，AlphaCode 不会完全重复生成训练集中的训练代码。</p><p>那这种工具如果更完善后是否会彻底改变编程？难道我们已经快到<a href="https://en.wikipedia.org/wiki/Technological_singularity">技术奇点</a>了么？</p><blockquote><p>技术奇点（英语：Technological Singularity），出自奇点理论；根据技术发展史总结出的观点，认为人类正在接近一个使得现有技术被完全抛弃或者人类文明被完全颠覆的事件点。例如，意识上传技术可能使人类的意识摆脱有机体的约束，或者人来开发出可以自我进化、有自由意识的人工智能，在这个奇点之后的人类文明将发展到当今完全无法理解的水准。</p><p>之所以被称为奇点，因为它是一个临界点。当我们越来越接近这个临界点，它会对人类的事物产生越来越大的影响，直到它成为人类的共识。但当它最终来临的时候，也许仍会出人意料并且难以想象。</p></blockquote><p>我仔细思考了好一会儿，我的结论是<strong>这种工具也许能极大的拓展编程的范围，也可能会改变程序员的工作内容，但离自动编程还差很远</strong>。</p><p>首先，AlphaCode 也许会提高程序员的工作效率，改变人类学习编程的过程。</p><p>我之前对 Copilot 之类的工具持悲观的态度，甚至认为除了酷炫估计对日常开发没什么帮助，参考<a href="https://www.zhihu.com/question/468950598/answer/1971619358">我关于 Copilot 的知乎回答</a>。</p><p>后来我感觉自己被打脸。收到 Copilot 试用邀请后，我在实际开发中使用了大概半年，结果是超乎我的意料。Copilot 和之前我用的代码补全类工具有一些差别，它看起来能猜测我的编码意图，从而进行有意义的补全。</p><p>特别是当我使用一个不是很熟悉的编程语言时，我敲一些关键词 Copilot 可以帮我补全剩下的代码，这节省了我自己去 Google 搜索的时间。即使这没有从根本上解决编程的难点，也能很大程度上让编程变得更愉悦。</p><p>如果有完美的 AlphaCode，它就是一个 Transformer，输入是英语，输出是程序。</p><p>作为程序员我们的日常工作可能会变成向这个 Transformer 表述我们的意图，所以一个会说英文的人，也许就能生成一些有意义的程序，这就是为什么我说编程的范围扩大了，或者我们学习编程的方式改变了。</p><p>比如 <a href="https://openai.com/blog/openai-codex/">OpenAI Codex</a> ，我们只需要输入想要的 HTML 效果，Codex 自动生成对应的 JavaScript 代码。</p><p><img src="/images/ob_pasted-image-20220204092609.png" alt="Codex"></p><p>但是，它也终究只是一个输入不同的、人造的 Transformer，我们现在的编译器或者解释器也可以理解为 Transformer，只是输入的是某个编程语言的源代码，这个源代码是程序员按照编程语言的语法写出来的，程序员是个智能的 Transformer。</p><p><img src="/images/ob_pasted-image-20220204090555.png" alt=""></p><p>自然语言是比编程语言更大的一个集合和维度，所以同样目的的代码，如果从自然语言角度来直接生成，会变得更为繁琐，而且不精准。</p><p>在 DeepMind 的论文中也提到了，AlphaCode 的一个问题就是：</p><blockquote><p>Sensitivity to problem descriptions<br>….<br>solve rate goes down dramatically when  given related but different problems, and is not very affected by different ways of describing the same  the problem.</p></blockquote><p>现有的代码生成技术，我们通常会限制输入语言的范围或者规则，这样就是一个<a href="https: //zh.wikipedia.org/wiki/%E9%A2%86%E5%9F%9F%E7%89%B9%E5%AE%9A%E8%AF%AD%E8%A8%80">领域特定语言 : DSL</a>。恕我直言，现在这些鼓吹的低代码，无非就是套壳的领域特定语言。</p><p>作为一个程序员，我也许会使用这种自然语言生成代码的技术来辅助编程，但不可能完全使用这个写代码，我还不担心自己会失业。</p><p><img src="/images/ob_pasted-image-20220204093409.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天看到一个新闻，DeepMind 的 AlphaCode 发布：&lt;a href=&quot;https://deepmind.com/blog/article/Competitive-programming-with-AlphaCode&quot;&gt;Competitive programmi
      
    
    </summary>
    
    
      <category term="技术" scheme="http://catcoding.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
</feed>
