<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2023-01-02T16:38:32.562Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的 2022</title>
    <link href="http://catcoding.me/p/2022-summary/"/>
    <id>http://catcoding.me/p/2022-summary/</id>
    <published>2023-01-02T22:08:07.000Z</published>
    <updated>2023-01-02T16:38:32.562Z</updated>
    
    <content type="html"><![CDATA[<p>2022 对于我来说是特殊的一年，在这一年里我有失望、痛苦、愤怒，也有不少付出、收获和成长，一年到尾最大的感受是活着不易，庆幸还能写一年的总结。</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>刚好去年的元旦，我做了一个开始更多写作的决定，在 2022 年的头一个月里，我做到了日更的节奏。而后的半年我保持在一周两篇左右的频率，但是后半年我就开始偶尔写写了，这是因为我有了很多精神内耗，为了缓解内耗我后半年很多空余时间都在编程。</p><p>总共写了 68 篇文章，在这近一年的写作过程中，我收获了 3000 个的公众号订阅，博客阅读大概 10 w 多，这对于很多大号来说不值一提，但我自己比较满足了，因我大概也就比较密集地写了半年，另外写作对我来说是业余爱好。在这个过程中我的写作能力得到了提高，在最近的一篇文章中，码农翻身的 liuxin 帮我润色和组织文章，让我意识到写那种广泛传播的文章和写纯干货的文章有很大的区别，文章想要引起传播效应得有一些钩子一样的东西激发读者的情绪，另外起标题真是个技术活。当然我写作并不是完全为了流量，能实践不类型的写作对我来说是一种收获。</p><p>在今年我也尝试了一段时间周刊，我的很多读者也是喜欢这种形式。虽然我的 Obsidian 里面还保存了不少我读过的未分享文章，但最近我没有写了，希望新的一年能继续保持下去。我在考虑使用竹白来专门写周刊，也许可以做付费的形式，一种履约也许让我把这件事情更长久地做下去。</p><p>Obsidian 是今年我一直在用的工具，除去发布过的文章，我今年做了更多的笔记，所以在我印象中似乎今年的记忆更为深刻一些。</p><p>通过写作我认识了更多朋友，这是我本来所能预想到的。所以新的一年，我会继续写作，争取能写得更多。</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>2022 年我阅读了一些小说，之前分享过我读完了所有余华的作品。根据微信阅读的统计，2022 年我有 210 天阅读过，读了 67 本书，其中读完的只有 37 本。陪女儿练乒乓球的地方旁边刚好有个书店，所以我每周都会去里面逛逛。</p><p>今年读的书大多是非技术类的，也许是因为年纪更大了或是因为阅读了这些书，我也会琢磨些之前未细致考虑过的人生问题。</p><p><img src="/images/ob_pasted-image-20230102154901.png" alt=""><br>在这些书中我推荐：</p><ul><li>纳瓦尔宝典</li><li>项塔兰</li><li>悉达多</li><li>阿诚的棋王、树王、孩子王</li><li>余华的书</li></ul><p>奇鸟行状录这本书也许是我去年读的最厚的小说，我觉得前 4/3 很好，我喜欢里面关于井的故事，结尾我不喜欢。</p><p>阿诚的文字很特别，精细而深刻，人除了生存，总得找一个角落安放精神：</p><blockquote><p>我常常烦闷的是什么呢？为什么就那么想看看随便什么一本书呢？电影儿这种东西，灯一亮就全醒过来了，图个什么呢？可我隐隐有一种欲望在心里，说不清楚，但我大致觉出是关于活着的什么东西。</p></blockquote><p>…</p><blockquote><p>人总要呆在一种什么东西里，沉溺其中。苟有所得，才能证实自己的存在，切实地掂出自己的价值。</p></blockquote><p>除去阅读，我也会听一些播客，比如文化有限，看电影解说，比如越哥说电影，最近这段时间我喜欢看徐云的骑行流浪的视频。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>我家有两个女儿，小的不到一岁半，还处于‘养’的阶段，大女儿五岁多，更多的挑战在于‘育’。家庭占据了我很多时间和精力，特别是从三月份开始我一个人带着大女儿在苏州宅了近两个月。这段时间里我深刻地体会到了带孩子的苦与乐，由于我拙劣的厨艺，女儿瘦了几斤，而我却胖了几斤。</p><p>这段时间里，我终于从碗盘不沾进化成了可以做顿家常菜的水平，这也是被逼出来技能吧。我对家庭生活里的琐碎事有了更多耐心，虽然有时候还是自觉做得不够好，但今年是进步最大的一年了。</p><p>在健康上，我今年面临的问题是肩胛骨酸痛，这算是职业病了。新冠是今年绕不开的主题，和绝大部分人一样我整年做了 11 个月核酸，结果在 2022 年的最后几天感染了新冠。</p><p>新冠感染的第一天我特别难受，妻子还在考虑是不是普通感冒，我很清楚这肯定就是新冠了，我都不必去再去做核酸检测，因为全身酸疼、精力被抽干，这种感受是我之前从未体验过。我的症状只持续了两三天左右，而后妻子和小孩也都开始有了症状，不过幸好都是三天左右就没有特别难受了。</p><p>经过两周的恢复，干咳才完全消失，但我感觉体力已经大不如前，比如稍微劳作一下就不想动了，还会偶尔心跳异常，所以至今仍然不敢过多运动。</p><p>2022 年里有太多不能明说的敏感词，对未来我仍然比较悲观。之前看过张宏杰的两本书《饥饿的盛世》和《中国人的性格历程》，在这些魔幻和痛苦的日子里，我对此有了更深刻的体会。</p><p>我每天都会在 Youtube 上看王局的节目，估计看多了之后自然就会比较悲观，刚开始我还会和相近的朋友分享些看法，后来我也渐渐独自琢磨和消化了。相比蒙住眼睛和耳朵装作什么都不知道，我更愿意选择知道然后悲观。</p><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>2022 年也是我这几年做开源最多的一年吧，从这个 Github 上的统计上看，虽然有 12623 个提交，但很多都是我写文章时 Obsidian 的自动备份。</p><p><img src="/images/ob_pasted-image-20230102161409.png" alt=""></p><p>从 8 月份左右开始基本都是在做真的代码提交了。之前我也分享过，今年下半年我主要在给 Rust compiler 做贡献，目前统计大概完成了 70 个 PR。</p><p>我算是在用编程来缓解新冠带给我的不良情绪，当我无法改变什么却又忍不住悲观时，写写代码时间就过去了。很多夜里，我一边等待着编译和测试结果，一边打开王局的节目，那些难熬的日子就过去了。</p><p>通过给 Rust 做贡献，我不仅找到了编程的那种纯粹快乐，也找到了一个乐于助人的社区，还得到了一些经济上的回报。我一直在践行多元化自己的收入和生活，尝试如何不依赖公司和组织，所以我对这段时间的改变很满意，也许 2023 年还会有更大的变化。</p><hr><p>新冠让我感受到了个人在大时代面前的渺小，我对未来不再做过长的规划，因为我们必须学会拥抱不确定性，学着如何过好一天、一周、一个月，把握好当下就是最好的应对措施。</p><p>新的一年，希望读更多书、写更多文章和程序，保持健康。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2022 对于我来说是特殊的一年，在这一年里我有失望、痛苦、愤怒，也有不少付出、收获和成长，一年到尾最大的感受是活着不易，庆幸还能写一年的总结。&lt;/p&gt;
&lt;h2 id=&quot;写作&quot;&gt;&lt;a href=&quot;#写作&quot; class=&quot;headerlink&quot; title=&quot;写作&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>玩了一周 ChatGPT，谈谈我的想法</title>
    <link href="http://catcoding.me/p/chatgpt/"/>
    <id>http://catcoding.me/p/chatgpt/</id>
    <published>2022-12-10T22:48:06.000Z</published>
    <updated>2023-01-02T16:38:32.566Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20221210193738.png" alt="Alberto Romero via Midjourny"><span class="image-caption">Alberto Romero via Midjourny</span></p><p>看到推特上无数人在晒 ChatGPT 的截图，我也忍不住注册了一个账号，到目前为止我快玩了一周了。刚开始我感觉非常震惊，三观受到冲击，经过这几天的多次调戏发现了些 ChatGPT 的缺陷，兴奋劲过去了之后谈谈我的一些看法。</p><p>首先 ChatGPT 的语言理解基本都正确，甚至会根据上下文的不同背景使用不同的措辞，输出的句子也是语法上没有什么问题，而且他还具备一些日常的理解能力：</p><p><img src="/images/ob_pasted-image-20221210194610.png" alt=""></p><p><img src="/images/ob_pasted-image-20221210194616.png" alt=""></p><p>ChatGPT 善于在你给的简短描述上自由发挥，比如下面这段我让它帮忙写个工作总结，可以看出 AI 在这三个方面做了合理的细化和扩展：</p><p><img src="/images/ob_chatpgt-1.png" alt=""></p><p>令人印象深刻的是它能围绕一个问题和我进行一定程度地互动：<br><img src="/images/ob_chatpgt-2.png" alt=""></p><p>但是，如果你继续深入地问他感受和观点，它就会陷入两种结果：从训练中积累出来地“理中客”，或说“我是 AI 没有具体感受”。</p><h2 id="合理的使用方式"><a href="#合理的使用方式" class="headerlink" title="合理的使用方式"></a>合理的使用方式</h2><h3 id="辅助编程"><a href="#辅助编程" class="headerlink" title="辅助编程"></a>辅助编程</h3><p>如果我们想查询一个简单的代码片段，ChatGPT 是比较适合的，甚至这种有确定答案的查询其结果比 Google 好。比如这种问题：<br><img src="/images/ob_pasted-image-20221210192703.png" alt=""></p><p>但我们并不能完全信任其结果。通常经典的编程问题，比如这种排序算法、不同编程语言里典型的文件操作、如何发起一个 HTTP 请求之类的问题，可以预见网络上这类可用于训练的资料非常多，所以其结果通常是对的。</p><p>但某些情况下，ChatGPT 生成的代码时有问题的，甚至是误导性的。比如我同事在日常工作中让他生成一个 PowerShell 连接 SQL 的代码，其结果中有一个伪造出来的参数。</p><p>另一个让我更震惊的是，某些情况下 ChatGPT 可以发现程序里的问题，比如我们把这个快排程序刻意加入两个 Bug，AI 居然都能理解并找出来：</p><p><img src="/images/ob_pasted-image-20221210194729.png" alt=""></p><p><img src="/images/ob_pasted-image-20221210230518.png" alt=""><br>这是和 Copilot 最大的区别，不止能帮忙补全代码，也能作为代码 Review 的辅助工具。在编程的时候使用这个工具需要你本身对这块足够了解，否则就会被坑。在学习编程时适当使用也会很不错。</p><h4 id="辅助创作"><a href="#辅助创作" class="headerlink" title="辅助创作"></a>辅助创作</h4><p>ChatGPT 在根据一些条件去生成文字方面确实有一手，比如<a href="https://twitter.com/Piglei">@piglei</a> 的这个例子：<br><img src="/images/ob_pasted-image-20221210194030.png" alt=""></p><p><img src="/images/ob_pasted-image-20221210222808.png" alt=""></p><p>这是目前我所看到的类似工具中做得最好的，比之前那些智能写作工具有一个本质上的提高。ChatGPT 似乎收集了很多模板，在适当的时候可以套进去，比如你让他生成一个大学申请书，它就会按照一定的模板去套你的信息。</p><h4 id="语言翻译"><a href="#语言翻译" class="headerlink" title="语言翻译"></a>语言翻译</h4><p>我真实投入了日常使用的是英语翻译，比如我这周有就用 ChatGPT 来生成了两份英语邮件回复。我对比了翻译的质量，这个结果比 Deep Translator 要好，我基本不用做特别多的修改，就能拿来直接用。英文文章翻译为中文同样结果不错。<br><img src="/images/ob_pasted-image-20221210215112.png" alt=""></p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>ChatGPT 会尽量回答问题，就像是一个活了几个世纪的老人，似乎什么知识都能知道一些，然后给出一个大概及格的回答。但有时候它是在瞎忽悠，如果你是外行就不一定发现他在忽悠。</p><p>关于事实的询问，它有时候会伪造出来一些看起来合理，但其实是错误的答案：<br><img src="/images/ob_pasted-image-20221210195433.png" alt=""></p><p>即使目前这个测试版本还存在很多明显的问题，我认为 ChatGPT 这次的刷屏标志着 AI 应用进入了一个新的阶段。这也让我们再次思考人类的智慧是否可以被替代，我们的工作是不是要丢了。</p><p>淘汰人类不一定会吧，但确实会让某些领域失去些魅力。几年前 <em>AlphaGo</em> 在围棋领域击败了最强大的人类选手，一直以来我们认为 AI 在围棋上是不能做到这点的，因为搜索空间太大了，而这确确实实发生了。在 DeepMind 的纪录片里，我看到 AlphaGo 团队的程序员们自己都觉得不可思议，称其本质和原理上是简单的，就是一个基于概率的搜索程序，言语中还透露着一些惋惜，棋艺这个我们人类自豪的智慧艺术竟然这样就被击败了。现在围棋已经被 AI 彻底玩腻，专业选手还得不断学习 AI 下棋的套路。柯洁现在似乎对围棋的乐趣没那么深了，我看到他的一个访谈里谈起围棋，透露着一种无奈和空虚感。</p><p>ChatGPT 目前因为所有人都在刷屏一些表现良好的例子，所以可能会被大家高估。我一个高中同学是心理咨询师，看着 AI 如此自然地回答问题有点担心自己失业，所以很想把玩一把。我写了个程序做了个接口转发给她玩，她稍微琢磨了一下，似乎又不担心自己丢工作了。</p><p>ChatGPT 强项在于写作，如果我们周围充斥着机器生成的文本，那纯手工写作会显得更有价值？<br><a href="https://twitter.com/paulg">Paul Graham</a> 最近在推上写到：</p><blockquote><p>If AI turns mediocre writing containing no new ideas into a commodity, will that increase the “price” of good writing that does contain them? History offers some encouragement. Handmade things were appreciated more once it was no longer the default.</p></blockquote><p>…</p><blockquote><p>And in particular, handmade things were appreciated more partly because the consistent but mediocre quality of machine-made versions established a baseline to compare them to. Perhaps now we’ll compliment a piece of writing by saying “<em>this</em> couldn’t have been written by an AI.”</p></blockquote><p>我赞同这个观点，比如最近我偶然看到 <a href="https://www.infoq.cn/article/mEux81fTgUD0NlbJK9Lj">InfoQ 上的这篇文章</a>，很明显是人肉在机器翻译的基础上随便做了点修改，读起来就是那么地别扭，而且因为编辑是外行，文章里面还有些重要的错误。而这就是趋势，我么将来会被越来越多的这样内容充斥。</p><p>统计学家<a href="https://zh.wikipedia.org/w/index.php?title=I.J._Good&amp;action=edit&amp;redlink=1">I.J. Good</a>于 1965 年提出技术奇点的必要条件──“智能爆炸”概念：</p><blockquote><p>让我们将超级智能机器定义为一种能够远远超过任何人的所有智力活动的机器。如果说设计机器是这些智力活动的一种，那么超级智能机器肯定能够设计出更加优良的机器；</p></blockquote><blockquote><p>毫无疑问，随后必将出现一场“智能爆炸”，人类的智能会被远远抛在后面。因此，第一台超级智能机器是人类需要完成的最后一项发明，前提是这台机器足够听话，会告诉我们如何控制它。</p></blockquote><p>这最后一项发明是否临近了？我乐观猜想二十一世纪应该还不能实现，程序员这工作应该在我退休之前还是安全的😂？不过我还是很乐于使用这些 AI 辅助工具，这些工具也将渐渐地彻底改变编程，短短半年的时间里 Copilot 已经成为我日常编程中比较依赖的东西。</p><p>你对 ChatGPT 有何感想？欢迎留言交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20221210193738.png&quot; alt=&quot;Alberto Romero via Midjourny&quot;&gt;&lt;span class=&quot;image-caption&quot;&gt;Alberto Romero via M
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="人工智能" scheme="http://catcoding.me/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Twitter 实习生 George Hotz</title>
    <link href="http://catcoding.me/p/geohot/"/>
    <id>http://catcoding.me/p/geohot/</id>
    <published>2022-11-29T17:29:07.000Z</published>
    <updated>2023-01-02T16:38:32.570Z</updated>
    
    <content type="html"><![CDATA[<p>经过一轮又一轮的裁员，Twitter 大批骨干离职。</p><p>有人戏称：现在 Twitter 办公室里只剩下两个最“硬核”的程序员了。</p><p><img src="/images/ob_pasted-image-20221130121508.png" alt=""></p><p>这两个人中一个自然是老板 Elon Musk。</p><p>另外一个则是 33 岁的 George Hotz，一个周薪 2000 美元的 Twitter 实习生。</p><p>这位实习生的年龄着实大了一点儿，并且缺乏前端相关的经验，不得不从了解 GraphQL 开始，开始写些<br> JavaScript，从头开始一点点学习 Twitter 使用的编程语言 Java 和 Scala，他甚至在网络上直播自己如何弄明白 <a href="https://www.youtube.com/watch?v=z6xslDMimME">Twitter 是如何运行的</a> 。</p><p>这样的人怎么可能入得了 Elon Musk 的法眼，逆行加入 Twitter 呢？</p><p><img src="/images/ob_07147c2e7e77357fbc29369945348fb.jpg" alt=""></p><p>原因很简单，George Hotz 是一位超级技术大牛，网络上随处可见他的神奇经历。</p><p>2007 年 8 月 21 日，当时 17 岁的 George Hotz 在自己博客宣布成功破解 iPhone，手机不再局限于 AT&amp;T 网络，而是支持其他 GSM 网络，并在博客上发布了详细的解锁过程和视频，最终这部破解的 iPhone 换了一部跑车和三部新的 iPhone，让他在黑客圈子里声名鹊起。</p><p>2009 年，他又开始解锁 PlayStation 3，后来被 Sony 起诉，最终因为黑客圈最大组织 Anonymous 施予的强大压力下和 Hotz 和解。</p><p>随后几年他去了高校潜心研究机器学习。</p><p>2014 年 7 月，他加入 Google 的 Project Zero，短暂工作后退出。</p><p>2015 年，专注于驾驶辅助技术，在网上免费发布了他的自主驾驶代码“openpilot”，声称可以用最小的成本做出个更好的自动驾驶技术。</p><p><img src="/images/ob_pasted-image-20221129114516.png" alt=""></p><p>这给特斯拉带来了巨大威胁，Elon Musk 在 2015 年就想“招安”他，让他来特斯拉做自动驾驶，后来因为种种原因谈崩，George Hotz 自己成立了一个做自动驾驶的公司 comma.ai，因此成为了 Tesla 的对手。前段时间他还在点评 Tesla 发布会时，表示对其机器人产品的不屑。</p><p>George Hotz 肯定是不缺工作也不缺钱的人，为什么要在这个时候加入 Twitter 呢？</p><p>可能是他感受到 Elon Musk 和他是一类人，他喜欢混乱和挑战，他最近一个多月才开始频繁发推，并且开始体会到社交网络的乐趣。</p><p>也可能因为他没经过 996 的毒打，很想体验一把鸡血的高强度推特工作。当那封名为 <code>A fork in the Road</code> 的美国版奋斗者邮件发出后，Geroge Hotz 评论到：</p><blockquote><p>This is the attitude that builds incredible things. Let all the people who don’t desire greatness leave.</p></blockquote><p>随后表示自己不想远程办公，想去旧金山进行全职的实习生工作，正好 Elon Musk 也认为远程工作不靠谱：</p><p><img src="/images/ob_pasted-image-20221129120931.png" alt=""></p><p>另外，他正在从自己创办的公司中退出，似乎是对 <a href="https://geohot.github.io/blog/jekyll/update/2022/10/29/the-heroes-journey.html">自动驾驶失去了兴趣</a> 。当然这并不意味着 comma.ai 失败了，而是他觉得自己对运营一个更为庞大的公司没有兴趣：</p><blockquote><p>It’s no longer a race car, it’s a boat. And steering a boat requires too much damn <em>planning</em> and <em>patience</em>.</p></blockquote><p>所以在这个空档期找一些没做过的事情试试，就是这么任性。在一个代码直播中，他自称多年前也做过一些老派的互联网技术，那时候主要还是用 PHP，现在这些互联网相关的技术他之前没怎么实战过，后台开发、前端、微服务，对些他来说都是没折腾过的，所以称之为 <code>For the glory of the technical challenge</code>。</p><p>至于有的人对此表示不理解，他的回复是优秀的程序员想干什么就干什么，不需要理由：<br><img src="/images/ob_pasted-image-20221129122457.png" alt=""></p><p>作为顶尖黑客，geohot 在互联网上有很多轶事。他如何做到如此出色和有创造力，普通人能从他身上学到些什么？</p><p>最近几个月，我在业余时间会去看 George Hotz 的 <a href="https://www.youtube.com/@geohotarchive">油管视频</a> ，感觉非常有趣，也有收获。他在直播里通常会把自己的思路自言自语说出来，而且会时不时停下来谈谈对一些事情的看法，有时候还会哼点小曲。他也是一个非常直率的人，说话风趣，说话语速比较快，很有节奏感，有时候可当作 rap 来听，我们还能锻炼英语听力。</p><p>强烈推荐你也去观摩一把，看看顶尖程序员如何工作的。我认为这大概是 Learn by doing 和 Learn in Public 最好的实践。他每次通常会定一个最小目标，然后连续数小时的持续学习，比如：</p><ul><li>在直播中开发小巧的、类似 pytorch 的深度学习框架 <a href="https://github.com/geohot/tinygrad">geohot/tinygrad</a></li><li>在没看过 Clang 和 LLVM 的情况下去尝试实现 C 语言的一个新的语法逻辑</li><li>实现一个和自己下国际象棋的 <a href="https://www.youtube.com/watch?v=RFaFmkCEGEs">AI 程序</a></li><li>看论文，调试各种机器学习的模型，玩 diffusion</li></ul><p>顶尖程序员并不是人坐下代码就噼里啪啦出来了，而是也可能和普通人一样，需要不断地 Google 和翻阅文档，一样可能会混淆行和列，从教程中拷贝粘贴代码，看着报错信息饶头皱眉 wtf，还有程序跑出来正确结果那种孩童般的欢呼雀跃。</p><p>这种观感就如同一些观众评论到：</p><blockquote><p>That exact same thing happens to me EVERYTIME. Nice to see someone 10 times smarter than me do the same.</p></blockquote><p>…</p><blockquote><p>It’s encouraging to see that someone as ridiculously genius as George Hotz still has to Google Python and even struggles with the way stuff works in his program. It definitely made me realize I have just been focusing on memorizing too much stuff when it comes to programming. I just need to make more projects and have more fun doing them! Thanks Geohot!</p></blockquote><p>…</p><blockquote><p>Dude has an IQ of &gt; 9000</p><p>Confuses rows and columns like a normal human Finally,</p><p>   I feel less shitty now.</p></blockquote><p>当然有的时候你也能看到他速度非常快，敲代码就如同电影里那样 (之前用 Vi，最近改用 VsCode 了)：</p><blockquote><p>this guy programs like how hollywood thinks people program</p></blockquote><p>他看文档经常扫一样就知道个大概，看起来就像是凭借直觉在工作，这就是积累下来的自学能力，可以快速迁移到任何项目上，他解释到 <a href="https://www.youtube.com/watch?v=N2bXEUSAiTI&amp;t=2920s">Object level skills will die out, metalevel skills will be useful</a>，比如学 Data Scicence, 我们到底是学了某个公司用的工具，还是去学统计学？前者是 object level 的，后者是 meta level 的。</p><p>在这些直播中，我觉得一些比较有趣的观点和片段是：</p><ul><li><a href="https://www.youtube.com/watch?v=_L3gNaAVjQ4&amp;t=8640s">不折腾编辑器和多屏幕，这些不影响效率</a>, Give me a Macbook Air and a corner。</li><li>工作中你也许用不到数学，但学习数学和物理给人一种 Knowing the secrets 的感受，那些给你教条的家长、老师他们可能没你懂世界是如何运行的。</li><li>不喜欢远程办公，这让工作感觉像度假，喜欢去公司和同事一起当面工作。</li><li>为什么 30 多岁来还去当实习生，薪酬 2000 美金一周 <a href="https://www.youtube.com/watch?v=nvtoOxNfDQo&amp;t=855s">what the fuck, who cares？</a></li><li>我经常搜索一些看起来简单的问题，在别人看来我就是个新手，这不重要。 <a href="https://www.youtube.com/watch?v=nvtoOxNfDQo&amp;t=1080s">别担心别人的看法</a> ，关注自己的能力，而不是外在的印象。因为印象和人设是很容易改变的，而能力才是最重要的。</li><li>开源代码比内部代码有用，<a href="https://www.youtube.com/watch?v=nvtoOxNfDQo&amp;t=1940s">很多公司会把好的代码开源出来</a> ，而那些内部用的代码质量其实很低。</li><li>开发过程中喜欢把主要的步骤用 plain text 写下来。</li><li>如何学习编程，想一个自己感兴趣的项目，直接开干，Learn by doing，看编程视频没法学会编程。</li><li><a href="https://www.youtube.com/watch?v=_L3gNaAVjQ4&amp;t=9749s">推荐的编程语言</a>：Assembly, C, Python, 外加 Haskell 和 Verilog, 你不用对 Assembly 非常精通，但只有懂了 Assembly 才懂计算机底层在干什么，才知道 C 的精妙之处，懂了 C 之后才知道 Python 帮你做了什么，这三门语言是抽象的不同层次。学一下 Haskell 可以帮助你理解编程语言的设计，学些 Verilog 让你知道硬件如何运行。</li><li><a href="https://www.youtube.com/watch?v=nvtoOxNfDQo&amp;t=9570s">C++ 太复杂，Golang 是给学不会 C++ 的 Google 程序员用的🤣</a></li><li>我们处于编程 2.0 时代，Machine learning 就像是数据驱动编程。</li><li>什么是编程，面向新手讲解 <a href="https://www.youtube.com/watch?v=N2bXEUSAiTI">what is programming?</a></li><li>相信技术奇异点，两篇改变自己人生的文章，推荐 <a href="http://www.fairpoint.net/~jpierce/staring_into_the_singularity.htm">Staring Into The Singularity</a> 和 <a href="https://www.unqualified-reservations.org/">Unqualified Reservations by Mencius Moldbug</a> 。</li></ul><p>通过观看这些视频，我感受到他和普通人的明显区别是：<strong>极其强烈的好奇心和空杯心态，强大的学习能力和持续专注的能力</strong>，这也许是最值得我们学习的。而他去 Twitter 折腾，正如他在博客上写的那样：</p><blockquote><p>I hope that there’s people in the world who get joy from actually <em>doing</em> the thing and not just solving the problem.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过一轮又一轮的裁员，Twitter 大批骨干离职。&lt;/p&gt;
&lt;p&gt;有人戏称：现在 Twitter 办公室里只剩下两个最“硬核”的程序员了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20221130121508.png&quot; alt=&quot;
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="程序员" scheme="http://catcoding.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="编程" scheme="http://catcoding.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>译：阅读的必要性</title>
    <link href="http://catcoding.me/p/read/"/>
    <id>http://catcoding.me/p/read/</id>
    <published>2022-11-26T22:49:07.000Z</published>
    <updated>2023-01-02T16:38:32.574Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://paulgraham.com/read.html">The Need to Read (paulgraham.com)</a><br>作者：Paul Graham<br>2022 年 11 月</p><p>在我小时候读的科幻小说中，总有比阅读更有效率的方式获取知识，神秘的 “磁带” 如程序加载到计算机一般植入人的大脑中。</p><p>这种事不太可能很快实现。这不仅是因为我们很难找到阅读的替代品，而且因为即使存在，它也是不够的。阅读关于 <code>x</code> 的内容并不只是教你了解 <code>x</code>，同时还教你如何写作 [^1]。</p><p>那又怎样？如果我们找到了更为快速的方式来替代阅读，大家就没必要写得好了，不是吗？</p><p>更重要的原因是，写作不仅仅是一种传达想法的方式，也是一种创造想法的方式。</p><p>一个好的作家不只是思考，然后写下他的想法，作为一种记录。好的作家几乎总是会在写作的过程中发现新的东西。而据我所知，这种发现是无可替代的。与其他人讨论是发现想法的一个好方法。但即使这样做了，当你坐下来写作时，你仍然会发现新的想法。这种思考只能通过<a href="http://paulgraham.com/words.html">写作</a>来完成。</p><p>当然，也有一些思考是可以不通过写作完成的。如果你不需要太深入地研究一个问题，你可以不通过写作也能解决。例如，如果你正在考虑如何连接两台机器的部件，也许写作是无用的；而当一个问题可以被很正式地描时，你可以在头脑中解决；但如果你需要解决一个复杂的、定义不清的问题，写出来总是会有帮助。反过来，这意味着不擅长写作的人在解决这类问题时几乎总处于劣势。</p><p>不能写好就不能思考好，不读好就不能写好。这里的 “读好” 是指两个层面上的，你必须善于阅读，而且要读好的东西 [^2]。</p><p>如果你只是想获取信息，那有很多其他方法。但是，对于想要获得想法的人来说，阅读是必不可少的。</p><p><sub>[^1] 有声读物可以提供优秀写作的例子，但听别人朗读并不能像自己阅读一样教会你写作。</sub></p><p><sub>[^2] 这里的”善于阅读”不是指善于机械地阅读，相比起快速阅读，获取文字的含义更为重要。</sub></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文：&lt;a href=&quot;http://paulgraham.com/read.html&quot;&gt;The Need to Read (paulgraham.com)&lt;/a&gt;&lt;br&gt;作者：Paul Graham&lt;br&gt;2022 年 11 月&lt;/p&gt;
&lt;p&gt;在我小时候读的科幻小说中，总
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>和 Rust Compiler 开发者面基</title>
    <link href="http://catcoding.me/p/talk-with-compiler-hacker/"/>
    <id>http://catcoding.me/p/talk-with-compiler-hacker/</id>
    <published>2022-11-23T23:56:12.000Z</published>
    <updated>2023-01-02T16:38:32.574Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有更新博客了，最近两个月我在开心地写代码，今天想写篇文章，赶紧抓住这个冲动。</p><p>上周和 Rust compiler 的一个核心开发 <a href="https://github.com/compiler-errors">compiler-errors</a> 约了个线上面基。今天想写写我们沟通的主要几个方面，因为大部分都是技术相关的问题，所以我觉得写出来和大家分享一下没关系。</p><p>他对 Rust 项目贡献时间刚好满一年，这期间做了 <a href="https://github.com/rust-lang/rust/pulls?q=is%3Apr+is%3Amerged+author%3Acompiler-errors+sort%3Acreated-asc">400 多个 PR</a>，效率实在太高。我在 Rust 社区混了两个月了，这期间提交的很多 PR 都是他帮忙 Review 的，开发过程中碰到问题我也会向他请教。有次偶然看到他 Twitter 放开了自己的时间表，任何对 Rust compiler 的开发者都可以约个时间聊聊，所以我就约了个线上会议。</p><p>首先我问了一个比较宽泛的问题：你如何调试编译器，因为我发现你解决问题非常快。</p><p>compiler-errors: 首先对于一个问题，我会尝试构建一个最小能重现问题的代码用例，根据报错信息或者代码栈看源代码，rust-analyzer 对看代码帮助非常大，我们基本可以很快跳转到任何变量或者函数的定义。使用 VsCode 的 terminal 运行命令，错误栈里的文件信息里面有源代码的路径，ctrl 按下去可以直接跳转到对应的代码行。我对 compiler 的很多部分都了解一些，主要是因为看了不少代码，有时候一看错误信息就能大致判断出问题的位置，如果有必要再去看运行的日志。</p><p><em>VsCode terminal 运行命令直接跳转文件位置这个我学到了，我之前一直习惯在系统终端运行命令，VsCode 只是用来编辑代码。</em></p><p>我：你是否使用 GDB 之类的调试器？<br><strong>compiler-errors:</strong> 我基本不用这个，因为使用 GDB 调试需要另外开一些编译选项，这会让编译变得很慢，而且运行的时候也会变得很慢。我记得很早之前使用过一次，感觉不太好。</p><p>我：我进行了两个月的 Rust compiler 开发，所以接触到了很多语言的细节，给我的感受是 Rust 像是一个大杂烩，我能看到 Ruby 的影子，比如链式调用这样的风格，也能看到很多函数式编程的影子，所以这很独特，但我会担心 Rust 未来的发展，是否会太过独特而导致只有一小群人在使用。</p><p><strong>compiler-errors:</strong> 对此我也不是很确定，确实 Rust 比较复杂，有很多问题还没解决，初学者上手的难度比较高，但一个开发者不用掌握所有 Rust 的边边角角也能开始开发，我很肯定，Rust 对于编写和维护大型的、对性能、安全型要求高的项目来说是非常合适的。比如 Rust compiler 这个项目本身，这么庞大的项目我们在 Review 代码的时候其实是比较简单的，主要看实现的逻辑是否有问题，而不会担心内存方面的问题，而且我们也有信心不断地对代码进行重构。Rust 从学术界的编程语言借鉴了不少东西，比如 OCaml 是一门很精美的语言，但是很多年一来一直对并行这块支持不好，工业界的使用范围也比较少。</p><p><em>这些感受和我基本一致，在这么多年我断断续续的学习 Rust 过程中，我从未掌握过 Rust 的所有内容，但我发现从代码层面理解一个 Rust 项目非常容易，我接触过的几个领域的项目都是如此，比如 wasmer, youki, compiler，因为 Cargo 和统一的代码组织方式，还有 rust-analyzer 这样的工具辅助，理解代码相对来说容易很多。</em></p><p>接着我让他帮忙简单看了看我正在做的一个相对比较大的 PR，而后聊了一下他在 aws 工作的情况，这些就不细写了。</p><p>期间也问了一个我觉得自己看代码还没理解的部分，就是 method lookup 的相关实现，他说最好在一个 session 里面来分享这些，这样其他人也可以看到。Compiler team 会定时组织一些技术分享，视频都会上传到 Youtube，感兴趣的可以在这里看：<a href="https://www.youtube.com/results?search_query=RustcContributor%3A%3Aexplore">RustcContributor::explore - YouTube</a></p><p>我觉得这种线上面基的经历不错，可以认识一些人，得到一些交流。这一年我基本都在家办公，现实中除了和同事沟通，认识新人的机会比较少。所以我也打算搞一个线上预约，如果想和我交流的可以在这里选择一个时间，我们沟通半小时：<a href="https://calendly.com/cyukang/30min">https://calendly.com/cyukang/30min</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久没有更新博客了，最近两个月我在开心地写代码，今天想写篇文章，赶紧抓住这个冲动。&lt;/p&gt;
&lt;p&gt;上周和 Rust compiler 的一个核心开发 &lt;a href=&quot;https://github.com/compiler-errors&quot;&gt;compiler-errors&lt;/
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>无意识偏见</title>
    <link href="http://catcoding.me/p/unconscious-bias/"/>
    <id>http://catcoding.me/p/unconscious-bias/</id>
    <published>2022-10-21T19:50:07.000Z</published>
    <updated>2023-01-02T16:38:32.578Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到 Hao Chen 在 Twitter 上分享了无意识偏见，<a href="https://twitter.com/haoel/status/1566636122330959872">Hao Chen on Twitter: “Unconscious Bias 无意识偏见</a></p><p><img src="/images/ob_pasted-image-20220906074202.png" alt=""></p><p>在外企中这确实算一个必修课，微软入职的时候这是着重培训的一块内容。多元和包容的职场环境，需要员工关注这些细节。</p><p>在经过培训之前，“无意识偏见”对我来说很陌生，但回想起来我其实是有过这样的经历的。</p><p>我联想到了前公司的一件事情。当时我们在做企业的 IT 安全，解决公司数据的安全问题。我们安全相关的团队经过了一些讨论，我需要把这些东西形成文档。其中有一块是员工的安全管理，我们当时的结论是对于外包人员，需要着重管理，因为外包人员素质和安全意识差，人员流动性高，所以接触的数据需要分级等等。</p><p>这些都是我们讨论的东西，所以我写在了我们团队的 Conflence 页面。我刚编辑完 (我猜他是无意间看最近编辑页面发现的)，一个外包员工给我发私信，言语中透露着愤怒，谁说的外包人员素质差？</p><p>我一下意识到，这样写对他造成了很大的伤害。后来这个员工就离职了，我不确定是不是具体因为这件事导致他的离职，但我很肯定，外包在公司里面会感受到各种隐形的歧视的。</p><p>不止我的前公司，我也见过很多其他公司的外包人员的各种待遇，比如同在一个办公室里，但节日礼品、文化衫这些只有正是员工有，如此等等。当然可以从公司角度考虑，需要节省成本，但从工作环境和对人的关怀来说，我们应该努力减少偏见对人的伤害。</p><p>其实无意识歧视非常普遍，主要是因为人们习惯用标签和惯性思维。例如一个 HR 筛选简历，他最基本的一个筛选条件是学历、专业等等能迅速做出判断的条件，这也许主要是为了效率。当 HR 把筛选条件扩大到年龄、地域、性别等，我们通常会觉得过分了，但这些规则在社会上一直隐形运行着。</p><p>人们通常会对自己的受歧视经历印象深刻，但如果你是歧视者，就会自己做出的歧视行为毫无知觉，大多数人会难以发现自己带着习惯形成的偏见。正如耗子所说，偏见不止是对他人会造成伤害，对自己的认知和进步也会形成阻碍。比如技术上的偏见，抛去应用场景和需求谈技术栈，就会让自己的偏见无意识占了主导，从而做出不好的选择。</p><p><strong>我认为偏见主要是会扼杀了好奇心和求知欲，当你把一个对立的标签贴上之后，就认为自己已经足够了解，从而会丢掉去了解的好奇心和动力。</strong></p><p>没人会是一个毫无偏见的人，除非他抛去所有生活经验的总结，但尽量客观地看待人和事这个习惯值得培养，于人于己都有好处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看到 Hao Chen 在 Twitter 上分享了无意识偏见，&lt;a href=&quot;https://twitter.com/haoel/status/1566636122330959872&quot;&gt;Hao Chen on Twitter: “Unconscious Bias 无
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>我曾经干了 3 年 EDA</title>
    <link href="http://catcoding.me/p/3-years-in-eda/"/>
    <id>http://catcoding.me/p/3-years-in-eda/</id>
    <published>2022-08-28T22:01:11.000Z</published>
    <updated>2023-01-02T16:38:32.562Z</updated>
    
    <content type="html"><![CDATA[<p>这周末在上海和几个前同事聚了聚，勾起我的一股回忆。</p><p>今天就写写 EDA，因为我的第一份工作就是加入了上海的一个创业公司，我们做的就是 EDA 行业中自动化形式验证工具。</p><p>这个行业如今被卡脖子，资本涌入，有人称之为国内的风口，但我加入的那时候就像是一个老鼠洞。我毕业那会儿正好看了《黑客与画家》，所以选择了一个创业公司，走了一条更少人走的路。</p><p>不过短短三年，我也只是在这个行业浅尝辄止。下面这些谈谈我的经历和感受，凭回忆写写有可能不够准确。</p><p>不得不说，美国人卡得很准，中国不是要大力发展芯片么，没有 EDA 这种工具要做芯片简直就是天方夜谭，EDA 软件实际上已经成为中国高端芯片的命门所在。</p><p><img src="/images/ob_pasted-image-20220825005953.png" alt=""></p><p>电子设计自动化（Electronic design automation，缩写：EDA），这个行业的发展伴随着 1980 年后的芯片革命和硅谷的崛起。芯片本质上是很多个物理逻辑门的组合，在芯片的早期，因为复杂度和集成度远不如现在，设计人员还可以手动完成电路设计和布线。</p><p>然后芯片的复杂度越来越高，自然人们开始想，如果能够使用软件来描述硬件设计就好了。1986 年，硬件描述语言 Verilog 推出，1987 年 VHDL 推出，各种仿真器开始出现，这些仿真器可以解析 Verilog/VHDL，并对设计的芯片进行仿真，这样使得芯片设计可以在真正被应用前进行严格的验证。</p><p>如今，EDA 工具已经成为芯片设计行业的标准工具，涵盖了芯片设计、布线、验证和仿真的所有流程。</p><p>EDA 行业的三巨头是 Synopsys、Cadence、Mentor，这些公司比我们大部分现在的程序员年龄都大，其中 Mentor 成立于 1981 年，另外两个分别成立于 1985 和 1986，这些公司如今已经成为事实上的垄断，占据 80% 左右的市场份额。</p><p>2011 年，我加入 NextOp 的时候，公司已经创立了 5 年并开始进入了稳定期。市场人员在美国，主要研发人员在上海，这种模式和现在 zoom 这类公司很像。两个创始人都是 90 年左右去美国，读了博士之后进入了这个行业。</p><p>他们发现了一个比较细分的市场，因为日常工作中经常需要人为地去写 Property，所以就想如何能在仿真器运行之后自动生成 Property 就好了。Property 类似于我们写程序中的断言，可以当作硬件的一部分 spec，也可以用于硬件开发中的 regression testing，如果一个断言被触发了，可能是一个 Bug，也可能是一个之前漏掉的 coverage。因为硬件的 Bug 非常非常值钱，如果能在芯片设计阶段发现 Bug，那么这个工具将非常有用，我们的产品名称就叫做 BugScope。</p><p>我记得当时我们的一个重要里程碑就是找到了苹果的 Bug，可以感受到公司上下都非常有成就感，因为发现一个苹果的硬件 Bug  可以减少很多可能的损失，这非常能证明工具的价值。</p><p>这里面有很多技术上的难点，自动生成 Property 可以用到的输入有两方面，仿真器的运行数据和 Verilog/VDHL 代码。如何把仿真器里的运行数据搞出来，如何节省磁盘，我当时看着那些几十年的 C 头文件，去调试仿真器的 hook 函数，有时候盯着下面这种信号仿真看，如今想来都头大。</p><p><img src="/images/ob_pasted-image-20220825005451.png" alt=""></p><p>更难的是如何去自动发现数据里的规律，结合 Verilog 代码去生成 Property，如何写出足够简单而不会自相矛盾的 Property。这些会涉及到 Model checking、<a href="https://en.wikipedia.org/wiki/SAT_solver">SAT solver</a> 之类的算法，Model checking 的开山鼻祖  <a href="https://en.wikipedia.org/wiki/E._M._Clarke" title="E. M. Clarke">E. M. Clarke</a> 为创始人的博士生导师，所以作为了公司的顾问。他因为 Model checking 的开拓性工作获得了 2007 年的图灵奖。</p><p>虽然公司很小，但技术氛围很好，有些像个实验室，开发人员基本都是来自中科大、上交大、电子科大。作为刚毕业的小白，我在这个公司待的三年还是能学到了不少东西。里面的代码主要是几十万行的 C/C++，任何产品的 crash 都是在客户的机器上，所以对代码质量要求很高。回想起来 Software Engineering 做得非常不错，代码测试覆盖率几乎 100%，还有一堆 fuzz testing，为了解决内存问题 valgrind 在自动化测试中用了很多。</p><p>这个行业门槛太高，因为涉及到多个方面，需要一些硬件背景，最好有一些芯片从业经验，还需要好的软件工程能力。具体到我们的问题，比如 Property 怎么生成，就需要不少行业积累和手工打磨，一个个 case 去琢磨，当时公司 10 来个人也只有两三个做这块。我跟着做过一小段时间，发现自己做不来，我的耐心和相关知识都不够。</p><p>EDA 行业那时候就已经非常稳定，黄金时期已经过去。有个老板经常感叹，整个 EDA 行业的大小好不如香蕉行业。</p><p>我们那时候已经有一些稳定的客户，最大的客户应该是苹果，在上海的时候我也去 Marvell、中兴这些公司做现场调试。</p><p>2013 年我们公司被印度人主导的公司 <a href="https://semiengineering.com/atrenta-buys-nextop/">Atrenta 收购了</a>，过了几年 Atrenta 又被 Synopsys 收购了，我在 2014 年因为想去深圳就离职了。在这个稳定的行业，如果想做也是可以一直做下去的，我之前的同事们，有一部分还在 Synopsys 做，有一部分去了美国，有一部分在国内出来创业一圈，随着我国大力支持 EDA 行业，他们又回到了这个行业继续奋斗。</p><p>我国是否能自研出来这些 EDA 工具？我们几十亿，几百亿地往里面砸钱，总能激起一些浪花，民族之光华为总能做出来吧？</p><p>我不确定，能不能做出来是一回事，好不好用或者能到什么深度又是另一回事。比如现在国内 EDA 工具的领头华大九天能做出部分 5 nm 芯片的国产替代，但 3nm 及以下的高端芯片就被美国卡脖子了。</p><p>EDA 这类工具在硅谷自然生长出来，而不是资本催生出来的，也不是一个或者两个公司做出来的。</p><p>行业迅猛发展有其时代的背景，因为有了些实际的需求和一定的行业积累，自然会有些人去解决问题和创新，完善的产权保护机制让人能够去解决一些看似小的问题，成为创业企业养活自己，比如像 Verilog/VHDL 这类的 Parser 是一个小公司 Verific 做的，我现在还记得是因为他们每年给客户送上一张巨大的卡通硅谷地图。</p><p>像我所在的公司这种一再被并购，大鱼吃小鱼的过程一直在发生，这些 EDA 巨头就是从无数个收购中发展起来的。</p><p>我国不缺软件开发人才和资金，但缺既有软件开发能力和这个行业背景，又能解决一些基础数学问题的人，据说国内 Synopsys 已经被挖走了一大半。也许我们短时间能好好追赶一阵，但彻底解决卡脖子的问题估计需要更多年了。</p><p>如今想起还有些怀念，单纯的一段技术工作体验。我那时候还是浮躁，要是能更多一些纯粹的好奇心就好了，这样会有更深入的体验。</p><p>但这次我们这几个聚会的同事，大多都跳出了这个行业，主要因为我们对这行没有特别大的兴趣和优势，另外想法比较多吧，总之跳了出来就不可能再回去了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这周末在上海和几个前同事聚了聚，勾起我的一股回忆。&lt;/p&gt;
&lt;p&gt;今天就写写 EDA，因为我的第一份工作就是加入了上海的一个创业公司，我们做的就是 EDA 行业中自动化形式验证工具。&lt;/p&gt;
&lt;p&gt;这个行业如今被卡脖子，资本涌入，有人称之为国内的风口，但我加入的那时候就像是
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>为 Rust 做些小贡献</title>
    <link href="http://catcoding.me/p/contribute-to-rust/"/>
    <id>http://catcoding.me/p/contribute-to-rust/</id>
    <published>2022-08-18T22:22:10.000Z</published>
    <updated>2023-01-02T16:38:32.566Z</updated>
    
    <content type="html"><![CDATA[<p>有一段时间没有写文章了，最近沉迷于<a href="https://github.com/rust-lang/rust/pulls/chenyukang">给 Rust Compiler 做些贡献</a>，这里分享一下自己的收获和感受。</p><p>契机是那天 Rust Issue 到了 <a href="https://github.com/rust-lang/rust/issues/100000">100000</a>这个里程碑，我点进去看了看。想起去年花了一周业余时间做过一个去重复的 diagnostics PR，就顺便看了看些最近的一些 issue，我发现有一个看起来比较适合的 issue，就 assign 给了自己。</p><p>过了两天居然在 Teams 收到公司的同事的消息，他问我这个 issue 什么时候能解决，因为 raw-dylib 功能要稳定了，他还在等这个 issue。我平时工作基本不会被催，没想到随便接个开源 issue 会被催，哈哈。于是我很快发了 PR，另外看了看这个 <a href="https://github.com/rust-lang/rust/issues/58713">raw-dylib 功能</a>，这涉及到 Rust 链接 dll 相关的，Windows 上不少 Rust 问题依赖这个 RFC。</p><p>后面我接着做了几个 diagnostics 方面的 issue，这类问题是最适合 compiler 开发新手的，因为通常来说修复并不复杂。我在这个过程中基本看完了 Rust Parser 这部分的代码。</p><p>初学 Rust 一个很重要的技能就是理解 Rust 的报错信息，很多时候是编译器在提示我们写程序。编译器的报错信息特别重要，太少则说明不了问题，太详细则让人抓狂。Rust compiler 在报错这方面真的非常好，基本都是源自于开发者发现了更好的报错方式，自己加上去。</p><p>我在做的过程中，发现 Rust 编译器的提示很人性化，比如 Parser 发现你该写 <code>pub</code> 的地方写了个 <code>public</code> ，则会提示你是不是应该写 <code>pub</code>，比如你写了个 <code>import mod</code>，则会提示你是不是应该写 <code>use</code>，甚至发现不容易显示的 Unicode chars，则会提示这里要注意哦。关于生命周期的提示，有的还会加上各种好看的图线标识。</p><p>甚至，他们最近开始做 diagnostics 的语言本地化了<a href="https://github.com/rust-lang/rust/issues/100717">Diagnostic Translation</a></p><p>另外 Rust 的提示在类型推导后也可以加上更多有用信息，如果我们确定这里的提示就是唯一的修复方法，则可通过 rust-fix 自动修复，所以你能看到 Rust compiler 这个 repo 的单元测试里面有很多 .fix 后缀的对比文件。</p><p>我最近在修的<a href="https://github.com/rust-lang/rust/pull/100502">另外一个 Bug</a> 是来自 Tikv 项目发现的，当函数参数中有 <code>Arc::default()</code>的时候，从类型分析的结果看，这个参数可以满足多个其他参数，这样在分析缺少的参数给出合适的提示时就会有问题，那个算法导致死循环。我花了比较多时间写出最小化的测试用例，最后给出了一个修复。我还挺喜欢分析这类 Bug，像小说一般充满了悬疑。</p><p>在这段时间里，我也和一些公司里全职做 Rust 相关的同事聊了聊，发现微软已经有几个组在全职做了，主要集中在 Rust 和 Windows、开发工具相关方面。另外和社区里其他几个开发者沟通了一下，华为的也有一些。</p><p>Rust 纯粹是互联网上自由生长出来的一门语言，创始人早已经退出主导，主要的核心成员都是社区自由组成的，这里并没有一个绝对意义上的独裁者。我碰到的几乎都是在凭热情做贡献，比如最近一年很活跃的 <a href="https://github.com/compiler-errors">compiler-errors</a> 这个开发者，有一次我催他 review PR，他说我不是全职在做 Rust，所以时间需要自己安排，不要催。我接着和他聊了聊，他的日常工作和 Rust 完全无关，花这么多时间就是爱好而已。</p><p>这里足够开放，基本上你想参与到 Rust 开发中来，这个门槛是不高的。</p><p>我并不是鼓吹 Rust 有多好，Rust 自然还有很多问题，学习成本比较陡峭，而且也并不适合很多日常项目。如果从功利角度考虑，投入产出比不高。</p><p>我只觉得 Rust 很好玩，又足够开放，吸收了多年编程语言方面的理论，完全出自开源社区和一线开发者，一切讲究实用，所以又没有 OCaml、Haskell 那种学究气，对编程语言感兴趣的朋友可以多关注一下。</p><p>为什么我能沉下去做一些看似繁琐的开源工作，这里有几个方面：</p><p>第一，我本身对编程语言的实现挺有兴趣的，几年前我基本看完了 EOPL 这本书，也做了很多里面的小解释器。可以说，编译这块算是程序员的一个小浪漫。带着问题看代码比较容易看进去，看完 Parser 这块之后，我打算再看看类型分析。</p><p>第二，Rust 这几年工具链有很大提高，比如 Rust compiler 这样的大项目，VSCode + Rust Analyzer 就能很好应对，几乎能做到所有的变量跳转，函数调用跳转和调用关系分析，类型提示等等。Rust 在这样的大型项目和多人维护的项目上能体现出优势，有编译器的和类型系统的帮助，查阅代码和写代码体验和效率都好很多，这与我日常工作中需要在一堆年代久远的 PowerShell 中翻来覆去爽太多了。</p><p>第三，最近两年在日常工作中，我接触到了大量历史悠久的代码，这些代码其实很丑陋，但每年能为公司赚不少钱。我们常说提高编程技能需要向优秀的代码学习，但我发现被迫接触一些丑陋的历史代码对编程的心性大有裨益，因为今后你看很多代码都美得很，编程和调试时候的耐心好了很多。</p><p>感兴趣的可以交流交流🙌</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有一段时间没有写文章了，最近沉迷于&lt;a href=&quot;https://github.com/rust-lang/rust/pulls/chenyukang&quot;&gt;给 Rust Compiler 做些贡献&lt;/a&gt;，这里分享一下自己的收获和感受。&lt;/p&gt;
&lt;p&gt;契机是那天 Rust 
      
    
    </summary>
    
    
      <category term="Programming" scheme="http://catcoding.me/tags/Programming/"/>
    
      <category term="Rust" scheme="http://catcoding.me/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>让 Obsidian 朗读你的文字</title>
    <link href="http://catcoding.me/p/obsidian-speech/"/>
    <id>http://catcoding.me/p/obsidian-speech/</id>
    <published>2022-07-28T17:31:10.000Z</published>
    <updated>2023-01-02T16:38:32.574Z</updated>
    
    <content type="html"><![CDATA[<p>让写作更好的一个简单粗暴的办法是成为自己的读者，不断重读自己的文字，不断地去修改。</p><p>这不止是让文字变得更易读，也是一个和自己对话的过程，Paul Graham 在<a href="http://www.paulgraham.com/words.html">Putting Ideas into Words</a>中写道：</p><blockquote><p>The real test is reading what you’ve written. You have to pretend to be a neutral reader who knows nothing of what’s in your head, only what you wrote. When he reads what you wrote, does it seem correct? Does it seem complete? If you make an effort, you can read your writing as if you were a complete stranger, and when you do the news is usually bad. It takes me many cycles before I can get an essay past the stranger.</p></blockquote><p>我习惯使用微信读书的 AI 语音来听书，后来我发现微信读书还能订阅公众号，所以尝鲜用 AI 语音来朗读自己写的文章，感觉很神奇，像是请了一个旁人来朗读。</p><p>我们通常写了文章之后会自己在心里默读，但一个真实的声音读出来会更容易发现问题：</p><ul><li>You will find your voice.</li><li>You will find mistakes and unnecessary words and sentences.</li><li>You will make your writing easy for reading.</li></ul><p>所以，我前段时间写了个 Obsidian 插件来实现朗读功能，代码在这里<a href="https://github.com/chenyukang/obsidian-speech">obsidian-speech</a></p><p>写完之后我想提交到官方插件市场，这时才发现已经有人做了个同样功能的插件，然后就不想提交了。但我还是喜欢自己的实现，因为里面有些小优化。</p><p>优化一，在阅读的过程中自动判断出英文段落，因为用中文语音去朗读英文会显得不够协调。</p><p>优化二，高亮当前朗读的段落，这样就能快速定位。</p><p>但 Obsidian 浏览器里的 AI 语音质量明显没有微信读书里的自然，支持的语音种类也少，微信读书应该是做了不少优化。</p><p>这个小插件还有不少可以继续细化的地方，比如自动跳过内嵌的代码部分，如果你感兴趣一起来完善吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;让写作更好的一个简单粗暴的办法是成为自己的读者，不断重读自己的文字，不断地去修改。&lt;/p&gt;
&lt;p&gt;这不止是让文字变得更易读，也是一个和自己对话的过程，Paul Graham 在&lt;a href=&quot;http://www.paulgraham.com/words.html&quot;&gt;Pu
      
    
    </summary>
    
    
      <category term="开发" scheme="http://catcoding.me/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="obsidian" scheme="http://catcoding.me/tags/obsidian/"/>
    
      <category term="TypeScript" scheme="http://catcoding.me/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>第 21 期：维护自己的 dotfiles；Could Facebook move faster；你和你的研究</title>
    <link href="http://catcoding.me/p/weekly-21/"/>
    <id>http://catcoding.me/p/weekly-21/</id>
    <published>2022-07-23T23:34:10.000Z</published>
    <updated>2023-01-02T16:38:32.578Z</updated>
    
    <content type="html"><![CDATA[<p>这两天我开始练习双拼输入法，目前已经找到一些感觉。双拼只需要按键两次就能输入一个汉字，我认为这种设计明显更合理，熟练后应该会比全拼快的，另外节奏感会更好些。</p><p>换一个陌生的输入法之后，似乎有那种刚使用电脑的感觉，这大概也能锻炼一下脑子，希望顺便纠正一下我前后鼻音不分的问题。</p><p>刻意对习以为常的东西做些改变，过段时间就会有不同的体验。</p><h2 id="维护自己的-dotfiles"><a href="#维护自己的-dotfiles" class="headerlink" title="维护自己的 dotfiles"></a>维护自己的 dotfiles</h2><p><a href="https://www.owenyoung.com/blog/web3-to-dotfiles/">通过创建 dotfiles,  我终于拥有了一个 web3 身份</a></p><p>owen 的博客非常棒，可以说是静态博客的典范了。我从他这里借鉴了一些理念和想法，比如把自己的博客当作一个日常都会维护的数字花园，有个不错的主页，统计自己写了多少字等小细节。</p><p>他的博客里面有很多平时收集的内容，比如<a href="https://www.owenyoung.com/quotes/">收集发人深省的话</a>，比如 <a href="https://www.owenyoung.com/sources/">探索互联网上高质量的内容 - Owen 的博客</a>，值得去看看。</p><p>程序员为什么热衷于玩博客？其实博客虽然本质上是个简单站点，但可以玩的方式很多，又不受什么约束，比如 owen 写的<a href="https://www.owenyoung.com/blog/add-search/">给 Zola 博客增加搜索功能</a>，比如<a href="https://www.joshwcomeau.com/blog/how-i-built-my-blog/">How I Built my Blog using MDX, Next.js, and React</a>。</p><p>dotfiles 是 Linux/Unix 系统里的各种配置文件，这些加上密码可称之为个人赛博空间的根基。这篇文章里详细介绍了如何长期维护这些配置，目的是减少重复工作，并保持轻量，可重现，可持续化。</p><p>虽然我之前在 Github 上看到过这类项目，但自己一直没花时间去整理自己的 dotfiles，回想起来我的 Github 账号的 ssh key 都有 20 来个了，所以看到这篇文章之后，我就开始着手干了起来。</p><p><a href="https://github.com/comtrya/comtrya">comtrya/comtrya</a>这个 Rust 写的小工具并不是非常成熟，因为还在快速开发中，其文档和实际有些出入。我在使用的过程中踩了一些坑，看源代码才解决。所以如果你也想撸起袖子干起来，选择<a href="https://www.chezmoi.io/">chezmoi</a>会更省事。</p><p>另外一个体会是，很多东西要做到自动化，首先要对重复劳动敏感，得找出规律，然后就是<strong>约定优于配置</strong>(<strong>convention over configuration</strong>)，用程序去做重复的事，而留出配置应对改变。</p><h2 id="Could-Facebook-move-faster"><a href="#Could-Facebook-move-faster" class="headerlink" title="Could Facebook move faster ?"></a>Could Facebook move faster ?</h2><p><a href="https://twitter.com/TechEmails/status/1550168842378170368">Mark Zuckerberg: Could Facebook move faster? March 30, 2012</a></p><p>Internal Tech Emails 这个推特账号经常爆料些科技公司的内部邮件。</p><p>前两天看到这个邮件，Zuckerberg 2012 年在北京待了一段时间。期间和人人网创始人和李彦宏进行了友好学习，然后他发邮件给公司几个高管，写道 Facebook 能否能像这些中国公司一样，更快地推进。</p><p><img src="/images/ob_2022-07-22-170945.png" alt=""></p><p>从邮件内容上看，Zuckerberg 对人人网所展示的一些在研发的产品表示艳羡，并能看出来他们在抄 Pinterest，在抄 Tumblr，对比之下 Facebook 简直太慢了。”<strong>Move Fast and Break Things</strong>“ 是 Facebook 所倡导的理念，但我想中国人显得更快因为我们加班更猛。</p><p>最后写道，他们确实是从其他人那里克隆想法，但是我们围绕信息、照片做的这些产品确实也没什么非常多原创想法。</p><p><img src="/images/ob_2022-07-22-171315.png" alt=""></p><p>这个推里面还有几个管理者的回复，有的比较长，主要是在思考如何做到 copying vs. innovating 的平衡。</p><p>也有人积极响应，Let’s ‘copy’ (aka super-set) Pinterest!  🤣</p><p>彼时，正是移动互联网爆发前夕，Zuckerberg 也注意到了刚上线没多久的微信，幸好他没有学到人人网和百度的精髓，不然 Facebook 可能也会泯然于众。</p><p>2011 年人人网始于校内网，也是从克隆 Facebook 开始的。我原来在学校那会儿，印象很深刻的是他们在食堂旁边摆了个摊子，注册一个账号送一个鸡腿，真鸡腿！我就是为了鸡腿去注册了个账号。</p><p>2010 年前确实好多人用校内网，2009 人人网宣布注册用户量超过 1 亿，而当年的中国网民总数量只有 3.8 亿，可以说人人网是当年最大的社交网络平台。</p><p>2011 年 5 月人人网在纽交所上市，甚至早于 Facebook，但这其实已经是公司的顶点了。人人网确实什么火做什么，却没赶上移动互联网的大船。后来更是做互联网金融、区块链，可能真是由于其浮躁最终把自己的基本盘给搞没了，<a href="https://www.huxiu.com/article/271949.html">人人网为什么没能成为中国的 Facebook?</a></p><p>公司和人一样，大抵就是创始人的化身。什么热追什么，可能是不明白自己到底想要什么，也不明白自己擅长什么。</p><p>十年光景，恍若隔世。十年对于迅速发展的互联网行业确实已经太长了，其实很多事情我们都无法预测。</p><h2 id="你和你的研究"><a href="#你和你的研究" class="headerlink" title="你和你的研究"></a>你和你的研究</h2><p><a href="https://www.cs.virginia.edu/~robins/YouAndYourResearch.html">You and Your Research</a></p><p><a href="https://www.ruanyifeng.com/blog/2016/04/you-and-your-research.html">理查德·汉明《你和你的研究》 - 阮一峰的精简版本</a></p><p>这篇文章我也是在《纳瓦尔宝典》长长的推荐列表里看到的，他说这不是专门为做学术的读者写的，适合所有想做成大事的人。</p><p>理查德 · 卫斯理 · 汉明（Richard Wesley Hamming）是美国数学家，图灵奖得主，其贡献了汉明码、汉明距离和汉明谱窗以及数值方法。关于这个主题他谈论过很多次，之前也为研究生开设过一门名 The Art of Doing Science and Engineering: Learning to Learn 的课程。互联网上也有一个相关的视频：<a href="https://www.youtube.com/watch?v=a1zDuOPkMSw">Hamming, “You and Your Research” June 6, 1995</a>。</p><p><img src="/images/ob_2022-07-22-182038.png" alt=""></p><p><a href="https://www.notion.so/6bbb616bba2b45649f46e30e6ac8c493">你和你的研究</a>这个翻译加评注版本非常好，值得好好品读，这里很多内容都值得任何想做创造性工作的人思考：</p><blockquote><p>Knowledge and ability are much like compound interest – the more you do the more you can do, and the more the opportunities are open for you.</p></blockquote><p>做出卓越的研究也需要情感上的倾入：</p><blockquote><p>Deep emotional commitment seems to be necessary for success. The reason is obvious. The emotional commitment keeps you thinking about the problem morning, noon and night, and that tends to beat out mere ability.</p></blockquote><p>这段让我想到张益唐，他对物质生活追求极低，很长时间都靠朋友接济，在朋友家打地铺，一边在 Subway 打工，一边却思考着最深入的数学难题，最终大器晚成做出惊人成果，<a href="https://www.youtube.com/watch?v=3YyxCF3rmaA">Yitang Zhang Counting from Infinity</a>。张益唐的故事如果拍成电影应该比 Nash 的还精彩。</p><p>作为一个平凡人，我羡慕那些能为人类智力边界做出拓展的人，即使是历史的注脚，也意味着在历史长河中留下了点痕迹。</p><p>但确实，学术界大部分人也是为了谋求一份生计。我曾在学校见过几个博士，他们吃了午饭后总是会去买彩票，我想经过科学训练的人应该会明白概率这回事，为什么要去买彩票，于是我就问他们，其中一个回答：虽然中奖概率极低，但是总能有个小盼头。</p><p>如今，就业越来越难，更多的人本科毕业就去读研了，读研之后还可能去读博，而很多人其实不适合做研究的，最近我看到这篇很不错的文章，<a href="https://zhuanlan.zhihu.com/p/542319901">清华姚班教授劝退文：我见过太多 PhD，精神崩溃、心态失衡、身体垮掉、一事无成</a>，读博之前认真思考一下吧。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://www.theblock.co/post/156038/how-a-fake-job-offer-took-down-the-worlds-most-popular-crypto-game">How a fake job offer took down the world’s most popular crypto game</a> </p><p><a href="https://roninblockchain.substack.com/p/back-to-building-ronin-security-breach">Back to Building: Ronin Security Breach Postmortem</a></p><p>社会工程学是终极入侵，这个剧情很精彩！北韩的黑客组织虚构了不存在的公司，通过 Linkedin 和 WhatsApp 勾搭了 Axie 的高级工程师，然后安排面试并且开出待遇优厚的 Offer。但是！发送的 PDF Offer 文件有病毒，于是成功拿下 9 个验证节点中的 4 个，然后发现某个 RPC 节点的漏洞，这样就成功侵入 Axie 系统，盗走 5.4 亿美元的数字资产。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-07-22-184823.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天我开始练习双拼输入法，目前已经找到一些感觉。双拼只需要按键两次就能输入一个汉字，我认为这种设计明显更合理，熟练后应该会比全拼快的，另外节奏感会更好些。&lt;/p&gt;
&lt;p&gt;换一个陌生的输入法之后，似乎有那种刚使用电脑的感觉，这大概也能锻炼一下脑子，希望顺便纠正一下我前后鼻音
      
    
    </summary>
    
    
      <category term="周刊、写作、程序员" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A%E3%80%81%E5%86%99%E4%BD%9C%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
</feed>
