<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2022-06-26T12:39:29.279Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第 17 期，远程办公；程序员如何保持健康；纳瓦尔宝典</title>
    <link href="http://catcoding.me/p/weekly-17/"/>
    <id>http://catcoding.me/p/weekly-17/</id>
    <published>2022-06-26T20:28:10.000Z</published>
    <updated>2022-06-26T12:39:29.279Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_d9b805d319ed52659cb005e56bc1069.jpg" alt=""></p><p>又隔了一周没更新，基本上除了工作，我在忙于带娃和减肥。疫情过后，和家人在一起了孤独感就少了一些，写作和分享本质上是个孤独的事情。</p><h2 id="远程办公"><a href="#远程办公" class="headerlink" title="远程办公"></a>远程办公</h2><p><a href="https://world.hey.com/dhh/employee-surveillance-software-is-managerial-bankruptcy-94e48a08">Employee surveillance software is managerial bankruptcy</a></p><p>Rails 创始人 DHH 很早就倡导和实践远程办公，这篇文章中 DHH 谈了关于监控的看法。有的公司虽然因为疫情远程办公，但是公司在员工的电脑上安装了强大的监控软件，比如必须要求员工在屏幕前，或者监控键盘输入等等。</p><p>DHH 认为这是一种管理的无能，暴露了管理者的不安全感和偏执，这是最糟糕的管理方式，让工作中原本的信任变成了怀疑和恐惧。</p><p>有的公司即使不远程办公，也在是类似的管理模式，比如让员工详细填写工作内容，月报、周报、日报，甚至有的部门细化到每个小时。我待过这样的公司，填了一段时间之后就觉得完全是浪费生命。</p><p>因为疫情和家庭原因，我 2022 年基本都在远程办公，总共只去了办公室几天。这段时间我也体会到了远程办公的好与不好。</p><p>好处当然在于能节省不少通勤时间，每天来回至少一个小时吧。这些时间可以用来休息、陪娃、锻炼等等。</p><p>坏处当然也比较明显，在家办公效率通常是没有办公室高的，特别是小孩不上学的时候，我基本得每过半小时去处理一下。有时候工作正进入状态，又可能被小孩过来打断思路。好在微软的会议基本都是线上进行，很多事情也通过邮件异步沟通，所以我觉得问题不大。</p><p>另一个坏处是工作和生活没有了明显的界限，有时候我白天工作投入少一些，晚上等娃睡觉了之后再工作，有的时候早上起来就工作，搞到中午发现还没洗脸。另外宅在家里太久了之后，有一种脱离感，会有比较强烈的社交需求，比如想和同事朋友散步、聊天。</p><p>如果没法远程工作和灵活办公，我无法想象如何撑过两个娃还小的这个阶段。总的来说，我觉得程序员这个职位是非常适合远程办公的，我们的生产资料就是计算机，这是个天然的优势。</p><p>当然有的人也不喜欢远程办公，比如 Musk 前段时间就发文说 Telsla 要求员工回到办公室，每个公司的管理风格不同吧。微软现在国内的职位默认是需要常驻办公室所在的城市的，如果需要长期在不同城市远程需要特殊申请。</p><p>我之前收集了一些国内可以提供远程办公的职位信息 <a href="https://github.com/chenyukang/remote-jobs-cn">remote-jobs-cn: 国内远程办公职位</a>，如果你感兴趣可以看看。</p><h2 id="程序员如何保持健康"><a href="#程序员如何保持健康" class="headerlink" title="程序员如何保持健康"></a>程序员如何保持健康</h2><p><a href="https://medium.com/taking-flight-with-mailjet/10-tips-to-stay-healthy-as-a-developer-3b17b77e16a6">10 tips to stay healthy as a developer</a></p><p>在《1Q84》里，村上春树这样写道：  </p><blockquote><p>肉体才是人的圣殿，不管在那里祭祀什么，它都应该更强韧、更美丽清洁。</p></blockquote><p>脑力活拼到最后也是个体力活，村上春树用跑步、铁人三项这些运动来锻炼身体和韧性，保持精力上的充沛。</p><p>这篇文章谈到程序员如何保持健康。久坐会带来很多健康风险，这篇文章写的几点也算是老生常谈了，比如保持正确的坐姿、多喝水、多休息、保持睡眠等等，不过里面<u>不要饥饿</u>这点我不太赞同。</p><p>年龄超过 34 之后，我感觉身体和精力确实大不如前了。我们年轻的时候以为自己永远生猛下去，什么也锤不了我，但不到几年我们通常就被打脸了。</p><p>我现在身体上的问题也比较多，有的是久坐和运动少造成的，有的是年轻时候就有的毛病，有的是衰老造成的。每年到了体检的前一段时间，就有些担心，犹如学生年代临近考试那种心情。</p><p>精力方面自然是差了些，现在晚上到了 11 点多就比较困了，某几夜因为小孩闹腾晚上没睡好的话，需要好几天调整过来。</p><p>因为远程办公半年，我的体重增加了 5 斤左右。我对体重的增加比较敏感，肚子和脸上都会很快显现，所以最近我又开始减肥了。</p><p>我的方法通常就是运动和禁食。前几周开始重新打篮球，打了几次之后发现左边膝盖还是没有好，运动之后就会酸痛。因为几年前我打篮球扭伤了一次，而膝盖伤通常是很难完全恢复的。去年我尝试去游泳，这倒是个非常适合久坐人士的运动。</p><p>最近我开始控制饮食，晚上少吃或者不吃。这个办法对我来说很有效，三周左右就能减 3-4 斤。我觉得适当禁食除了减肥，另一个好处是让我胃口更好，因为早上起来后适度的饥饿感，早饭吃起来更香。之前看到朋友圈有人实践辟谷这种方法，看起来有点极端和危险。</p><p>最近我听到一期播客<a href="https://happyxiao.com/happy30pod-073/">快乐三十分 073 舒服是危机</a>，里面谈到现代人把自己搞得太安逸，肉体和精神上的适度痛苦和不舒服是有益健康的，推荐你听听这期。</p><p>关于健康，年初我还看了一本书叫<a href="https://www.amazon.cn/dp/B077QCVJLD">你是你吃出来的：吃对少生病，病了这样吃</a>，介绍了 7 大营养平衡，地中海饮食等等。对于很多中国人来说，需要多吃些蛋白质、蔬菜、和坚果。</p><h2 id="纳瓦尔宝典"><a href="#纳瓦尔宝典" class="headerlink" title="纳瓦尔宝典"></a>纳瓦尔宝典</h2><p>最近我读完了这本书，不，准确的说是听完了。我使用微信读书，用了一段时间之后我已经习惯了使用 AI 语音来听书，现在我几乎一半的书籍是通过这种方式完成的。</p><p>《纳瓦尔宝典》这本书倒没有给我醍醐灌顶之感，也许是因为里面很多观点我之前大多接触过。不过还是很推荐没看过的人读读，都是一些关于工作、财富、幸福、健康的简洁忠告。</p><p>我之前也介绍过那本《百万富翁快车道》，里面有些类似的观点，这两本对比起来我更喜欢《纳瓦尔宝典》。</p><p>书的最后部分推荐了很多书，其中提到《悉达多》和纪伯伦的《先知》，让我特别有共鸣，因为我最近也把这两本书关联了起来。我刚开始使用微信读书的时候，偶然机会听完了《悉达多》，这本是特别适合用来听的书，听完之后我就想到多年前听完的《先知》。</p><p>这两本书还有一些共同点，带一些宗教感，文笔优美，听起来有诗意，推荐给你。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://dariusforoux.com/stop-comparing/">Want to Succeed? Stop Comparing Yourself to Others - Darius Foroux</a> 如果你想要成功，不要和别人比较，和自己的过去比较就行了。</p><p><a href="https://blog.bytebytego.com/p/free-system-design-pdf-158-pages">Free System Design PDF</a> Bytebytego 是几个华人工程师写的技术类型 newsletter，这个小册子里面包含一些系统设计方面的总结。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-06-25-224117.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_d9b805d319ed52659cb005e56bc1069.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;又隔了一周没更新，基本上除了工作，我在忙于带娃和减肥。疫情过后，和家人在一起了孤独感就少了一些，写作和分享本质上是个孤独的事情。
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>Follow Your Passion 是个坏建议？</title>
    <link href="http://catcoding.me/p/passion/"/>
    <id>http://catcoding.me/p/passion/</id>
    <published>2022-06-14T09:45:09.000Z</published>
    <updated>2022-06-26T12:39:29.275Z</updated>
    
    <content type="html"><![CDATA[<p>2005 年的今天，乔布斯在斯坦福大学发表了那个著名的<a href="https://www.youtube.com/watch?v=UF8uR6Z6KLc">演讲</a>，这是 Youtube 上被观看过次数最多的演讲，浏览数超过 4000 万次。</p><p>这个演讲当然很好，感人、给人启迪，乔布斯分享了三个小故事，其中最重要的建议是鼓励大家去追随自己的内心和激情：</p><blockquote><p>And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p></blockquote><p>Follow Your Passion 或者 Follow Your Heart 是年轻人经常会收到的建议，特别是一些成功人士也喜欢给出这样的建议。</p><p>但如果我们没有结合自己的情况审视过，这样的建议会无法下手实践。对于很多普通人来说，问题可能源于：</p><ul><li>不知道自己的激情在哪里</li><li>一直寻找激情则会让人焦虑</li><li>有激情和愿景，但现实很残酷</li><li>如何判断一时兴起，还是内在动力</li><li>何时该追随，何时又该放弃</li></ul><p>如果你也有这样的困惑，可以看看 Cal Newport 的书 <a href="https://www.calnewport.com/books/so-good/">《So Good They Can’t Ignore You》</a>，中文译本为 <a href="https://book.douban.com/subject/26781120/">《优秀到不能被忽视》</a>，这本书让我们换个角度来思考。<sub>Cal Newport 是一个计算机教授，他写了好几本畅销书，你可能读过他的《Deep Work》。</sub></p><p>Follow Your Passion 这个建议容易让人这样想，如果我的工作成果或生活状态不好，是因为我还没找到自己的激情所在，只要我找到了，问题随之而解，我就能成功。</p><p>世界上确实存在一些人极具天赋，他们很早发现自己的激情和才能，并确定职业理想，做出巨大的成绩，比如陶哲轩、科比这类人。</p><p><strong>但对绝大部分人而言，能力和激情都是稀缺的</strong>。</p><p>即使是乔布斯，在他早期并未表现出对电子工程和科技产品的兴趣，如果他追随自己最初的激情 – 艺术、节食、禅宗、冥想，世界上可能多了一个出色的禅修老师，而少了苹果公司。</p><p>后来他碰到了那个时代最出色的极客 Steve Woz，他们最初卖组装计算机是为了搞上一笔快钱，而在这个过程中乔布斯发现了更大的机遇，这也激发了他的热情，可以说 Apple 的创建有一些机缘巧合。</p><p>Newport 的书中写到，很多时候工作与爱好相匹配并不那么重要。而且很多激情无法直接和职业关联起来，比如很多男生的激情所在是篮球，但与篮球相关的职业及其稀少，而能进入职业联盟除了激情更需要天分。</p><p>总之，对大多数人来说爱好不能当饭吃，甚至爱好当饭吃最终会变得痛苦。有关激情，Newport 的研究表明：</p><ul><li>职业激情是很稀缺的</li><li>激情需要时间去积累</li><li>激情是精通的副产品</li></ul><p><strong>职场的激情是在努力工作，并在某件有价值的事情上变得优秀之后才出现的，而不是在那之前</strong>。普通人的职业激情很多时候是一点一点，经过长时间的滚雪球来自然形成的。</p><p>在人年轻的时候，或者是没有足够多的职场资本时，更重要的是如何谋生，如何通过刻意练习让自己掌握稀缺技能，让自己变优秀和独特，而不是寻找激情。</p><p>当一个人足够好，对他人能产生价值时，这个人自然无法被忽视，这是 Newport 的书的核心观点，书里还写了些具体的，比如工匠思维、自主力、如何正确地工作等。</p><p>后来我看到了一个 Quora  上的问题，<a href="https://www.quora.com/What-controversial-advice-have-people-given-to-their-children">What controversial advice have people given to their children</a>，Richard Muller 的回答阐述了同样的道理，在小孩这个阶段，简单粗暴地鼓励他们 Follow Your Passion 是不负责任的。</p><p><strong>因为在人的孩童阶段，他们只是接触了世界的很小一部分，所体现的兴趣和激情往往是模仿。</strong> </p><p>有的女生从小喜欢舞蹈，但结果成了舞蹈老师，并不是说舞蹈老师不好，如果这个人很喜欢舞蹈老师这个职业当然没问题，但她的最初愿景可能是成为舞蹈家，如果能选择她希望有一份其他工作，而只是把舞蹈当一个业余爱好。</p><p>更理智的建议是尽自己所能去接受好的教育，接触更广阔的世界，进入更好的平台，多探索，尽量把选择的机会留到年纪更大的阶段，因为这时候人会更笃定，更知道自己要什么。</p><blockquote><p>Exploring is an adventure. It is full of uncertainty. It is much more challenging to explore than it is to follow your passion; there is much more uncertainty. If you feel that you must avoid all anxiety, then it is a very uncomfortable way to go. You live with doubt. It is not easy; in fact, it is full of wrong directions, and when you find yourself on a path that is not going where you want, you have to be ready to get off.</p></blockquote><p>我接着思考了一下，为什么很多成功人士经常会给出这种追随激情的建议。在 <a href="https://www.youtube.com/watch?v=1feBz5ifT-U">Scott Galloway 的这个视频</a> 中，他说如果一个人给你建议 Follow Your Passion，说明这个人已经变得富有了🤣。</p><p>成功人士说的其实并没有错，我联想到一个比较形象的类比，假设人生是一个大<a href="https://keesiemeijer.github.io/maze-generator/#generate">迷宫</a>， Passion 在迷宫的右下角，人理想的状态当然是做自己有激情的事情，能产生社会价值当然就更好了。</p><p>对于一个普通人而言，很多时候只有一个选择，比如对绝大部分中国高中生来说，高考是必须过的门槛。这种情况下使用 Follow Your Passion 的策略，优先往右下方向走 (比如 A* 算法) 是不现实的，这可能会让人走更多弯路或者更痛苦。</p><p><img src="/images/ob_2022-06-13-105008.png" alt=""></p><p> 但当一个人有足够多的选择资本，下面这个迷宫随机拆掉了 200 个墙，就比如谷爱凌吧，她的每一步都几乎有多个选择，这时候只要沿用 Follow Your Passion 的策略，这无疑就是最优解或者近优解。</p><p> 所以成功者给出的这种建议，对他们来说是显而易见的“正确”建议。</p><p><img src="/images/ob_2022-06-13-105204.png" alt=""></p><p>在没有足够多的选择资本的情况下，我们需要做的是尽量探索、积累、提高，移掉那些墙，让自己有更多选择，试着把第一个迷宫变成第二个。</p><p>以上讨论都有些理性，结论听起来也有点鸡汤。在现实残酷的情况下，是否应该还坚持追随内心和梦想，是否应该抛弃世俗的一切？比如 <a href="https://movie.douban.com/subject/3036997/">《立春》</a> 里的王彩玲，比如《月亮与六便士》里斯特里克兰德，有的人说应该，人生就当如此纯粹；有的人说别拧巴，让自己和身边人活得舒心点。</p><p>这是一个见仁见智的问题，理想和现实、理智和热情，总会有那么些冲突和撕扯，纪伯伦说：憩于理性，行于热情，这是一种最好的状态。</p><p>我有个基友说，等赚够了钱后我们找个小岛好好写代码，我们盯着地上的便士，偶尔仰望月亮，这就是大多数人的选择方式吧。而那些有理想，不顾一切追随内心梦想的人总值得尊敬。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2005 年的今天，乔布斯在斯坦福大学发表了那个著名的&lt;a href=&quot;https://www.youtube.com/watch?v=UF8uR6Z6KLc&quot;&gt;演讲&lt;/a&gt;，这是 Youtube 上被观看过次数最多的演讲，浏览数超过 4000 万次。&lt;/p&gt;
&lt;p&gt;这个演
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="成长" scheme="http://catcoding.me/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>第 16 期，每天写笔记；写个操作系统来治疗自己；软件工程师如何投入到创作者经济中</title>
    <link href="http://catcoding.me/p/weekly-16/"/>
    <id>http://catcoding.me/p/weekly-16/</id>
    <published>2022-06-12T17:55:09.000Z</published>
    <updated>2022-06-26T12:39:29.279Z</updated>
    
    <content type="html"><![CDATA[<p>上周因为家里的事情太忙而断更了一次周刊，没想到收到一些读者的催更😁，看来周期性的更新不止是自己形成了一些写作习惯，有的读者也形成了阅读习惯。</p><p>随着家庭事务增多，独处的时间少了很多，所以没法保证周期性更新，我觉得这没必要强求，写些什么，什么时候写，有感而发挺好的。</p><h2 id="每天写笔记"><a href="#每天写笔记" class="headerlink" title="每天写笔记"></a>每天写笔记</h2><p>近些年笔记管理类软件很火，很多人都在构建自己的第二大脑。而 <a href="https://twitter.com/dvassallo/status/1534774398200098816">Daniel Vassallo</a> 分享了一下他的看法：</p><p><img src="/images/ob_2022-06-10-183418.png" alt=""><br>在这条推特下面确实有不少人回复说放弃了每天写笔记，原因在于：</p><ul><li>记笔记需要花费时间</li><li>记下的东西大多没用，不会再花时间去看</li><li>重要的东西大脑自然会记下来，不重要的忘记了就算了</li></ul><p>我之前间歇性记录笔记，现在经常记录笔记，这里分享一下自己的体会和经验。我之前也觉得记录笔记太花费时间，特别是我有一些强迫症，如果文档的格式不对或者整个笔记的目录没有整理好，自己感觉就不舒服，所以就会花时间去搞这些。</p><p>但这偏离了记录笔记的原本目标，我们记录笔记的目的是：</p><ul><li>整理思路和想法</li><li>记录 todo，备份常用信息，让自己更有效率</li><li>根据自己的想法和笔记来创作</li></ul><p>在我使用 Obsidian 之后，我逐渐地把记录笔记的时间花费降低了。首先我并不刻意组织文件目录，我只有几个固定的目录，比如 Daily 来存放每天的日志，Pub 来存放会发布出去的内容。这种简单的组织形式减轻了我的心理负担。</p><p><img src="/images/ob_2022-06-10-184646.png" alt=""></p><p>然后我所有笔记通过双链和标签来组织，搜索也是通过关键词和标签：<br><img src="/images/ob_2022-06-10-184805.png" alt=""></p><p>每天我都会像 Roam Research 那样随手把自己的一些想法和日常、看到的好东西、读书笔记、照片、链接等记录到 Daily 的文件夹里，如果是打算以后要做的事情就会再加上一个 todo 标志。</p><p>最近我研究了一下 Telegram 的 bot 接口，然后写了个简单的程序 <a href="https://github.com/chenyukang/obweb/blob/main/backend/bot.js">obweb/bot.js</a> 来在 Telegram 手机端提交 Daily Notes，不得不说客户端的这种方式比 web 形式方便很多。</p><p><img src="/images/ob_9c2bd540b47265c6d5916eb0c88500f.jpg" alt=""></p><p>顺便分享一下，最近我用 Telegram 比较多，这东西比微信好用多了，并且开放 100 倍，我实现这个笔记 bot 从看文档到完成几乎一小时搞定，而微信估计一个星期还没申请下来接口权限 🤣。关于 Telegram 这还有很多玩法，参考 <a href="https://reorx.com/blog/sharing-my-footprints-automation/">使用自动化工作流聚合信息摄入和输出</a>。</p><p>我让自己提交记录非常迅速，在手机端就是 append only 式地提交，有时候也使用语音输入，而要大量编辑的时候则使用大屏幕来进行。我尝试过热门的卡片笔记法，但最终还是没有沿用下来，对我而言还是有些复杂，我要找适合自己的方式来记录笔记。</p><p>这一年几乎每天都记录日志，我的感受是好像自己运行的是调试模式，我打开每天的 Daily 就能很快回想起我那天干了什么，产生了什么想法，总体而言我觉得很不错。</p><p><img src="/images/ob_2022-06-10-045806.png" alt=""></p><h2 id="写个操作系统来治疗自己"><a href="#写个操作系统来治疗自己" class="headerlink" title="写个操作系统来治疗自己"></a>写个操作系统来治疗自己</h2><p><a href="https://awesomekling.github.io/I-quit-my-job-to-focus-on-SerenityOS-full-time/">I quit my job to focus on SerenityOS full time</a></p><p>Andreas Kling 是一个瑞典程序员，从 2018 年 10 月，他刚刚在瑞典的一家戒毒所完成了为期 3 个月的康复计划。</p><p>那段时间他无事可做，处于人生最低谷。所幸他想到了自己曾经很喜欢编程，也喜欢倒腾底层开发，所以他开始用编程来治疗自己。</p><p>从一个简单的 ELF Parser，Ext2 文件系统，一些 GUI 开发，通过不断的日夜编程，他逐渐地开发出一个几乎日常可用的操作系统 <a href="https://www.serenityos.org/"><strong>SerenityOS</strong></a>，并且也找到了一份开发的工作。随着捐赠越来越多，他辞职全职做自己的操作系统了。</p><p>可以说 Andreas 通过编程治愈了自己，让自己能够进入心流状态，远离了毒品。这个故事引起了很多人的共鸣。</p><blockquote><p>As you probably understand, I’m not trying to get rich by doing this. I’m just a human being trying to stay sane and healthy, and it just so happens that my therapy/self-care project resonates with thousands of people, many of whom want to support it and see where it goes.</p></blockquote><p>目前一群对计算机感兴趣的学习者围绕 SerenityOS 建立起一个热闹的社区，最近他们还开始着手解决 C++ 开发中的内存问题，开始创建一门新的编程语言 <a href="https://awesomekling.github.io/Memory-safety-for-SerenityOS/">Memory safety for SerenityOS</a>。</p><p>在如今资料浩瀚的时代，写个玩具操作系统不难，但是把一个操作系统做到基本可用，还包括图形界面、浏览器、音乐播放器、画图工具等等，这想想都头大。</p><p><img src="/images/ob_2022-06-10-204824.png" alt=""></p><p>我在学校的时候读过于渊写的<a href="https://book.douban.com/subject/1422377/">自己动手写操作系统</a>，这本书写得很详细也很用心。但我看完后觉得写操作系统还是很难，后来毕业工作后我业余时间继续在互联网上找资料看，我发现于渊的书让我觉得难是因为其中一大半都在折腾汇编，而我在 <a href="https://wiki.osdev.org/Expanded_Main_Page">OSDev wiki</a> 上看到其实我们只需要 bootloader 部分写汇编，开发过程中应该尽快进入 C 编程，于是我边看资料边参考其他人的 hobby OS 折腾出来一个 <a href="https://github.com/chenyukang/Panda">Panda, A hobby OS</a>。</p><p>如果你对计算机感兴趣，自己写一个简单的 OS 非常有帮助，这可以帮你克服对 OS 的恐惧。OS 是贴近硬件一些的复杂程序，开发过程中需要多看看硬件的相关文档，比如 Intel manual 之类的。另外你可以体会到程序开发中的抽象，如何从最底层一层一层地把系统和工具搭建起来，很有玩积木似的成就感。</p><h2 id="软件工程师如何投入到创作者经济中"><a href="#软件工程师如何投入到创作者经济中" class="headerlink" title="软件工程师如何投入到创作者经济中"></a>软件工程师如何投入到创作者经济中</h2><p><a href="https://blog.pragmaticengineer.com/how-to-become-a-full-time-creator/">Becoming a Full-Time Creator as a Software Engineer: Controversial Advice - The Pragmatic Engineer</a></p><p>这篇文章很长也非常干货，我还在继续消化中。</p><p><strong>Gergely Orosz</strong> 之前在 Uber 作为软件工程师工作，2020 年从 Uber 离开后他决定花 6 个月写一本书 <a href="https://www.engguidebook.com/">Growing as a Developer</a>，然后再计划创建一个公司。</p><p>结果他发现投入到创作者经济浪潮是个更明智的选择，他的 Substack 专栏 <a href="https://newsletter.pragmaticengineer.com/">The Pragmatic Engineer</a>  已经是付费用户最多的科技类专栏。</p><p>这篇长文中写了很多，本质上是在谈论如何不依赖公司来赚钱：</p><blockquote><p>Instead of talking about succeeding as a creator, I’ll instead talk about how to succeed as a small business.</p></blockquote><p>其中的一些建议是：</p><ul><li>要更具有产品思维</li><li>尝试在网上卖出一些东西</li><li>理解其他人在做什么，如何做的</li><li>为自己不擅长的部分花些钱</li><li>尝试成为 tech influencer</li></ul><p>如果你打算不再成为公司雇员，那就没有了规则，这可能很可怕，但也充满了机会：</p><blockquote><p><strong>When you work for yourself, there are no rules, which is both scary, and a huge opportunity.</strong> After years of working for corporate, this means you need to let go of old habits and embrace new ones.</p></blockquote><p>在英文环境中，写个电子书在自己的网站和 newsletter 上销售是一种比较常见的模式，另外付费专栏也很多。</p><p>国内像 Substack 这种平台有小报童和竹白，但感觉读者对这种技术类的内容付费意愿会弱很多。如果是写书或者专栏，通常会到极客时间这种平台上，这样平台会帮忙推广，但是会有抽成。</p><p>我还在摸索内容创作，感兴趣的读者一起交流交流。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_obweb-2022-06-11-20-47-28.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周因为家里的事情太忙而断更了一次周刊，没想到收到一些读者的催更😁，看来周期性的更新不止是自己形成了一些写作习惯，有的读者也形成了阅读习惯。&lt;/p&gt;
&lt;p&gt;随着家庭事务增多，独处的时间少了很多，所以没法保证周期性更新，我觉得这没必要强求，写些什么，什么时候写，有感而发挺好
      
    
    </summary>
    
    
      <category term="技术" scheme="http://catcoding.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>白话比特币和去中心化</title>
    <link href="http://catcoding.me/p/bitcoin/"/>
    <id>http://catcoding.me/p/bitcoin/</id>
    <published>2022-06-09T19:10:07.000Z</published>
    <updated>2022-06-26T12:39:29.271Z</updated>
    
    <content type="html"><![CDATA[<p>最近我看了些区块链、以太坊和 Web3 相关的资料，倒不是因为想从事这方面的工作，但我想稍微了解些技术热点。</p><p>顺便写些文章锻炼一下费曼学习法，我想使用通俗易懂的语言来阐述自己的理解。如果我做到了让一个不懂计算机的人也大致明白了区块链是怎么回事，那我就成功了。</p><p>这是系列文的第一篇，为了使得该篇文章完整，我也会加上具体的针对技术人员的解释，以甄别自己的理解是否有误。</p><h2 id="村庄里的交易"><a href="#村庄里的交易" class="headerlink" title="村庄里的交易"></a>村庄里的交易</h2><p>比特币已经不是新鲜事了，对于有技术背景的人来说比特币并不难理解，但对于计算机不太懂的人来说其实不容易理解。那么我们假设没有计算机，现实中货币和交易是如何运行的？</p><p>货币的出现，<strong>本质上是为了交易，是价值的交换</strong>。两个人要交易，从远古时代的以物换物，这样显然不方便。后来出现以贝壳等作为交换物，渐渐地人们开始使用贵重金属，比如使用黄金作为标准交换物。于是，黄金这类东西变成了标准货币，但黄金显然不便于携带，所以纸币就出现了。</p><p>现在的货币交易我们必须通过一个中心节点进行，这个节点就是银行，我们只需要理解为任何一个交易，都在一个巨大的中心上记录了一笔。</p><p>需要解决的一个本质问题是，我的每一分钱不能被花费两次。</p><p><img src="/images/ob_2022-06-07-060827.png" alt=""></p><p>现在假设一个村庄，为了进行交易，村庄有一个交易记录员，所有的的村民要进行交易都得通过这个人来记账。那这样会有什么问题呢？</p><p>假设 A 和 B 两个农民要进行交易，C 是交易记录员，A 和 C 私人交情很好，因此即使 A 转账了一笔钱给 B， C 并没有把钱从 A 的账户里扣掉，这样 A 就可能凭空多出来一笔钱。</p><p>C 作为一个中心点是不可靠的，任何单独的人都不值得信任，<strong>中心节点意味腐败和权力的滥用</strong>。虽然监督可能起到一定作用，但谁来负责监督机构没有问题。那我们如何才能打破中心点呢？</p><p>村庄里有个叫做中本聪的聪明小伙，他提出这么一个想法：</p><p>既然一个交易员不可靠，我们就需要多个交易员，任何人都可以成为这个角色，数量可以无限增多，并且他们的地位是平等的。</p><p>基于这个前提，如果有足够多的交易员，那理论上我们就可以信任这个交易机制。因为任何人都可以成为交易员，交易记录不止存储在某个人手里，而且也可以在其他人那里复核。</p><p>那具体如何实现呢？</p><p>他发明了一种虚拟币，如果某个村民想拥有这种币，那就成为虚拟货币交易员。每个交易员手里都拿着一个本子，里面记录了村庄的所有虚拟币的交易，这些交易员之间相互同步交易记录，比如 A 交易员现在手里已经记录了到目前为止的 99 页，而 B 交易员已经记录了 101 页，所以 A 会从 B 这里拷贝两页新的交易记录，那么最新的交易记录就在页码最长的那个页里。</p><p><img src="/images/ob_2022-06-07-055545.png" alt=""></p><p>可见这里面有很多重复的沟通，但是为了安全效率的问题先不考虑了。那如何防止交易记录被恶意纂改呢？ 中本聪发明了一种彩票机，如果交易员把一页输入彩票机，彩票机就会根据页的内容计算出一个认证码。</p><p>交易本上的每一页上都附带这个认证码，并且每一页也附带着上一页的认证码，这样如果某个恶意交易员修改了记录，那也也得重新获取对应的认证码，但这样就无法和下一页连接起来，所以他得把接着的页也修改掉，并且让村里的大多数人认可这个改动。</p><p>好了，那接着的问题是谁来负责开始新的一页，如果每次都是固定的人，那必然还会出现中心节点的问题。因此中本聪规定，每周日是交易日，然后在一周的时间内，交易员们尽量在自己的新页内收集村里这期间发生的交易记录。</p><p>如果有多个交易员记录满了一页，如何决策哪个交易员的页为系统承认的新页？</p><p>中本聪还是利用彩票机，每次交易员把自己的页输入彩票机，然后按下摇色子的按钮，按下之后就会出现一个数字，如果连续 5 次都出现数字 1 的情况下才会生成对应的认证码。这样他就能把这个新页加入交易本，并且告知其他交易员。</p><p>可以预见，交易员们觉得摇色子的游戏无脑又无聊，于是中本聪就说，每次那个成功加入了新页的交易员能获得一笔虚拟币。</p><p>刚开始只有几个人在玩这种虚拟货币游戏，但随着时间的推移，认可这种货币的村民越来越多，有的人即使不成为交易员，但他们用钱买虚拟货币，这样也拥有了一些虚拟货币。</p><p>每天都有很多人在村头收集大家的交易，然后去彩票机摇色子。因为竞争过于激烈，中本聪第二个月就增加难度，要求连续 10 次摇出数字 1 才能新增页，并且以后每个月都递增，并且获得的虚拟币数量减半。</p><p>中本聪因此富了，村里其他人也按照类似的方式发了其他虚拟货币，有的人也富了，但有的人从楼顶上跳了下来。</p><h2 id="一些技术细节"><a href="#一些技术细节" class="headerlink" title="一些技术细节"></a>一些技术细节</h2><p>这就是我能想到的一个荒诞的比喻来描述比特币，因为从技术角度来说，比特币确实有那么点荒诞。每天有无数的高性能计算机在做着这样的猜谜语一样的计算，只是为了决定谁来记录新的交易。</p><p><strong>安全，效率，去中心化这三个不能同时达到</strong>，很明显比特币为了去中心化和安全而牺牲了效率。比特币每 10 分钟左右会加入一个新的 block，而每个区块大小被中本聪限定最大为 1 兆，一个区块最多可以容纳 4096 (1024000/250) 笔交易，可以说效率极低。</p><p>我们看比特币里的一个 block 包含以下主要内容，Header 可用于验证该 block 是否合法，另外就是该 block 包含的交易记录：</p><p><img src="/images/ob_2022-06-08-194852.png" alt=""></p><p>挖矿的本质就是猜数字，猜出一个数字 (在 header 中称为 nonce) 和该 block 的交易内容进行 sha256 计算之后的结果 hash 的前 N 位为 0，block 也是以这个 hash 值串联起来。</p><p><img src="/images/ob_2022-06-01-125707.png" alt=""></p><p>当然这个猜数字的意义不限于决定谁来记录新的 block，<strong>更是为了证明工作量 (Proof of Work)</strong>。计算出一个合规的 block 需要耗费如此多的计算资源，可以说每一个 block 都是数字黄金。</p><p>另外这个工作量证明还有个特点，那就是验证很容易，因为只要知道了 nonce 和 block 的内容，进行一次 hash 计算就知道是否是合法的，这样其他节点就能很快地验证。</p><p>如果一个恶意攻击者想篡改 block 的内容，他也得按照这样的规则来生成合规的 block，所以也需要大量的计算量，并且得让大部分节点认同，这就使得恶意篡改的概率几乎没有了。</p><p>而随着时间的推移，这个 N 将变大，因此每此猜中的概率就会越低，挖矿的难度就越高。比特币初始化的时候一个设定的 2100 万个左右的总量，目前据说已经挖出了 90%，预计将于 2140 年将挖完。如果挖完之后，挖矿获得的奖励只能是手续费了，但那时候手续费是否还能让人们有欲望去挖矿，那就无人知晓了。</p><p>从目前上看，比特币的挖矿每年要耗费巨量的能源：</p><p><img src="/images/ob_2022-06-07-062423.png" alt=""></p><p>随着我国前段时间出来的禁止挖矿的政策，可以看到 <a href="https://ccaf.io/cbeci/mining_map">network hashrate</a> 的大头已经转移到美国了：</p><p><img src="/images/ob_2022-06-08-184320.png" alt=""></p><p>关于比特币具体的细节，你可以看看中本聪的原始论文 <a href="https://nakamotoinstitute.org/bitcoin/">Bitcoin, A Peer-to-Peer Electronic Cash System</a></p><h2 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h2><p>比特币就是中本聪的一个乌托邦式情怀的实践，居然能成功破圈。但比特币成为世界货币的可能性极低，交易的效率低是一个原因，另一方面政府作为现实世界的中心，都不想让虚拟货币替代法币。比如美国希望继续捍卫美元的信用，这样才能继续收割，而中国则认为这种虚拟货币不可监管。</p><p>即使如此，近些年越来越多的人开始关注到区块链，去中心化成为人们对未来的期望。</p><p>如果你抛去对具体概念的偏执，现实中最大的区块链实践应该是 Git，Git 的所有提交都是可以追溯的，也是分布式的，我们通过 Git 客户端来提交新的记录 (也可以修改历史节点)，但实践中 Git 通常是有中心节点的，比如 Linux 内核需要内核小组来维护世界上唯一的这个大家公认的分支。</p><p>我认为更重要的是共识基础上的平等和自由，区块链、去中心化、智能合约都是手段。</p><p>中心化和去中心化都是大自然的两类基本组织方式。自然界中，中心化的组织方式包括猴群、狼群、蜜蜂等，这些组织中有等级和分工。人类社会通常采用中心化的组织方式，一个国家、一个公司、一个互联网上的社交平台，都是有中心的。</p><p>而大自然中有的组织形式，比如鸟群、鱼群是没有无中心的，为什么海洋中的鱼群从个体上看都是随机、平等的，而从整体上看却是和谐的，如果来了捕食者，它们也能巧妙地避开。</p><p><img src="/images/ob_2022-06-07-133801.png" alt=""><br>这些鱼当中没有特定的领导，但是每个鱼都遵从相同的规则：不要远离同伴，但也不要离得太近，一直游，这就是它们的共识和自治。</p><p>你可以看看这两个视频里有趣的解释 ：</p><ul><li><a href="https://www.youtube.com/watch?v=dkP8NUwB2io">How do schools of fish swim in harmony?</a></li><li><a href="https://www.youtube.com/watch?v=Y-5ffl5_7AI">Lens of Time: Secrets of Schooling</a></li></ul><p>虽然现在区块链、Web3 这些领域有很多问题还未解决，也有很多人冲进去是为了搞钱，有的人把一些现在的业务稍微包装一下看起来像是 Web3 的，但我对未来协作、社交的改变保持乐观，因为我们能看到中心化的弊端。</p><p>我们已经有了很多围墙包围的精美花园，现在需要的是任何人都能自由玩耍的大森林，未来的互联网应该是更公平和自由。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近我看了些区块链、以太坊和 Web3 相关的资料，倒不是因为想从事这方面的工作，但我想稍微了解些技术热点。&lt;/p&gt;
&lt;p&gt;顺便写些文章锻炼一下费曼学习法，我想使用通俗易懂的语言来阐述自己的理解。如果我做到了让一个不懂计算机的人也大致明白了区块链是怎么回事，那我就成功了。&lt;
      
    
    </summary>
    
    
      <category term="比特币" scheme="http://catcoding.me/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
      <category term="区块链" scheme="http://catcoding.me/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="web3" scheme="http://catcoding.me/tags/web3/"/>
    
  </entry>
  
  <entry>
    <title>读余华，用悲伤来治愈</title>
    <link href="http://catcoding.me/p/yuhua/"/>
    <id>http://catcoding.me/p/yuhua/</id>
    <published>2022-06-02T13:02:07.000Z</published>
    <updated>2022-06-26T12:39:29.283Z</updated>
    
    <content type="html"><![CDATA[<p>刚来苏州那段时间，我一个人待了两个来月。百无聊赖时翻到了余华的《活着》，这部经典的电影我是看过四五遍不止，再随手翻看一下小说未尝不可。</p><p>结果一看进去就无法自拔，看完富贵的一生我深受震撼，即使我知道主要剧情，文字仍然给人以最深的触动，这就是文字的力量吧。电影剪去了小说里面的一些更为苦难的情节，张艺谋还加了一个略带希望的结局。</p><p>看完小说后，我一个人在苏州待不下去了，买了张票回老家接老婆孩子，老婆那段时间还夸我对小孩特别有耐心。</p><p>后来我忘了继续看余华的其他作品，直到前几周偶然看到喜欢的歌手李健的一段话，他说最喜欢的余华作品是《在细雨里呼喊》。我就开始看这本书，结果连续一周我根本停不下来，接连看了余华的几本长篇小说《在细雨中呼喊》、《许三观卖血记》、《兄弟》，这些书看着看着就想笑，笑着笑着就想哭。</p><p>悲剧的文艺作品更让人体验深刻，<em>悲剧是把美好的东西毁灭给人看</em>，《兄弟》中的父亲宋凡平最能给人这种毁灭感。</p><p>悲剧让人体会痛苦，商业创造了太多的快乐，而世界的本来面目包含了各种痛苦，痛苦是人生的必修课。可以说悲剧带着一些警示性的力量，给人一种抽离感，而这些是我看过的最难忘的悲剧故事。</p><p>乔治·奥威尔说过：好的文章如同窗户玻璃。余华的小说给我的感觉就是毫无杂质的玻璃，文字看似简单，短句很多，冷静朴素，却能扣人心弦。为了不至于绝望得无法读下去，只能再加些许幽默和荒诞。</p><p>这种文字看似容易，却非常难以写出，在余华的一篇回忆性的散文中写到了些写作的细节。比如《活着》里描写富贵埋葬了自己的儿子后，使用了一个“盐”的比喻：“<strong>月光照在路上，像是撒满了盐。</strong>”</p><p>余华当时是这样考虑的：</p><blockquote><p>福贵是一个农民，他对那条小路的感受应该是一个农民的感受，我写不下去，耽搁了几天，找到了“盐”的意象，盐对农民来说是很熟悉的，然后我写福贵看到那条通往城里的小路，月光照在路上，像是撒满了盐。想想那是怎样的一条月光下的小路，撒满了盐，这个意象表达的是悲痛在无尽地延伸，因为盐和伤口的关系是所有人能够理解到的。</p><p>所以当一个作家用朴素的语言写作时，其实比用花哨复杂的语言更困难，因为前者没有地方可以掩饰，后者随处可以掩饰。</p></blockquote><p>看完这几本小说后，我比较好奇为什么余华能写出如此血腥、悲伤的故事，还有这么多的死亡。然后我接着看了他的随笔《没有一种生活是可惜的》，里面写了些个人成长的回忆。</p><p>余华的他的父亲是外科医生，母亲是内科医生，他的第一份工作是牙医。他从小随父母搬进了医院宿舍，离医院的太平间不远，晚上经常听到哭泣，所以从小看惯了生离死别。</p><p>从六岁到青春期，从小学到高中，余华经历了那十年的特殊时期，他对文字的敏感度和兴趣居然源于大字报：</p><blockquote><p>在大字报的时代，人的想象力被最大限度地发掘了出来，文学的一切手段都得到了发挥，什么虚构、夸张、比喻、讽刺……应有尽有。这是我最早接触到的文学，在大街上，在越贴越厚的大字报前，我开始喜欢文学了。</p></blockquote><p>这样看来，艺术确实源于生活，小说就是时代的缩印。写作对余华来说像是一种治愈，他的主要作品，这几篇长篇算是他相对“正常”的小说，前期有些短篇更“黑暗”。他在一篇散文中写到：</p><blockquote><p>所以说与其说我是在讲故事，不如说我是在寻求治疗，因为我是一个病人。</p></blockquote><p>我看到过一些余华的采访视频，从谈吐上看他是个非常乐观幽默的大叔，而且还有点皮，段子讲得很好，像个脱口秀大师，所以我想写作的治愈效果很好？同样写出苦难的莫言也是类似，看起来乐呵呵的。</p><p>以我的个人体验来说，如果你觉得生活索然无味，看些悲情的东西能激发怜悯和宣泄情绪，而看欢乐的东西笑过之后就一切如常了。</p><p>余华在寻求治疗的过程中写下的这些小说，对读者而言就是一剂药。也许还有些副作用，我看完后有一两天躺在床上情绪低落，还有一种颓废感，脑海中一直在环绕着故事里的各种情节，但等缓过劲来后，我就觉得自己的平凡生活已是非常幸福了，活着就是为了活着。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚来苏州那段时间，我一个人待了两个来月。百无聊赖时翻到了余华的《活着》，这部经典的电影我是看过四五遍不止，再随手翻看一下小说未尝不可。&lt;/p&gt;
&lt;p&gt;结果一看进去就无法自拔，看完富贵的一生我深受震撼，即使我知道主要剧情，文字仍然给人以最深的触动，这就是文字的力量吧。电影剪去
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="阅读" scheme="http://catcoding.me/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>第 15 期，编程和绘画；AI 从文本绘画；技术文章中的插图</title>
    <link href="http://catcoding.me/p/weekly-15/"/>
    <id>http://catcoding.me/p/weekly-15/</id>
    <published>2022-05-29T18:02:06.000Z</published>
    <updated>2022-06-26T12:39:29.279Z</updated>
    
    <content type="html"><![CDATA[<p>苏州疫情最近终于稳定，幼儿园和堂食都开放了。每天早上送完小孩后，我都跑去店里吃上一顿生煎，感觉太惬意了，我们已经有四个月没过上正常的生活了。</p><p>最近看到了一些绘画相关的内容，这周我就分享些编程、绘画、作图相关的内容。</p><p>我曾经短暂尝试过自学漫画，后来没坚持下来，我打算以后再试试。自己画不来，但我喜欢看这些好看的图。</p><h2 id="编程和绘画"><a href="#编程和绘画" class="headerlink" title="编程和绘画"></a>编程和绘画</h2><p><a href="https://dev.to/aspittel/what-s-one-thing-you-wish-you-knew-before-you-started-programming-2pem">What’s one thing you wish you knew before you started programming?</a></p><p>DEV 是一个技术社区，我有段时间会经常逛逛。我们可以把自己的博客 RSS 设置到后台，这样博客的文章能自动同步到这里。</p><p>作为一个社区如果内容太少，则不热闹；如果内容太多讨论太少，则可能会形成内容农场。所以，技术社区的运营其实不容易，需要一些权衡。</p><p>我觉得 DEV 做得不错，讨论氛围还比较浓厚，另外其代码是完全开源的 <a href="https://github.com/forem/forem">forem</a>。最近 DEV 官方使用 forem 来建了几个更为垂直的技术社区，比如 <a href="https://forem.dev/foremteam/if-youre-interested-in-webassembly-and-dont-get-enough-depth-here-on-dev-read-this-44jb">WebAssembly</a>,  <a href="https://www.metapunk.to/">Web3</a>。</p><p>回到编程和绘画的这个主题，这是我在 DEV 的一个讨论里看到的<a href="https://dev.to/aspittel/what-s-one-thing-you-wish-you-knew-before-you-started-programming-2pem">What’s one thing you wish you knew before you started programming</a>，这个帖子里很多人分享了学习编程的经验。其中 Dwayne Crooks 的回答我觉得很好：</p><blockquote><p>Deep domain knowledge + a little bit of programming skill is more valuable than little to no domain knowledge + plenty programming skill.</p><p>Of course if you have both then that’s the most valuable.</p></blockquote><p>作者以数据科学为例，真正成为数据科学家所需要的领域知识是统计学，然后稍微学些 Python, R 或 Julia，这样就如虎添翼。</p><p>接着他举了个绘画的例子，比如这个<a href="https://www.youtube.com/watch?v=3eKBiEeag1A&amp;t=15s">视频</a>介绍如何使用 MS Paint 来画出下面这样的作品：</p><p><img src="/images/ob_2022-05-28-230640.png" alt=""></p><p>MS Paint 是一个简单的应用程序，就连小孩都能学会如何使用，但小孩和我都无法像这个作者那样，创造出好的绘画作品，我们需要学基本的绘画技巧。</p><p>编程也是如此，使用什么编程技术犹如使用什么绘画工具，小孩也能使用 scratch 这样的工具来编程，而好的作品需要些其他的领域知识。所以，找出你的兴趣领域，不断深耕，利用编程来实现目标。</p><p>我之前大概也提到过自己的体会，计算机技术知识容易学到，但是领域知识更不易得到。如果可以重来，我希望自己能在职业生涯早期找到想长期专注的领域。</p><p>绘画和编程有很多相似的地方，Paul Graham 写过一篇非常好的文章来阐述这点 <a href="http://www.paulgraham.com/hp.html">Hackers and Painters</a>，中文版的书《黑客与画家》非常值得一读。</p><h2 id="AI-从文本生成绘画"><a href="#AI-从文本生成绘画" class="headerlink" title="AI 从文本生成绘画"></a>AI 从文本生成绘画</h2><p><a href="https://36kr.com/p/1719274187848967">打三个表情就能画出世界名画？大家都在玩的 Disco Diffusion 是什么</a></p><p>最近我看到一些人在玩这种 AI 理解文字，然后自动生成绘图的工具，比如和菜头最近一直使用这个工具来生成公众号的配图，<a href="https://mp.weixin.qq.com/s/abcMo8pxi9Gnu40m8DIFhg">他写了篇试用体验的文章</a>，从结果上看确实非常惊艳。</p><p>如果你也想把玩一下，可以试试在<a href="https://colab.research.google.com/github/alembics/disco-diffusion/blob/main/Disco_Diffusion.ipynb">线上运行</a>，也可以<a href="https://zhuanlan.zhihu.com/p/499979636">本地安装后运行</a> 。这是我使用在线版本，稍微改了一下 sample 做出的画 (在线版本比较慢，一幅图需要 1 个小时左右):</p><pre class="line-numbers language-none"><code class="language-none">一幅美丽的画，一个奇异的灯塔，在动荡的血海中闪耀着它的光芒，Greg Rutkowski，Thomas Kinkade 风格红色基调<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/ob_timetodisco0_6.png" alt=""></p><p>如果描述太短，细节就会缺乏，比如我这个简短的描述画出来的就差多了：</p><pre class="line-numbers language-none"><code class="language-none">开阔的海面，一只猫看云朵，蓝色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/ob_2022-05-29-141824.png" alt=""></p><p>总的来说我觉得比较好玩，这里可以看到一些爱好者分享的文本描述和对应的作品 <a href="https://397987634.notion.site/397987634/AI-764e6a50fbf04327945a12a07ce9654f">AI 绘画的关键词</a>。我对绘画不太懂，但其中的一些作品我认为还是挺好看的，有些意境。</p><p>还记得短短几年前，当时刷屏的 AI 工具还是你输入一张照片，AI 给出一些智能美化和风格处理，我们总是觉得 AI 是无法有创造力和想象力的，而这些 text-to-image 工具能够让作者使用文字作为启发，产生类似创造力的效果。</p><p>Google Brain 发布了一些相关的 imagen 的论文 <a href="https://imagen.research.google/">Text-to-Image Diffusion Models</a>，如果你感兴趣可以看看这个开源版本的实现 <a href="https://github.com/lucidrains/imagen-pytorch">imagen-pytorch</a>。</p><p>我之前低估过 <a href="https://copilot.github.com/">GitHub Copilot</a> 这个工具，结果被打脸，现在 Copilot 已经成为我日常编程中比较依赖的工具。因此，我现在对这些工具怀有谨慎的乐观， AI 将成为辅助人们创造必不可少的工具。</p><p>你对这类工具如何看待？</p><h2 id="技术文章中的插图"><a href="#技术文章中的插图" class="headerlink" title="技术文章中的插图"></a>技术文章中的插图</h2><p>插图是文章的重要部分，很多时候一图胜千言。要做出令人印象深刻的插图非常不容易，这不只是工具的问题，还需要技巧、审美和耐心。</p><p>我印象中比较深刻的文章插图是 <a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif">JavaScript Visualized: Event Loop</a>，这些漂亮的 GIF 是通过 Keynote 制作然后导出为 GIF 格式。</p><p><img src="/images/ob_gif14.1.gif" alt=""></p><p><a href="https://craftinginterpreters.com/a-map-of-the-territory.html">Crafting Interpreters</a> 的配图非常精良，作者是通过在纸上手绘然后再扫描成为电子版。</p><p><img src="/images/ob_2022-05-29-113757.png" alt=""></p><p>Julia Evans 非常热衷于使用漫画来阐述技术，她偏向于手绘风格，曾经写了一些相关的文章：</p><ul><li><a href="https://jvns.ca/teach-tech-with-cartoons/">How to teach technical concepts with cartoons</a></li><li><a href="https://jvns.ca/blog/2019/09/01/ways-to-write-zines-without-fancy-tools/">How to write zines with simple tools</a></li></ul><p>draveness 的配图是其高质量技术文章的重要部分，他主要使用 Sketch 来绘制图片，博客上写过一篇很好的 <a href="https://draveness.me/sketch-and-sketch/">技术文章配图指南</a> ：</p><blockquote><p>画图的工具并不重要，重要的其实是你应该<strong>如何形成自己的规则体系</strong>，想要为博客配图并不是一件困难的事情，比较困难的是长期坚持并且经常思考，对自己形成的规则不断改善，最终就一定能够做好。</p></blockquote><p>要画出这些好看的插图，都是需要花了很多时间和精力的，我也在尝试提高自己的配图水平，作为一个绘画小白，目前我喜欢的工具是这些：</p><ul><li><a href="https://excalidraw.com/">Excalidraw - Hand-drawn look feel</a></li><li><a href="https://plantuml.com/">Plantuml - beautiful UML diagrams</a></li><li><a href="https://app.diagrams.net/">Drawio - diagrams.net</a></li></ul><p>你有哪些喜欢的画图工具，推荐给我啊 🥰。</p><h2 id="言论"><a href="#言论" class="headerlink" title="言论"></a>言论</h2><p><img src="/images/ob_2022-05-29-110723.png" alt=""></p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-05-28-141939.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;苏州疫情最近终于稳定，幼儿园和堂食都开放了。每天早上送完小孩后，我都跑去店里吃上一顿生煎，感觉太惬意了，我们已经有四个月没过上正常的生活了。&lt;/p&gt;
&lt;p&gt;最近看到了一些绘画相关的内容，这周我就分享些编程、绘画、作图相关的内容。&lt;/p&gt;
&lt;p&gt;我曾经短暂尝试过自学漫画，后来
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>推荐一些播客</title>
    <link href="http://catcoding.me/p/podcast/"/>
    <id>http://catcoding.me/p/podcast/</id>
    <published>2022-05-26T15:07:06.000Z</published>
    <updated>2022-06-26T12:39:29.275Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_2022-05-26-150812.png" alt=""></p><p>最近半年我花了些时间听播客。播客的好处在于声音能很好地传递情感，有的创作者的声音非常好听。另一个好处是带娃、做饭、散步的时候都可以听，就当是听人唠嗑。我觉得阅读久了眼睛和脖子都酸，听播客就没有这个问题。</p><p>这段时间听下来，我觉得有些内容都非常好，听了有收获。</p><p>我主要使用了两个 App，一个是 Google 播客用来听些英文内容，另一个是小宇宙。</p><p><sub>听播客我主要使用韶音骨传导耳机，这个耳机我之前主要用来跑步的，已经用了三年左右。骨传导耳机的最大好处是长久戴也不觉得难受。我记得 2016 年左右，有个前同事几乎每天都戴着这东西，我一度认为他戴的是个助听器，所以和他聊天会下意识提高一下嗓音。后来我才知道，这东西叫骨传导耳机。</sub></p><p><sub>顺便夸赞一下韶音这个品牌，前段时间我的耳机里面的一个零件有点松动，走起路来有异响，我就联系了他们的客服。售后让我寄回去看看，虽然已经过了质保期，他们还是免费给更换了零件。</sub></p><p>下面推荐一些我喜欢的播客内容。</p><h2 id="英文播客"><a href="#英文播客" class="headerlink" title="英文播客"></a>英文播客</h2><p>英文播客里首推 Lex Fridman，他的访谈对象通常都很大牌。Lex 的说话方式我很喜欢，显得很正派、又真诚，比如访谈 Zuckerberg 那期，在开头那段为乌克兰所说的话，可以听出来非常动情，而他是个俄罗斯裔。</p><p>另一个我推荐的是微软的  Scott Hanselman， <a href="https://www.hanselminutes.com/">Hanselminutes Technology Podcast</a>。他的角色类似技术布道师（Technical Advocates），这个角色有点像产品，但也写文章、做播客、宣传之类的。</p><h2 id="中文播客"><a href="#中文播客" class="headerlink" title="中文播客"></a>中文播客</h2><p>我听得比较多的是这些：</p><ul><li>孟岩 - 无人知晓，主要是些个人成长、商业、理财</li><li>Steve 说，偏综合类，心理学、访谈</li><li>三五环，访谈类</li><li>奇想驿 by 产品沉思录，少楠，产品和成长类</li><li>快乐三十分，happyxiao 的播客，工具、写作、效率、个人成长等</li><li>乱翻书，科技类</li><li>从零道一，IT 类，嘉宾通常是些技术行业领袖</li><li><a href="https://avocadotoast.live/">牛油果烤面包（Avocado Toast）</a>， IT 类访谈</li><li><a href="https://bytetalk.fm/">ByteTalk</a>，技术、开源等</li></ul><h2 id="一些印象深刻的"><a href="#一些印象深刻的" class="headerlink" title="一些印象深刻的"></a>一些印象深刻的</h2><p><strong>Steve 说 274 期 - 陈楸帆 - 理性工作交给 AI，人类走向意识深处</strong></p><ul><li>关于 AI，科幻等</li><li>在收听这期的时候我想到，科幻也许对缓解压力和焦虑特别有用，因为科幻让人超越时空维度，用想象力，从更高的维度来理解世界，当我们意识到人类是如此渺小时，生活中的很多平时觉得非常重要的事情就显得不那么重要了</li><li>这期推荐了一些科幻方面的好书，我打算今后找来看看</li><li>我最近看了刘慈欣的《赡养人类》，里面的故事看起来荒诞，但逻辑上似乎说得通</li></ul><p><strong>E09 孟岩对话黄海：让更多人知道你，还是让爱你的人更爱你</strong></p><ul><li>关于如何做品牌，人们去星巴克不是为了咖啡，而是为了那个环境以及朋友之间的交流</li><li>在做品牌早起的时候，一种策略是让爱你的人更爱你，而不是让更多人知道你，因为解决了第一个问题，第二个问题也就好办了</li><li>关于星巴克创始人霍华德·舒尔茨的书《将心注入》也许值得一读</li></ul><p><strong>E10 无人知晓：让万物穿过自己</strong></p><ul><li>这期非常推荐，孟岩即兴发挥，但是听起来效果特别棒</li><li>这期他谈了很多，有内容创作、生活、投资等方面的个人体验</li></ul><p><strong>E12 孟岩对话池建强：人生最有价值的时刻，也许是那些对未来充满期待与不安之时</strong></p><ul><li>之前我也看过一些池建强的文章，通过这期更深入了解他了</li><li>我很赞成他的一些生活方式，比如乐观，保持迟钝感</li></ul><p><strong>奇想驿 by 产品沉思录：关于死亡：生命并不是永不干枯的井，而死亡会随时到达</strong></p><ul><li>一些关于死亡的思考，引起我的共鸣，选的音乐也好听</li><li>Steve 说也讲过一期关于死亡的播客，主要是《最后的告白》的读后感，值得一听。</li></ul><hr><p>播客是个很好的内容创作方式，像少楠、孟岩、池建强这些人都在创业，而花时间来录制这些内容。我想现在这个年代，好的内容是获取信任的重要渠道，人们更愿意相信鲜活的个体，声音介于文字和视频之间，刚刚好。</p><p>如果你有好的播客内容，欢迎推荐给我。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_2022-05-26-150812.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近半年我花了些时间听播客。播客的好处在于声音能很好地传递情感，有的创作者的声音非常好听。另一个好处是带娃、做饭、散步的时候都可以听，就当是听人唠嗑。我觉得
      
    
    </summary>
    
    
      <category term="播客" scheme="http://catcoding.me/tags/%E6%92%AD%E5%AE%A2/"/>
    
      <category term="资料" scheme="http://catcoding.me/tags/%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>第 14 期，找出人生中真正重要的事；PowerShell 的故事；好玩的个人主页</title>
    <link href="http://catcoding.me/p/weekly-14/"/>
    <id>http://catcoding.me/p/weekly-14/</id>
    <published>2022-05-22T20:47:07.000Z</published>
    <updated>2022-06-26T12:39:29.279Z</updated>
    
    <content type="html"><![CDATA[<p>最近在一封邮件看到这段话：</p><blockquote><p>After a certain point, your goal is no longer to build a writing habit.</p><p>Your goal becomes falling so in love with interesting ideas that you <em>can’t not write about them</em>.</p><p>Curiosity breeds compulsion, and that’s far more important than forced consistency when trying to make work that’s fresh and inspired.</p></blockquote><p>从读者角度来说，频繁更新的博客不一定值得频繁阅读，我们需要的是启发人的观点，而不是为了更新去写的内容，因为没有人能定时产生有价值的想法。</p><p>这段话来自 Julian Shapiro，就是我今天分享的第一篇文章的作者。</p><h2 id="找出人生中真正重要的事"><a href="#找出人生中真正重要的事" class="headerlink" title="找出人生中真正重要的事"></a>找出人生中真正重要的事</h2><p><a href="https://www.julian.com/blog/life-planning">How to figure out what to do with your life</a></p><p>Julian Shapiro 是一个软件开发者，创建过一个比较流行的 JavaScript 库<a href="https://github.com/julianshapiro/velocity">julianshapiro/velocity</a>，也做过创业公司。</p><p>我订阅了他的 newsletter，他分享写作和个人成长方面的内容，文章都非常棒，你可以看看他的个人网站 <a href="https://www.julian.com/">Julian Shapiro</a>。</p><p>这篇文章中，他分享了如何确定不同人生阶段重大事项的优先级。我们需要定期去思考这些，因为随着年龄的增长，人的关注点和追求会改变。最近发现有的朋友也开始了第二人生，我想他们应该经过了类似的评估。</p><p>作者的方法包含以下几个维度：</p><p><img src="/images/ob_2022-05-20-122353.png" alt=""></p><p>他基于这个方法评估出，自己不想再把做公司和挣钱放在第一位了，而写作优先级更高。但心里还有些犹豫，直到他看到 <a href="https://www.youtube.com/watch?v=jwG_qR6XmDQ">Jeff Bezos 的一个访谈</a>后有所顿悟。</p><p>Jeff Bezos 当时决定做亚马逊线上卖书的时候，使用了一个自称为 Regret Minimization Framework 的方法，简而言之就是：<strong>假设当你 80 岁回首往事时，你会不会为不做这个事而遗憾？当你将未来的遗憾最小化时，你会睡得很香，因为你知道你在最大化地实现自己。</strong></p><p>这个词语有点技术化，不过和《钢铁是怎样炼成的》里的这句话是相同的：</p><blockquote><p>人最宝贵的东西是生命。生命对人来说只有一次，因此，人的一生应当这样度过：当一个人回首往事时，不应虚度年华而悔恨，也不应碌碌无为而羞愧。</p></blockquote><p>文章后面接着谈到钱的重要性和正确认知，这和我之前介绍过的<a href="https://catcoding.me/p/weekly-10/">最高形式的财富</a>是一致的，钱能让人更自由，拒绝那些自己不想做的事。</p><p>人应该花更少的精力试图变得超级富有，而花更多的精力建立亲密关系、挚友圈，这些可以陪伴我们直到老去。</p><p>最后谈到 groupthink，每个人都属于自己所处的圈子，而这个圈子的人会对自己的认知造成很大的影响。为了打破趋同思维，我们需要不断问自己类似这样的问题：如果人生重来一次我想怎样？如果不缺钱我想做什么？</p><blockquote><p>I’ve noticed that many people compete in games they don’t understand because they are modeling the behavior of people around them. Most common is the competition for wealth as a proxy for happiness.   </p><p>—Michael Seibel</p></blockquote><p>从个人的经历来说，我似乎进入了低物欲的阶段，对电子产品都没兴趣了。最近花了很多时间看小说，把余华的主要作品看了一遍，我觉得这个年代的普通人都好幸福。</p><p>物欲的衰退也许是年龄和激素在作怪，谁知道呢，我觉得这样挺好。</p><h2 id="PowerShell-的故事"><a href="#PowerShell-的故事" class="headerlink" title="PowerShell 的故事"></a>PowerShell 的故事</h2><p><a href="https://twitter.com/jsnover/status/1523010444570419200">Jeffrey Snover on Twitter</a></p><p><img src="/images/ob_2022-05-20-143948.png" alt=""></p><p>Jeffrey Snover 是微软 Technical Fellow，这是不做管理的纯技术人员在微软的顶点，根据<a href="https://en.wikipedia.org/wiki/Category:Microsoft_technical_fellows">维基上的记录</a> ，目前一共只有 18 人。</p><p>Snover 在上面那个推特上回忆了自己最初做 PowerShell 原型而被降级的往事。这个故事也许你在其他新闻媒体上看到了，我们从技术角度来了解一下整个故事。</p><p>曾经，微软内部把开源和 Linux 视为敌人，对命令行这种风格的工具也是不屑一顾，甚至视为异己的：</p><blockquote><p>At the time, the “shell” project was viewed as a Linux-compete checkbox item of no importance whatsoever.</p></blockquote><p>但 Snover 觉得自动化很重要，而 GUI 不适合做这方面，所以他做了这个 PowerShell 的原型，结果就是违反了公司主流而被降级。</p><p>Snover 坚持住了，他没有一味的把 Linux 那套 Shell 搬过来，而是借鉴了一些思想，然后根据 Windows 的环境和风格做了创新。光有理念和原型不够，也得有策略，在那些被压迫的日子里，他找到了公司内部的大用户 exchange，当真金白银投入到这个技术上之后，降级也不怕，没几年他就被晋升了。</p><p>他在这个<a href="https://evrone.com/jeffrey-snover-interview">访谈</a>中回顾了更多当时的细节，Unix/Linux 的很多设计是基于文件和文本的，而 Windows 的设计是基于对象和 API 的，所以 PowerShell 管道中传递的是 Object 而不是文本，管道中也不像 Linux 那样都是跑的多个进程。</p><blockquote><p>Why invent PowerShell, why not just use ksh or bash? I’m a long time Unix dev so that was my first instinct. I tried and failed. There is a core architectural difference between Unix and Windows. Linux is a file-oriented OS and Windows is an API-oriented OS. In Linux, if you can modify a file and run a process, you can manage anything. That is why awk, sed, and grep are management tools. At the time, nothing on Windows worked that way. Everything was behind an API which returned a structured object.</p></blockquote><p>后来 PowerShell 开始在微软自动化方面张露头角，并且随着新的 CEO Satya 宣布拥抱 Linux 和开源，以及微软整体上云的大趋势，PowerShell 成为不可缺少的基础设施和工具。</p><p>刚来微软的时候，我也觉得 PowerShell 好像挺奇怪的，熟悉了之后就觉得这东西很好！我们可以用命令行操作一个个对象，这些对象和 .Net Object 是对应的，PowerShell 也可以和 .Net 来交互，比如用 C# 来实现命令，而且现在也是开源跨平台了。</p><p>正在开发的 nushell 借鉴了 PowerShell 的这一理念 <a href="https://github.com/nushell/nushell">nushell: A new type of shell</a></p><h2 id="好玩的个人主页"><a href="#好玩的个人主页" class="headerlink" title="好玩的个人主页"></a>好玩的个人主页</h2><p><a href="https://henryheffernan.com/">Henry Heffernan - Portfolio 2022</a></p><p>我非常羡慕那些既能编程又能做些设计的人，比如这位年轻的程序员，他的个人主页让人眼前一亮，强烈推荐你点进去看看：</p><p><img src="/images/ob_2022-05-21-083853.png" alt=""></p><p>主页所有代码也是开源的：<a href="https://github.com/henryjeff/portfolio-website">henryjeff/portfolio-website</a>，使用了 TypeScript 、three.js。类似的主页还有 <a href="https://bruno-simon.com/">🚗 bruno-simon.com</a><br><img src="/images/ob_2022-05-21-084855.png" alt=""></p><p>即使是个人网站这样的小项目，这些人也能投入这么大精力和热情，玩出这么多花样。比如另一个前端工程师 Josh Comeau 这篇文章里分享了自己如何设计和实现个人网站<a href="https://www.joshwcomeau.com/blog/how-i-built-my-blog/">How I Built my Blog using MDX, Next.js, and React</a>，其中那个动画人物的设计花了 500 美金。使用 MDX 可以构建出一些更具交互性的文章，这里面不仅有文字，还有对应的代码动画，比如 <a href="https://www.joshwcomeau.com/animation/a-friendly-introduction-to-spring-physics/">Spring Physics animation in JavaScript</a>。</p><p>这让我想起自己在知乎回答的 <a href="https://www.zhihu.com/question/502884696/answer/2296787480">为什么中国程序员不如外国程序员有创造性</a>，只有当我们有足够多的业余时间才能做出更多创造性的东西，这些创造性的东西可能不是为了名利，不是为了 KPI，只是为了好玩和分享，而那些伟大的项目 Linux、Ruby、Python 的源头都是 Just for fun。</p><p>再联想到 gitee 最近的代码审核，不禁心生悲哀。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>30 年软件开发学到了什么： <a href="https://blog.juliobiason.me/thoughts/things-i-learnt-the-hard-way/">Julio Biason</a></p></li><li><p>最近因为居家带娃上班，我需要带着笔记本去小区滑滑梯，所以使用触摸板时间多了，Thinkpad 的触摸板感觉比 Mac 差不少，但键盘体验很好。我就想着如何能提高效率，试着用了一下 Thinkpad 的小红帽，适应了一段时间感觉还不错，后来搜索发现了这个程序员的浏览器插件。如果你使用 VIM 和快捷键工具肯定会很喜欢这个 <a href="https://github.com/philc/vimium">philc/vimium: The hacker’s browser.</a></p></li></ul><h2 id="言论"><a href="#言论" class="headerlink" title="言论"></a>言论</h2><p><img src="/images/ob_2022-05-21-091310.png" alt=""></p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-05-18-223422.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在一封邮件看到这段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After a certain point, your goal is no longer to build a writing habit.&lt;/p&gt;
&lt;p&gt;Your goal becomes fallin
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>送一套 Java 好书 🙌</title>
    <link href="http://catcoding.me/p/book-on-java/"/>
    <id>http://catcoding.me/p/book-on-java/</id>
    <published>2022-05-18T08:07:06.000Z</published>
    <updated>2022-06-26T12:39:29.271Z</updated>
    
    <content type="html"><![CDATA[<p>我写公众号的一个初衷就是认识更多不同的人，写了几个月确实结识了些线上朋友。这不，图灵出版社的编辑送了我一套书，因为物流的问题导致他们多发了一套，所以我们打算在公众号里送出去一套。</p><p>On Java 基础卷和进阶卷，两本总共价值 <strong>259</strong> 元。</p><p><img src="/images/ob_2022-05-17-184505.png" alt=""></p><p>顺便说说我对 Java 的一些想法。从毕业到工作这么多年，我在工作中使用 Java 的机会不多，不过在搞安全的那段时间，我发现使用 Java 开发的项目比想象中多得多，特别是在电商、金融这些企业级开发领域。</p><p>这些年 Java 一直发展得也很不错，Java 开发岗位一直都是做多的。JVM 本身是个很好的虚拟机平台，经过多年的优化性能上没有问题，还衍生了  Scala、Kotilin、Clojure 等多门语言，所以花些时间学习一下 Java 还是很有必要的。</p><p>这本 On Java 是百万畅销书 Thinking in 系列作者 Bruce Eckel 的最新力作。我记得上学的时候看过他的 Thinking in C++。Bruce Eckel 这么多年来一直笔耕不缀，你可以看到他的博客持续更新了 17 年：</p><p><a href="https://www.artima.com/weblogs/">Artima Weblogs</a><br><a href="https://www.bruceeckel.com/">Computing Thoughts</a></p><p>一些老文章比如这篇 <a href="https://www.artima.com/weblogs/viewpost.jsp?thread=259358">A Career in Computing</a> 对职业发展的建议如今看来仍然非常有价值。</p><p>收到这本书后，我花了些看时间了一遍基础卷，本书的几个译者都是有多年一线开发经验的工程师，所以翻译质量没什么问题。我觉得要是短句更多些会更易读，不过翻译这事每个人的体验有差异，过于追求完美就太耗费时间。你可以在 <a href="https://www.ituring.com.cn/book/2935">On Java 中文版 - 基础卷</a> 阅读前几章感受一下。</p><p>这套书非常厚，两本加起来一共 1360 页，其中很多部分可作为 Java 学习的参考书，需要的时候再细看。这么厚不止因为 Java 的知识点多，对编程中的一些共有主题，比如泛型、测试、异常、并发、设计模式等都有涉及。</p><p>我觉得更好的是 Bruce Eckel 写了些语言设计者角度的思考，有的部分是以开放式的讨论语调在写，这里没有给你一个绝对的解决方案，而是在讨论不同方案的优劣。书中也不止在介绍 Java ，还写了些 C++、Go 等语言的设计选择，<strong>站在设计者的角度考虑就明白，没有完美的编程语言，只有不断地取舍</strong>。</p><p>另外，这本书的用料很不错，装帧精致：</p><p><img src="/images/ob_2022-05-17-212000.png" alt=""></p><p><img src="/images/ob_2022-05-17-212038.png" alt=""></p><p>我对公众号抽奖不太熟悉，所以就定个简单规则：<strong>文章发布后到明天晚上 8 点前，留言点赞数最多的朋友就获得这套书</strong>。</p><p>留言写些什么都行，气氛搞起来😉，我手里还有些自己看过的计算机书籍，说不定以后继续送。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我写公众号的一个初衷就是认识更多不同的人，写了几个月确实结识了些线上朋友。这不，图灵出版社的编辑送了我一套书，因为物流的问题导致他们多发了一套，所以我们打算在公众号里送出去一套。&lt;/p&gt;
&lt;p&gt;On Java 基础卷和进阶卷，两本总共价值 &lt;strong&gt;259&lt;/stro
      
    
    </summary>
    
    
      <category term="书籍" scheme="http://catcoding.me/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="Java" scheme="http://catcoding.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第 13 期，工程师的修炼与成长；Niche 程序员；Sun 的第 8 号员工</title>
    <link href="http://catcoding.me/p/weekly-13/"/>
    <id>http://catcoding.me/p/weekly-13/</id>
    <published>2022-05-16T08:40:06.000Z</published>
    <updated>2022-06-26T12:39:29.279Z</updated>
    
    <content type="html"><![CDATA[<p>这是上周写的周刊，昨天忙着带娃忘记发了。苏州第三次尝试恢复正常，幼儿园计划 23 号开学，希望这次能结束我居家带娃上班的生活。</p><h2 id="软件工程师的修炼与成长"><a href="#软件工程师的修炼与成长" class="headerlink" title="软件工程师的修炼与成长"></a>软件工程师的修炼与成长</h2><p><a href="https://vgod.medium.com/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E4%BF%AE%E7%85%89%E8%88%87%E6%88%90%E9%95%B7-10-%E5%9B%9B%E7%B6%AD%E7%9A%84%E6%8A%80%E8%A1%93%E8%83%BD%E5%8A%9B-1602882aec33">軟體工程師的修煉與成長</a></p><p>这是一位软件工程师 vgod 写的好文，他在台湾成长，后来去了 MIT 读书，毕业后在硅谷工作。我很早之前看过一些他博客的文章，最近通过 <a href="http://weekly.codelc.com/">野生架构师</a> 的 Newsletter 发现他在 Medium 上写作了。</p><p>在 <a href="https://vgod.medium.com/%E8%BF%BD%E6%B1%82%E7%A5%9E%E4%B9%8E%E5%85%B6%E6%8A%80%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E4%B9%8B%E9%81%93-2022%E9%87%8D%E7%B7%A8%E7%89%88-7cccc3c68f1e">追求神乎其技的程式設計之道 — 2022 重編版</a> 这篇长文中他分享了自己学习编程的经历和感悟，非常值得一读。他最近写的 <a href="https://vgod.medium.com/list/e731a8ecf20d">《软件工程师的修炼与成长》</a> 系列里有技术成长、公司选择、职业发展等各个话题。</p><p>为什么有的人通过几个月的培训和刷题后就能做软件开发，而另外一些人经过了近 10 年的科班训练也是做软件开发，这两者有何区别？</p><blockquote><p> <strong>高手對技術的理解是四維的</strong></p><p>我在 D 社看過不少非常厲害的工程師，他們的共同特點是對於軟體系統的理解是「四維」的。如果把我們用來開發的程式語言和框架比喻成整個系統最上層的「二維表面」，在這個表面下面其實還有非常多層的抽象介面，就像一個千層蛋糕一樣，一層一層疊起來變成現在大家看到簡單易用畫面又精美的軟體。</p><p>厲害的工程師並不是不用常見的程式語言或框架，而是他們在用這些工具的同時，也可以往下多看到好幾層的系統內部發生了什麼事。這個對於系統「深度」的掌握，就是第一個維度的差別。</p></blockquote><blockquote><p>軟體界有個說法，所有重要的核心概念其實在 30 年前就都已經發明完了。現在很多「新技術」只是用新語言、新框架、新系統來重新實做和組合這些舊想法而已。</p></blockquote><p>文中举例在浏览器里输入一个地址后，会发生什么。这个问题也经常出现在各个面试中，面试官喜欢出这个问题是想看看候选人的深度和广度。这个问题很开放，我们可以从广度上列举很多点，经验越丰富的人能看到的就越多，而面试官也可以就某个点去不断探视候选人的深度。</p><p>这个 Github repo <a href="https://github.com/alex/what-happens-when">what-happens-when</a> 就是用这个问题来串出各个知识点，值得一看。</p><h2 id="Niche-Programmer"><a href="#Niche-Programmer" class="headerlink" title="Niche Programmer"></a>Niche Programmer</h2><p><a href="https://ano.ee/blog/the-niche-programmer">The Niche Programmer</a></p><p>Niche 就是小众，这里指使用小众技术栈的程序员。我查了一下才了解到，Niche 来源于法语，法国人信奉天主教，在建造房屋时，常常在外墙上凿出一个不大的神龛，以供放圣母玛利亚。它虽然小，但边界清晰，洞里乾坤，因而后来被引来形容大市场中的缝隙市场。</p><p>这个作者因为阴差阳错的机会去了一个使用 Clojure 的小公司，他吭哧吭哧干了 3 年，然后公司决定从 Clojure 换成 TypeScript，因为 Clojure 太难招人了。作者觉得 Clojure 肯定是一个正在衰落的语言，想着以后找工作再回到主流技术栈好了。</p><p>没几个月他想换工作了，于是开始求职，他发现 Clojure 竞争很小而薪水也不错，而且这些公司面试会不考 Leetcode 之类的，主要是看你的经验和技能，他们会仔细看你的 Github 主页。</p><blockquote><p>Anyway, this is all to say that being a niche programmer is not bad at all. Pay is great, competition is low and the interview processes for the most part very humane. If Clojure ever makes it mainstream, I’ll find a new niche language to specialize in.</p></blockquote><p>这就是差异化竞争吧，也许在内卷的人才市场上这是个策略。我觉得在国内也可以试试，因为很多小众技术栈的公司允许远程，但最好前提是英语足够好，因为这种采用小众技术栈的公司大多在国外。</p><p>我之前面试过一个做 SEO 工具的公司 (Ahrefs)，做 SEO 的朋友应该都听过这个公司。他们就是采用小众技术栈 OCaml。</p><p>我 2020 年试着投递了简历，然后居然就收到了面试邀请，我猜测也是投递的人数太少。第一面就是公司的 CTO，人在乌克兰，他的英语口音还我听不太懂，所以他就说得很慢，很有耐心地解释他们公司和技术挑战。后面给我留了一个小项目，需求很清楚但也可以自己发挥，我当时写的代码在这 <a href="https://github.com/chenyukang/ocaml-chat">ocaml-chat</a>。</p><p>后面又进行了一轮长的面试，两个面试官，另外一个是法国人 (OCaml 现在的大部分热衷者都是法国人)。这轮我英语的不足表现出来了，因为大多是开放性的问题，我的口语还不足以自由表达，加上法国人的英语我也不太听得懂，所以沟通还是有些困难。</p><p>尽管最终没有面成功，这是个不错的面试经历，也让我有了更大的动力来提高英语水平。我觉得小众技术栈有些挺好玩，如果能找到对应的工作就很好。</p><h2 id="Sun-的第-8-号员工"><a href="#Sun-的第-8-号员工" class="headerlink" title="Sun 的第 8 号员工"></a>Sun 的第 8 号员工</h2><p><a href="https://twitter.com/aka_pugs/status/1521489115585421314">Tom Lyon - on Twitter: 40 years ago today: I joined a tiny startup called Sun Microsystems</a></p><p>Tom Lyon 在这个 Twitter thread 里讲述了他 40 年前加入 Sun 的故事，顺带讲了一些 IT 历史故事。</p><p><img src="/images/ob_2022-05-14-151400.png" alt=""></p><p>1978 年他开始在硅谷工作，主要是把 Unix 移植到大型机上。他那时候会去 Berkeley 听 Bill Joy 的讲座，自称是第一个实现 Unix 里面的 select 接口的。虽然最终 Unix 没有采用他的版本，但这也让 Bill Joy 记住了他，为后来进入 Sun 瞒下伏笔。</p><p>他找工作时和 Valid Logic Systems 聊过，这是第一个 EDA (electronic design automation) 商业公司。我第一份工作也是做 EDA 工具，当时我所在的那个公司在中国研发，美国销售。那已经是 2011  年了，EDA 在美国已经成为大家口中的夕阳行业。而最近几年，因为被卡脖子的事，中国兴起了一波自研 EDA 工具的公司，可这整整已经差了 40 年。</p><p>1982 年作者去了 Sun 面试，那时候 Bill Joy 已经以联合创始人的身份加入了 Sun，Bill Joy 给了一个 20 人左右的名字让人去挖，他就是其中一个。</p><p>他当时的 offer 是每月 2000 美金，另有 4 位数的股票。当时美国的家庭年收入大概是 2 万多美金，可见当时 IT 行业的薪水并不像现在这样如此突出。</p><p>Sun 最开始被称为硬件公司，卖工作站和 Unix 类的系统，但后来开发了 Java。创建没几年后，Sun 公司就很快开始盈利，并一路高飞猛进，但巅峰就定格在了 2000 年，当时市值超过 2000 亿美金。当 2000 年互联网泡沫破碎时，以服务器和工作站为主的硬件业务便急转直下，Sun 没抓住 x86 这波机会，立马被微软反超了。</p><p><a href="https://www.networkworld.com/article/2268096/the-downfall-of-sun-microsystems.html">The downfall of Sun Microsystems</a> 这篇文章有些 Sun 为什么突然陨落的分析：</p><blockquote><p>Sun actually did sell x86-based systems in the 1980s, but concentrated its efforts on Sparc for most of the 90s. In King’s view, Sun treated x86 systems as nice toys, but not platforms that could be used to power a serious corporate data center. Sun did increase its presence in the x86 market in the years following the dot-com bust with AMD- and Intel-based servers, but it seems to have been too little, too late.</p></blockquote><p>Sun 公司从创建到巅峰花了 18 年，陨落也就在两三年，2009 年被 Oracle 以 56 亿美金收购，令人唏嘘。</p><h2 id="言论"><a href="#言论" class="headerlink" title="言论"></a>言论</h2><p><a href="https://twitter.com/LBacaj/status/1523442239003062272">Louie Bacaj on Twitter</a></p><blockquote><p>The biggest lie of the information age:<br>You can’t trust your intuition, but you can fully trust the data.</p></blockquote><blockquote><p>Looking back, almost every good decision i’ve made in my life has been based on instincts:<br>– who to marry<br>– where to live<br>– when to quit and so on.<br>Yet, the modern world would have us believe we need data for that. Don’t believe it, your intuition knows best.</p></blockquote><p>人生中的很多好决定不是数字能量化的，反而是靠直觉。</p><p><a href="https://twitter.com/dvassallo/status/1523445550598660096">Daniel Vassallo 回复到</a></p><blockquote><p>The biggest nuisance I had when I was an employee was having to justify all my decisions with data.</p></blockquote><p>Daniel Vassallo 是我之前介绍过的自由职业者，他说 Amazon 的唯一能用 gut feel 做决策的是 Bezos。<strong>gut feel</strong>直译是肠道感觉，这个词真合适，指身体内在的感受。</p><p>把工作中的决策和成果用数字来量化，很有必要，但有时候很难，相信每个在大厂工作过的都感同身受。</p><h2 id="Humor"><a href="#Humor" class="headerlink" title="Humor"></a>Humor</h2><p><img src="/images/ob_2022-05-14-161337.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是上周写的周刊，昨天忙着带娃忘记发了。苏州第三次尝试恢复正常，幼儿园计划 23 号开学，希望这次能结束我居家带娃上班的生活。&lt;/p&gt;
&lt;h2 id=&quot;软件工程师的修炼与成长&quot;&gt;&lt;a href=&quot;#软件工程师的修炼与成长&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="周刊" scheme="http://catcoding.me/tags/%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
</feed>
