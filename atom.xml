<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的喵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://catcoding.me/"/>
  <updated>2022-01-28T03:46:25.768Z</updated>
  <id>http://catcoding.me/</id>
  
  <author>
    <name>yukang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微软内推</title>
    <link href="http://catcoding.me/2022/01/27/ms-refer.html"/>
    <id>http://catcoding.me/2022/01/27/ms-refer.html</id>
    <published>2022-01-27T20:47:03.000Z</published>
    <updated>2022-01-28T03:46:25.768Z</updated>
    
    <content type="html"><![CDATA[<p>关注我的很多读者是想找份</p><p>个人还是比较喜欢干内推的这类事的，因为可以认识一些朋友，也可以顺便赚点外快。  微软员工内推入职的比例比较高，因为没和猎头合作，这钱就给员工赚了也挺好。</p><h3 id="个人工作感受"><a href="#个人工作感受" class="headerlink" title="个人工作感受"></a>个人工作感受</h3><p>在微软工作，工程师可以大多数时间专注在自己的项目上，没有那么多汇报和扯皮的事情。</p><p>日常接触的技术栈大多是微软自己的那套(不过也看部门)。这个我认为没什么问题，其实工作到一定年限，成熟的做法就是不对技术保有什么偏执。微软近些年在开源方面也做得挺好。</p><p>另一方面的感受是包容、平等和尊重。这里不会有年龄歧视，我们团队有小孩上高中的，也有 96 年左右的同事，其他部门也能看到预计 50 多岁的员工。做管理和不做管理也主要是在于个人志趣。</p><hr><p>微软苏州即将启用第二栋办公楼，又要开启招招招的模式，各个部门目前开放的岗位超过 200+， 并且之后会持续开放新的岗位。</p><p>所以对微软有兴趣的同学们，不要错过加入微软的最好机会！</p><p><strong>内推职位不限于苏州，北京、上海也有职位，</strong>麻烦你在官网找自己感兴趣的职位。</p><p><a href="https://careers.microsoft.com/professionals/us/en/">https://careers.microsoft.com/professionals/us/en/</a></p><p><img src="/images/ob_pasted-image-20220128114307.png" alt="/images/ob_pasted-image-20220128114307.png"></p><p>下面是一些 FAQ:</p><p><strong>Q1: 申请微软需要什么样的学历门槛？</strong> </p><p>A: 学历更好可能会占一些优势，但面试主要还是看能力和经验。如果是技术岗位，前几轮都是编程能力考察。学历在应届生中很重要，如果是社招就没那么重要，例如你有一线大厂有经验，或者是好的项目经验，学历​通常只要是本科就可以，名校和非名校没那么大的差别。我甚至也见到过没有本科学历的同事，但是​他技术和工作经验都没问题。</p><p><strong>Q2: 微软的面试流程是什么样的，简历投递之后流程如何？</strong> </p><p>A: 我这里投递简历之后，HR 初步沟通意向，可能会和你讨论哪个组比较合适你。然后一轮技术面试（现在一般是远程面试)。通过之后大概 4-5 轮连续的面试，HR 会尽量安排在一到两天内。面完之后就是等结果和谈 Offer 的过程了。</p><p><strong>Q3: 针对面试需要做哪些准备？</strong>   </p><p>A:  社招主要是编程能力、系统设计、表达能力、英语能力。其中编程能力的考察方式是在线编程。</p><p>我建议刷一下 LeetCode easy/medium 难度。系统设计通常是给一个具体的场景，一起讨论如何设计实现，或者讲一下自己之前做的一些项目，难点和挑战。英语能力要求能简单表述自己，发音和流畅度不要求太高。</p><p><strong>Q4: 微软的职级是怎样的, 我应该申请什么级别？</strong>  </p><p>A: 本科生和研究生校招进入微软都是 59 级，这是你在微软的 level，除了 level 之外，微软制定了不同角色的 title 体系，以多数人申请的 IC(个人研发)岗位为例，一个 title 往往对应 2~3 个 level，大概的对应关系和工作年限要求如下： </p><blockquote><p>Title Level 工作年限要求<br>   SDE 59~60 3 年以下工作经验<br>   SDE2 61~62 3 年到 6 年<br>   Senior SDE 63~64 7 年到 10 年<br>   Principal SDE 65~67 10 年+</p></blockquote><p>当然工作年限和职级的对应关系不是严格对应的，需要自己争取。</p><p><strong>Q5: 英文不好的我是不是和微软无缘了？</strong></p><p>A: 如果是技术岗位对英语的要求没那么高，只要能听懂和简单表达自己即可。当然面试之前准备好英文的自我介绍比较好。</p><p><strong>Q6: 微软需要 996 福报嘛？</strong> </p><p>A: 不会，我的感受是大家都真的在自由安排时间，上下班不打卡，没人关注你什么时候下班，也没有拼加班的风气。有的有孩子的同事回家比较早，通常5、6点开始有人下班了。</p><p>据说有个别组有点卷，这些私聊我会告知你我所知道的。</p><p><strong>Q7: 和外界迥异的技术栈，进入微软水土不服怎么办？</strong>   </p><p>A: 入职后会有比较长时间去给你适应，内部好多文档、书籍、视频资料可以学习。我最近发现公司还给员工买了Oreilly 的会员，还有 Linkedin上的各种学习资料，只要保持学习心态这些不是问题。</p><p><strong>Q8: 带着想要肉身翻墙，去接受美帝资本主义腐蚀的思想也可以加入微软嘛？</strong></p><p>A: 这个时期还有勇气去美帝么？真的勇士！</p><p>据我所知以前去美帝的很多，疫情期间暂停了一段时间。现在据说又有同事开始过去了，不过都是疫情之前已经拿到那边的 Offer 的同事。</p><p>真想要翻墙可以进来再观望，估计以后还是有机会的。</p><p><strong>Q9: 目前开放的岗位有哪些，岗位太多难以抉择怎么办？</strong></p><p>A: 找我或者和 HR 小姐姐沟通。我当时也是抱着随便投投攒点面试经历的想法投了简历。没想到 HR 特别耐心和我沟通了半个多小时。然后就稀里糊涂的面了好几轮。</p><p><strong>Q10: 微软可以远程办公吗？</strong></p><p>A: 如果是不超过 50% 时间在家办公，和组里口头说一下即可，我经常一周在家一两天。如果是想长期永久在家办公，需要走流程让上面审批，我们隔壁组有同事长久在家办公。</p><p>有意向的读者请将简历微信发我(公号回复 0)，或者邮箱 moorekang#gmail.com。我会全程跟进大家的面试流程，为大家解答问题和提供面试的意见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关注我的很多读者是想找份&lt;/p&gt;
&lt;p&gt;个人还是比较喜欢干内推的这类事的，因为可以认识一些朋友，也可以顺便赚点外快。  微软员工内推入职的比例比较高，因为没和猎头合作，这钱就给员工赚了也挺好。&lt;/p&gt;
&lt;h3 id=&quot;个人工作感受&quot;&gt;&lt;a href=&quot;#个人工作感受&quot; cl
      
    
    </summary>
    
    
      <category term="微软" scheme="http://catcoding.me/tags/%E5%BE%AE%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>游戏大神 John Carmack 的编程学习建议</title>
    <link href="http://catcoding.me/2022/01/27/adivces-from-john-carmack.html"/>
    <id>http://catcoding.me/2022/01/27/adivces-from-john-carmack.html</id>
    <published>2022-01-27T00:15:54.000Z</published>
    <updated>2022-01-28T03:46:25.760Z</updated>
    
    <content type="html"><![CDATA[<p>John Carmack 是游戏编程祖师爷级别的人物，id Software的创始人之一。代表作有《德军总部3D》（Wolfenstein 3D）、《毁灭战士》（Doom）和《雷神之锤》（Quake）等等，这些游戏和它们的后续版本都获取了巨大的成功。</p><p>《Doom 启示录》这本书可以说是很多游戏创作者的启蒙书。</p><p>他更是创造了游戏编程和图形学中的一些经典技术，比如他在 Doom上第一次使用了二叉树分割技术，表面缓存技术则在 Quake 中第一次出现。</p><p>前段时间看到个说法：</p><blockquote><p>衡量一职业是否越老越吃香，就看能不能在前面加上德高望重四字。例如：德高望重的医生，德高望重的老师，德高望重的鉴定师……</p></blockquote><p>我想 John Carmack 是不是可以配得上这四个字？但是总感觉哪里不对，原来是年纪，其实 John Carmack 今年不过才 51 岁。</p><p><img src="/images/ob_pasted-image-20220126230424.png" alt="/images/ob_pasted-image-20220126230424.png"></p><p>就是这样的大神，仍然对编程保持着好奇心和学习的心态，从他的 Twitter <a href="https://twitter.com/ID_AA_Carmack">@ID_AA_Carmack</a> 可以偶尔看到一些关于编程学习的心得和体会。</p><p>比如前几年他对函数式编程感兴趣了，所以做了一个 <a href="https://sdtimes.com/john-carmack/oculus-cto-john-carmack-is-developing-scheme-scripting-language-for-vr/">Scheme 脚本语言来进行 VR 开发</a>。</p><p>他提倡的学习方式是实际动手去做一些小东西，这两年他在学一些 AI 相关的东西 :</p><blockquote><p>My advice to people wanting to get into game programming has been to write small games completely from scratch while also working on commercial game mods and with unity or unreal. I’m following that myself for AI — I have some C++ backprop-from-scratch projects while also learning python / pytorch / jupyter and experimenting with pretrained models. I had to give myself a bit of a kick to not dwell too much in the lowest levels, but now I am enjoying the new world quite a bit. You can do a remarkable amount with very little code, but when I actually write a loop in python because I don’t know the correct way to do something with tensor ops I get reminded just how slow python is relative to C++.</p></blockquote><p>Carmark 甚至还会使用这种静修式的方式来<a href="https://www.facebook.com/permalink.php?story_fbid=2110408722526967&amp;id=100006735798590">找回编程的乐趣</a>，完整地花费一周时间来自己实现神经网络的小项目，顺便玩一些自己用得比较少的工具:</p><blockquote><p>I’m not a Unix geek. I get around ok, but I am most comfortable developing in Visual Studio on Windows. I thought a week of full immersion work in the old school Unix style would be interesting, even if it meant working at a slower pace. It was sort of an adventure in retro computing — this was fvwm and vi. Not vim, actual BSD vi.<br>…..<br>Maybe next time I do this I will try to go full emacs, another major culture that I don’t have much exposure to.</p></blockquote><p>你看，当一个喜欢编程的程序员财富自由了之后，最有乐趣的事还是编程。</p><p>那大佬对学习编程有什么建议么？</p><p>简而言之还是那句话：<strong>多看，多写！</strong></p><p><img src="/images/ob_pasted-image-20220126224701.png" alt="/images/ob_pasted-image-20220126224701.png"></p><p>2005 年有个 14 岁的小朋友发邮件问 John Carmack 如何学习编程，他当年给了一个<a href="http://d3dvortex.blogspot.com/2005/07/programming-advice-from-john-carmack-i.html">回复</a>，2018 年的时候又被翻出来，虽然十多年过去了，技术变得越来越复杂，但是这仍然是学习编程的好建议:</p><p><a href="https://twitter.com/id_aa_carmack/status/1047504598527856642">John Carmack on Twitter: “This is still generally good advice.” / Twitter</a></p><p>这里完整地分享一下，顺便一起学学英语 🙌</p><blockquote><p>When I started, computers couldn’t do much more than simple arithmetic and if statements – my first computer had 4k of memory. How I learned probably isn’t very relevant, because there are so much better resources available today.</p><p>Don’t expect it to be easy, you will have to work at it. Get a few more books from the library that cover beginning programming to go with the ones you have – sometimes a different author explaining the same thing will help a concept click. Go through all of them at least twice. Try to do every problem and exercise, don’t just read them and think you get it. Lots of people that want to program will talk a lot about programming, but not actually write that many programs. You should write hundreds of programs</p><p>If you want to get good at something you need to focus on it, which means choosing to exclude some other things from your life. Keep a little journal of what you are working on each day, you may find that you aren’t applying yourself all that hard. Learn something new every single day.</p><p>Avoid “cookbook programming”, where you copy and paste bits of code that you have found to make something work. Make sure you fully understand what everything it actually doing, and that you are comfortable applying the techniques in other situations.</p><p>It isn’t a bad idea to start in an environment that give you more exciting feedback, like visual basic, flash, or javascript, but you should try and “find the excitement” in even the most simple data processing tasks. There are layers and layers of things going on in just compiling and running the simplest program that are worth investigating.</p><p>Pay attention in school to the math classes. It is more important to be able to do basic algebra and trigonometry extremely well than to sort of get by in higher math classes. You should be able to ace all the tests and teach other people if you truly have a complete understanding of the subjects.</p><p>John Carmack</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;John Carmack 是游戏编程祖师爷级别的人物，id Software的创始人之一。代表作有《德军总部3D》（Wolfenstein 3D）、《毁灭战士》（Doom）和《雷神之锤》（Quake）等等，这些游戏和它们的后续版本都获取了巨大的成功。&lt;/p&gt;
&lt;p&gt;《Doo
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>培养习惯，程序员学英语没那么难</title>
    <link href="http://catcoding.me/2022/01/24/learn-english-as-programmer.html"/>
    <id>http://catcoding.me/2022/01/24/learn-english-as-programmer.html</id>
    <published>2022-01-24T13:30:47.000Z</published>
    <updated>2022-01-28T03:46:25.768Z</updated>
    
    <content type="html"><![CDATA[<p>接着上一篇，我们谈谈程序员如何能从各个维度来提高自己的英语能力。</p><p>首先声明，我自己的英语水平也没那么好，技术类的阅读没有问题，自己还在提高英语写作和口语，我的目标是在专业方向上完全无障碍的英语表达。</p><p>这是我自己日常工作生活中总结出来的一些小经验吧，每个人的学习习惯不同，这些仅作参考。</p><p>PS：等我开始写这篇的时候，我发现有的事情不能写，比如怎么科学上网之类的 ，那么我们假设这个你已经搞定了🤣</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>作为 IT 从业人员，我们日常生活中其实会接触很多英文内容，书籍、文档、参考资料等等。如果一个英文不够好的人会优先选择中文内容。</p><p>如果你想提高自己的英文能力，就得改变这个默认倾向。否则这就是一个怪圈，你一直看中文的就不可能打破这个循环。</p><p>首先，编程的时候参考文档换成优先看英文版本，比如假设你是前端开发，平时需要看 vue 文档，那就换成英文的，而且英文的内容更及时更新。</p><p>我建议默认也把操作系统的语言设置为英文的，这样很多软件默认语言也自动成为英文。</p><p>关闭浏览器的自动翻译功能，因为这会干扰阅读，也会让你放弃掉自己先阅读英文的机会。</p><p>在浏览英文网页的时候，可以使用一些辅助查询插件，比如我用的这个 Chrome 插件 <a href="https://saladict.crimx.com/">Saladict 沙拉查词 </a> 就提供各种辅助查询，也可以把自己不认识的生词保存在线上以便以后回顾。<br><img src="/images/ob_pasted-image-20220124115802.png" alt="/images/ob_pasted-image-20220124115802.png"></p><p>在用互联网上搜索的时候，也尽量换成使用英文关键词。如果能用 Google 最好，不能的话换成 Bing 、DuckDuckGo 搜英文也比百度好很多。</p><p>除了文档，另一个不错的英语阅读来源是 Medium.com，这上面除了技术类的文章也有很多其他方向上的内容，这些文章并不是很长，而且排版都非常好，容易让人沉下心来阅读。欢迎关注我的账号：<a href="https://medium.com/@coderscat">Medium</a> 👻</p><p>如果是在校学生，你也许需要看很多计算机相关的书籍，如果能看英文原版的最好。不要恐惧去拿起整本的英文书，<strong>因为只要坚持读完第一本，后面自然就会读起来越来越快</strong>。</p><p>我在学校的时候借过《Introduction to Algorithms》和 《Structure and Interpretation of Computer Programs》。</p><p>学校图书馆的英文书相对更容易借到，因为看的人少很多，从书本的新旧程度看这些书基本没人借过。所以，选择少有人走的路，有时候反而更轻松。</p><p>还有不少其他计算机的经典书籍，我认为计算机相关专业的最好在学校阶段看一遍，比如：</p><ul><li>The Pragmatic Programmer: From Journeyman to Master</li><li>The C Programming Language</li><li>The UNIX Programming Environment</li><li>The Art of Unix Programming</li><li>Clean Code</li><li>Refactoring: Improving the Design of Existing Code</li><li>Computer Systems: A Programmer’s Perspective</li><li>Code Complete</li><li>Programming Pearls</li></ul><p>这些书中的任何两本认真看完，技术类的阅读不成问题了。</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>英语写作更难一些，因为相对来说如果不是在外企工作，使用英文写作的场景会少很多。</p><p>很多时候越是难的事才越有价值，我在之前公司工作的时候需要写英文的技术文档，懂技术的英文不好，懂英文的技术不好，所以把这两种稀缺能力叠加一起就很好地提高自己的价值。</p><p><img src="/images/ob_pasted-image-20220121140826.png" alt="/images/ob_pasted-image-20220121140826.png"></p><p>我们也可以刻意地改变一些习惯培养技术写作，比如使用英文来写 Readme 和代码中的注释，使用英文来写平时的记录和博客之类的。</p><p>建立一个自己的英文 Blog 是非常好的方式，我在自己的英文站点 <a href="http://coderscat.com">http://coderscat.com</a> 上总共写了 150 多篇技术相关的英语文章，有的是平时工作中的一些记录，有的是解题报告，有的是刻意练习写作的。</p><p>在写的过程中需要反馈才能提高，因为有很多中式表达如果没有人指出来自己是意识不到的。</p><p>为了得到一些反馈，反馈也会激励我们继续写下去，所以我们需要把自己的内容让更多人看到。</p><p>在 StackOverflow, Quora 上回答问题是锻炼写作能力的好平台。我有段时间就经常在 Quora 上回答问题，因为这里有很多英语母语者在浏览。如果他们发现问题可能会乐于帮我指出来。</p><p>我有时候会把文章同步到 dev.to，比如我这篇文章曾经是 dev.to 上的爆款：<br><a href="https://dev.to/snj/how-to-learn-data-structures-and-algorithms-an-ultimate-guide-for-beginners-2h9c">How To Learn Data Structures And Algorithms</a></p><p>后来我把自己写的文章同步到 Medium.com 上，然后投稿到一些大的技术类专栏，比如 <a href="https://betterprogramming.pub/">Better Programming</a>，<a href="https://levelup.gitconnected.com/">Level Up Coding</a>。</p><p>为什么要投稿呢，因为可以来判断自己是否写得足够好，而且像 Better Programming 这样对质量要求比较高的专栏，他们能看出我不是英语母语者，但是如果我的内容还不错，也会让自己的编辑去帮我润色，这就是最好的得到反馈的机会。</p><p>专业的编辑会从标题的选取、排版、英语写作的用法等等角度去改进文章。我在这个过程中就学会了很多东西。</p><p>在 Medium 写作的另一好处是可以赚钱，可以参考一下我写的这篇：<br><a href="https://bettermarketing.pub/how-i-wrote-a-500-article-in-my-first-3-months-on-medium-83b5391abcd3">How I Wrote a $500 Article in My First 3 Months on Medium</a>，文中提到的那篇文章一直都还有阅读，后来累计了 1300 $。<br><img src="/images/ob_pasted-image-20220123184229.png" alt="/images/ob_pasted-image-20220123184229.png"></p><p>在 Medium 上写作赚钱的红利期也过了，除了我上面的那篇爆款，我其他写的文章如果专栏接收大概也只是在 500 元左右的收益。</p><p>关于如何建一个盈利的英文站以及如何通过英文写作赚钱，这是另一个比较大的话题，这些也以后再分享 🙌</p><h2 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h2><p>听力和口语这是两项英语沟通的必备技能，最好在学校阶段就注重这方面的培养，因为工作之后时间和精力都会少很多。</p><p>如果是锻炼听力，轻松的办法是看美剧，比如 Friends 系列。我现在用得更多的是听 Podcast 、看 Youtube 之类的。这里推荐两个 IT 类的 Podcast：</p><ul><li><a href="https://www.microsoft.com/en-us/behind-the-tech">Behind the Tech Podcast with Kevin Scott - Microsoft</a>  微软 CTO 关于科技方面的播客。</li><li><a href="https://www.hanselminutes.com/">Hanselminutes Technology Podcast </a> Scott Hanselman 在 Youtube 上也很活跃，技术介绍通俗易懂。</li></ul><p>在口语这块，我自己在学校阶段没刻意提高，所以虽然阅读、写作相对好些，口语一直都一般。</p><p>如果有练习口语的环境，逼得你日常就用英语交流，这就会提高很快。2013 年我在硅谷待过一段时间，每天至少会和印度同事交流一下，感受是听力好了很多。</p><p>然而后面脱离了那个环境就又退化了。我两年前曾经付费使用过 Cambly 来练习口语，每天花 30 分钟和英语母语者聊天，自我感觉提高了一些，其实主要是克服了那种不敢说的恐惧。我的发音不太准，以后再花时间改进。</p><hr><p>工作后的人大多没有很多时间来学习英语，我见过同事花了 2 万多去报名培训班，上了几次后之后就坚持不了的。提高英语能力不是一朝一夕的事情，没什么捷径，每天花 20 分钟专门阅读，20 分钟锻炼口语或者写作就是很好的习惯。</p><p>如果你想不知不觉地提高自己的英语，好好培养一些习惯，然后一直坚持就够了。如果要刻意提高，在校的学生可以尝试先把四六级过了，然后如果有时间和精力去考雅思托福之类的。</p><p>以上就是我自己的一些经验之谈。道理很简单：<strong>不管是读写听说，多用英语，用得多了日积月累就会提高</strong>，摸索出一些适合自己的习惯才能持久。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接着上一篇，我们谈谈程序员如何能从各个维度来提高自己的英语能力。&lt;/p&gt;
&lt;p&gt;首先声明，我自己的英语水平也没那么好，技术类的阅读没有问题，自己还在提高英语写作和口语，我的目标是在专业方向上完全无障碍的英语表达。&lt;/p&gt;
&lt;p&gt;这是我自己日常工作生活中总结出来的一些小经验吧
      
    
    </summary>
    
    
      <category term="英语" scheme="http://catcoding.me/tags/%E8%8B%B1%E8%AF%AD/"/>
    
      <category term="自我成长" scheme="http://catcoding.me/tags/%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>世界很大，一定要学好英语</title>
    <link href="http://catcoding.me/2022/01/18/learn-english-for-big-world.html"/>
    <id>http://catcoding.me/2022/01/18/learn-english-for-big-world.html</id>
    <published>2022-01-18T00:10:31.000Z</published>
    <updated>2022-01-28T03:46:25.768Z</updated>
    
    <content type="html"><![CDATA[<p>今天再分享一下自己作为程序员学习英语的一些经验，我计划分几篇写成一个系列。</p><p>首先我们谈谈作为程序员，我们为什么要学好英语。英语对程序员的重要性主要体现在以下几个方面：</p><h3 id="更好的输入"><a href="#更好的输入" class="headerlink" title="更好的输入"></a>更好的输入</h3><p>毋庸置疑，英语已经是世界上科技和学术交流的通用语言，这是我们无法改变的事实，而且可以预见我们有生之年仍然是这样。在 IT 领域更是这样，这个世界上最新的、最全的、最好的编程学习资料大多是英文的。</p><p>比如我前几天介绍的 <a href="https://craftinginterpreters.com/">Crafting Interpreters</a> 这本书，如果等到国内翻译出来说不定几年都过去了。而且国内很多技术书的翻译质量很差，因为翻译的收入并不高，有能力把技术翻译做好的人，大多不愿意投入时间到这上面。</p><p>我知道一些出版社找的是国内高校的老师，然后让一些实验室的几个研究生来翻译，这些研究生因为缺乏从业经验，翻译出来的东西质量低下。有的经典技术书籍被翻译成烂的中文版，让人痛心。</p><p>比如《人月神话》中文版里有一句话是 “大拇指的规则就是 …..”，你看的时候会不会困惑不已，大拇指规则是什么？</p><p><img src="/images/ob_pasted-image-20220115193956.png" alt="/images/ob_pasted-image-20220115193956.png"></p><p>如果你去看英文版本，其实这句是: The rule of thumb，其实是指”经验法则”。</p><p>其实不止是英文资料的问题，很多软件的中文告示也是不够准确的，甚至有的计算机术语是没有公认得中文翻译的。</p><p>比如编译器 Gcc 的一个中文警告：</p><figure class="highlight erlang"><table><tr><td class="code"><pre><code class="hljs erlang">提领类型双关的指针将破坏强重叠规则.<br></code></pre></td></tr></table></figure><p>这到底写个啥？但如果你去看英文，就容易理解得多：</p><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi">warning: dereferencing <span class="hljs-keyword">type</span>-punned pointer will <span class="hljs-keyword">break</span> <span class="hljs-keyword">strict</span>-aliasing rules<br></code></pre></td></tr></table></figure><p>如果我们一直用这些学习资料，容易被误导、浪费自己的时间，更是可能是达到一定瓶颈无法提高自己，所以直接看原版的英文书收益更多。比如我就基本没买计算机的书了，我用公司的 OReilly 账号，基本能看所有好的原版计算机书籍：</p><p><img src="/images/ob_pasted-image-20220115205624.png" alt="/images/ob_pasted-image-20220115205624.png"></p><h3 id="更广的交流"><a href="#更广的交流" class="headerlink" title="更广的交流"></a>更广的交流</h3><p>如果你在 Github 上做开源，免不了和其他国家程序员沟通。要在一个顶级的开源项目做贡献，一个 Pull Request 来来回回几十个讨论也是很正常的。</p><p>能否在英语世界中传播对于一个开源项目至关重要。</p><p>Ruby 创始人松本行弘 1995 年开始创建 Ruby，前面好几年其实 Ruby 大多是在日本圈子里用用，可以看看 Ruby 的早期版本里很多注释都是日文的。一直到 2005 年 Rails 发布，出现了很多英文的 Rails 书籍和介绍，Ruby 才开始风靡全球。</p><p>那些做出著名开源项目的国人中，英语交流肯定是没有任何问题的，例如 OpenResty 作者<a href="https://baike.baidu.com/item/%E7%AB%A0%E4%BA%A6%E6%98%A5/17510629">章亦春</a>，Vue 创始人尤雨溪等。反观国内某些大厂的某些开源项目，例如腾讯的 <a href="https://github.com/polarismesh/polaris">polarismesh/polaris</a>，这文档、代码注释都是只有中文，这如何能在世界范围内流行开了呢。</p><p>有的国内开发者编程中的变量名用拼音，可以想象如果一个开发者写的代码是：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">denglu</span><span class="hljs-params">(yonghu)</span></span>:<br>  ...<br></code></pre></td></tr></table></figure><p>这代码只有中国人有可能读懂，那如何让中国之外的开发者协作？</p><p>同样的原因，我认为中文编程可能为英语不好的初学者稍微拉低一下学习门槛，除此之外毫无益处。</p><h3 id="更多机会"><a href="#更多机会" class="headerlink" title="更多机会"></a>更多机会</h3><p>国内年轻人多，2021 年应届生加上海归总人数达到 900 万。 而其他行业相对不好找工作、工资低，导致很多人转向 IT 行业，结果就是国内 IT 职位内卷得要命。</p><p>另一方面，现在因为疫情、贸易战等原因，世界各国的人员流动减缓，但是线上协作更多了。<strong>疫情加速了全球数字化进程，其实各个国家都很缺软件工程师。</strong></p><p>所以如果你想做这行但又不想内卷，就别一直盯着国内大厂，多看看外面的机会，比如国内外企，远程职位，或者其他国家的职位。</p><p>德国就为工程师提供欧盟蓝卡，比如《精通正则表达式》的译者<a href="https://twitter.com/FreiheitYu">余晟</a>就在德国生活得很舒服啊。</p><p>当然是否出国定居涉及到很多因素，如果不出国也可以试着找<a href="https://github.com/formulahendry/955.WLB">国内的外企</a>，比如微软在国内大量招聘(找我内推)，还有 Paypal、AMD、NVIDIA、Amazon、Hulu 等等。有人会说外企在国内正在衰退啊，我的理解是传统外企确实岗位少了很多，而 IT 类的外企还是有很多职位在招人，只是对比 BAT 招聘名额少很多，所以显得没有多少存在感。</p><p>应聘这些职位对英语有一定要求，但这个要求其实又没有你想象的那么高，通常只要能达到日常交流水平就可以了，因为编程工作中的交流相对来说是比较简单的。</p><hr><p>这篇已经比较长了，后一篇再接着谈作为工程师如何提高英语能力。我的经验是不用专门为了提高英语而刻意去学，更多是日常工作学习中做一些习惯上的改变，达到日渐提高英语的目的。</p><p>待续。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天再分享一下自己作为程序员学习英语的一些经验，我计划分几篇写成一个系列。&lt;/p&gt;
&lt;p&gt;首先我们谈谈作为程序员，我们为什么要学好英语。英语对程序员的重要性主要体现在以下几个方面：&lt;/p&gt;
&lt;h3 id=&quot;更好的输入&quot;&gt;&lt;a href=&quot;#更好的输入&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="英语" scheme="http://catcoding.me/tags/%E8%8B%B1%E8%AF%AD/"/>
    
      <category term="自我成长" scheme="http://catcoding.me/tags/%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>国内远程 IT 职位</title>
    <link href="http://catcoding.me/2022/01/15/remote-jobs-in-cn.html"/>
    <id>http://catcoding.me/2022/01/15/remote-jobs-in-cn.html</id>
    <published>2022-01-15T00:09:24.000Z</published>
    <updated>2022-01-28T03:46:25.768Z</updated>
    
    <content type="html"><![CDATA[<p>我最近在做一个提供国内远程职位的公司列表，可能对你有帮助。</p><p>可以看出这些公司通常不是那些行业巨头，反而是一些小而美的创业公司。他们能提供的薪资也许比不上 996 的大公司，但是也不会那么卷和累，而且如果远程工作你可以居住在二三线城市，这样也能做到一定程度兼顾家庭。</p><p>所以我认为这是逃离内卷的一种方式。</p><p>为什么说愿意让员工远程的公司通常不那么卷？</p><p>因为远程职位通常要求员工的自驱力比较强，并且公司相信员工能够按约定交付，所以也不太关心你什么时候上下班，每天工作多少时间。<strong>对员工信任的公司，不会内卷。</strong></p><p>这些公司提供的职位大多是偏技术的，毕竟编程的工作是比较适合远程的。如果你有感兴趣的职位，可以找我内推，也许我认识这里面的一些朋友。另外，微软也支持远程，如果远程时间小于 50% 经理批准就可以，如果全职远程必须部门大老板批准(我也看到有人在全职远程了)。感兴趣的也可以让我内推。</p><p>这个列表的链接是：<a href="https://github.com/chenyukang/remote-jobs-cn">chenyukang/remote-jobs-cn (github.com)</a>。</p><p>公众号重新编辑不便，所以如果后续有新增我会更新到 Github 上。</p><hr><h2 id="平凯星辰-PingCAP"><a href="#平凯星辰-PingCAP" class="headerlink" title="平凯星辰 | PingCAP"></a><a href="https://pingcap.com/index.html">平凯星辰 | PingCAP</a></h2><ul><li>职位： <a href="https://pingcap.com/careers/#see-more-positions">Careers | PingCAP</a></li><li>行业：分布式数据库</li><li>技术：Golang, Rust, 前端，数据库，DevOps，运维</li></ul><p><a href="https://zhuanlan.zhihu.com/p/104184804">PingCAP 的 5 年远程办公实践 - 知乎 (zhihu.com)</a></p><h2 id="涛思数据-TDengine"><a href="#涛思数据-TDengine" class="headerlink" title="涛思数据 | TDengine"></a><a href="https://www.taosdata.com/en/">涛思数据 | TDengine</a></h2><ul><li>职位： <a href="https://www.taosdata.com/cn/careers/">招贤纳士 | 涛思数据 (taosdata.com)</a></li><li>行业：时序数据库</li><li>技术：C/C++, 前端</li></ul><p><a href="https://www.taosdata.com/cn/about/">关于 | 涛思数据 (taosdata.com)</a></p><p><a href="https://xueqiu.com/4826147079/166899232">开源 —— “这是最好的时代，这是最坏的时代”｜陶建辉</a></p><h2 id="MegaEase"><a href="#MegaEase" class="headerlink" title="MegaEase"></a><a href="https://www.megaease.com/zh/">MegaEase</a></h2><ul><li>职位：<a href="mailto:Hiring@MegaEase.com">Hiring@MegaEase.com</a></li><li>行业： 云原生开源软件、微服务开发框架、中间件等</li><li>技术：Golang, C/C++</li></ul><p><a href="https://coolshell.cn/articles/20765.html">MegaEase的远程工作文化 | 酷 壳 - CoolShell</a></p><h2 id="秘猿科技-cryptape"><a href="#秘猿科技-cryptape" class="headerlink" title="秘猿科技 | cryptape"></a><a href="https://www.cryptape.com/">秘猿科技 | cryptape</a></h2><ul><li>职位：<a href="https://www.cryptape.com/join">cryptape</a></li><li>行业：区块链</li><li>技术：Rust，C/C++ 等</li></ul><p><a href="https://www.v2ex.com/t/825555#reply2">秘猿科技 招聘区块链开发工程师/Rust 开发工程师/全栈开发</a></p><h2 id="FydeOS-面向未来的操作系统"><a href="#FydeOS-面向未来的操作系统" class="headerlink" title="FydeOS - 面向未来的操作系统"></a><a href="https://fydeos.com/">FydeOS - 面向未来的操作系统</a></h2><ul><li>职位：操作系统底层工程师、Android 底层工程师、C/C++ 底层软件工程师、前端</li><li>行业：操作系统</li></ul><p><a href="https://v2ex.com/t/798123#reply53">[北京/武汉/深圳/远程] FydeOS - V2EX</a></p><h2 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a><a href="https://www.vmware.com/">VMware</a></h2><ul><li>职位：数据库内核开发</li><li>行业： 虚拟化</li><li>技术：C,  k8s 、网络、存储、虚拟化</li></ul><p><a href="https://v2ex.com/t/787613">[北京][955]VMware 招聘 Greenplum 数据库内核开发 - V2EX</a></p><h2 id="RustDesk"><a href="#RustDesk" class="headerlink" title="RustDesk"></a><a href="https://rustdesk.com/">RustDesk</a></h2><ul><li>职位：<a href="https://rustdesk.com/contact/">Contact (rustdesk.com)</a></li><li>行业：远程桌面</li><li>技术：Rust 、Flutter 、React/Javascript</li></ul><p><a href="https://rustcc.cn/article?id=dcc0bce8-1c48-4aeb-8fbd-d100c4a184ed">RustDesk招聘远程 - Rust语言中文社区 (rustcc.cn)</a></p><h2 id="Databend"><a href="#Databend" class="headerlink" title="Databend"></a><a href="https://databend.rs/">Databend</a></h2><ul><li>职位：数据库内核、Cloud 平台开发工程师、社区运营</li><li>行业：开源云原生数仓库</li><li>技术：Rust</li></ul><p><a href="https://rustcc.cn/article?id=1d8ca553-0fff-46d8-8e24-86c1798a5184">Databend 招聘中，期待你能全职加入开源项目 - Rust语言中文社区 (rustcc.cn)</a></p><h2 id="极狐-GitLab"><a href="#极狐-GitLab" class="headerlink" title="极狐 (GitLab)"></a><a href="https://about.gitlab.cn/">极狐 (GitLab)</a></h2><ul><li>职位：Ruby 测试/研发/全栈工程师等多个职位</li><li>行业：开源代码托管</li></ul><p><a href="https://ruby-china.org/topics/41933">极狐 (GitLab) 招聘 Ruby 测试/研发/全栈工程师等多个职位 · Ruby China (ruby-china.org)</a></p><h2 id="Logseq"><a href="#Logseq" class="headerlink" title="Logseq"></a><a href="https://logseq.com/">Logseq</a></h2><ul><li>职位：开发工程师</li><li>行业：笔记软件</li><li>技术： Clojure(Script)</li></ul><p>职位不多，也许招满了。<br><a href="https://www.v2ex.com/t/808850">Logseq 远程招聘一位开发工程师 [40k ~ 65k] - V2EX</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我最近在做一个提供国内远程职位的公司列表，可能对你有帮助。&lt;/p&gt;
&lt;p&gt;可以看出这些公司通常不是那些行业巨头，反而是一些小而美的创业公司。他们能提供的薪资也许比不上 996 的大公司，但是也不会那么卷和累，而且如果远程工作你可以居住在二三线城市，这样也能做到一定程度兼顾家
      
    
    </summary>
    
    
      <category term="工作，远程" scheme="http://catcoding.me/tags/%E5%B7%A5%E4%BD%9C%EF%BC%8C%E8%BF%9C%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>大家都在用我的代码，所以我就该富有吗？</title>
    <link href="http://catcoding.me/2022/01/12/fakerjs-is-deleted.html"/>
    <id>http://catcoding.me/2022/01/12/fakerjs-is-deleted.html</id>
    <published>2022-01-12T20:11:48.000Z</published>
    <updated>2022-01-28T03:46:25.764Z</updated>
    
    <content type="html"><![CDATA[<p>这些天因为 <a href="https://www.zhihu.com/question/510180628">faker.js 开源作者 Marak 删除代码</a>事件让开源出圈了，好多非 IT 的自媒体都跟风写上了。我花了些时间查找资料，也说说自己的理解。</p><p>首先我们回顾一下整个事件：</p><ul><li>8 年前 Marak 的 JavaScript 库 Faker.js 完成 1.0.0 版本，该库可以制造非常多不同类型的假数据，用于开发调试。使用的是 MIT License ，这个 License 简而言之你可以随意用我的代码，但是风险你自己承担，我也不会收费。</li><li><a href="https://link.zhihu.com/?target=https%3A//web.archive.org/web/20210704022108/https%3A//github.com/Marak">Marak</a> 曾在2020年10月25日的时候在推特发帖声称自己在<a href="https://twitter.com/marak/status/1320465599319990272">公寓火灾中丢失了所有东西</a>，几乎无家可归，在申请外界支援，从回复上看很多人已经伸出了援手。</li></ul><p><img src="/images/ob_pasted-image-20220112141010.png" alt="/images/ob_pasted-image-20220112141010.png"></p><ul><li>2020 年底开始，Marak 一直在寻求一些方式来通过 Faker.js 赚钱，众筹或者寻求大公司赞助，甚至是希望被收购。这过程中收到了一些拒绝。</li></ul><p><img src="/images/ob_pasted-image-20220112140826.png" alt="/images/ob_pasted-image-20220112140826.png"></p><ul><li>从2021 年左右开始，<strong>Marak 开始关注币圈了，说要卖掉房子来投资 NFT</strong>。可以看出这时候他应该从火灾的窘境中脱离了？</li></ul><p><img src="/images/ob_pasted-image-20220112135633.png" alt="/images/ob_pasted-image-20220112135633.png"></p><ul><li>也许是因为通过 faker.js 筹钱不顺，前几天 Marak 强制把代码仓库清空，并写上了句关于 Aaron Swartz 的话。</li></ul><p><img src="/images/ob_pasted-image-20220112173758.png" alt="/images/ob_pasted-image-20220112173758.png"></p><p>Aaron Swartz 被称为互联网之子，作为<a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E8%8E%B7%E5%8F%96">开放获取</a>运动的长期支持者，因为大规模系统性地下载<a href="https://zh.wikipedia.org/wiki/JSTOR">JSTOR</a>上的学术期刊]而被判非法入侵罪，他拒绝认罪并随后自杀。Aaron Swartz 倡导的开发和平等的互联网思想深深的影响了一代 IT 从业人员，使得越来越多人愿意将自己的软件授权、技术书籍、平台信息选择对外开放。</p><p>所以 Marak 的做法也许在拷问，<strong>这个世界怎么了，我们分享精神得不到应该得到的回报？</strong></p><p>如果作者不想再继续维护开源软件，通常的做法是不做更新、或者转移项目所有权给其他人。但是 Marak 的做法是清空代码库，这导致一大波公司不能使用。最后，作者还因为向自己开源项目提交恶意代码，使得 GitHub 账户被暂停使用，从而在技术圈引发热议。</p><p>这里我再加一些具体的细节。这个库虽然有用，但是并不是什么高深技术。即使没有他这个东西，一个资深的前端程序员完全可以自己搞出来一个。在开源的世界一个东西流行，其实有很多因素，可能出现的时机对了，当然也可能确实有些独特好用的地方。这样功能的一个库，往往只要一个火了，其使用量就会很大，排第二的可能就没多少人知道了。</p><p>另外作者来开始的时候，也是不知道这东西这么多人用的，选择的 License 就很随意，要是选择 GPL 在道义上就没问题。所以十年后，用的人多了的情况下，他就形成了这样一种心理：世界上这么多人用我的代码，但我却这么穷，这不公平。</p><p><strong>大家都用我的代码，所以我就该富有吗？</strong></p><p>理论上确实是如此，你创造了一个大家都在用的东西，理应收到物质上的回馈。但现实中就很复杂，你这东西如果从开始就说要收费，可能根本没这么多人用。所以这就是一个鸡生蛋还是蛋生鸡的问题，而且这库也不是一个必需品，事实上这是开发过程中的辅助库，基本不会发布到生产环境，替换起来又没到伤筋动骨的程度。</p><p>所以 Marak 在尝试通过这个库来赚钱的时候会很困难。即使这样，faker.js 并不是没融到钱，只是可能没达到最近玩币圈的 Marak 的胃口。参考<a href="https://opencollective.com/fakerjs">faker.js - Open Collective</a> ：</p><p><img src="/images/ob_pasted-image-20220112140410.png" alt="/images/ob_pasted-image-20220112140410.png"></p><p><strong>真正能赚钱的通常不是基础库，而是直接面向用户的成品</strong>，比如 Obsidian 这个产品，我作为愿意付费，但是我没捐赠给他用的那些开源库。而给基础开源库捐赠的企业太少了，参考之前的 OpenSSL 事件。</p><h2 id="个人为什么开源"><a href="#个人为什么开源" class="headerlink" title="个人为什么开源"></a>个人为什么开源</h2><p>实际上，能通过开源软件直接赚钱的个人开发者少之又少。如果这样，作为个人开发者，为什么我们要开源？</p><p>开源运动始于早期黑客的反抗精神和分享精神，Unix 不是闭源么，所以早期黑客把代码印成书来分发，这是一种对商业软件的反抗。随着互联网和 Linux 的发展，开源已成为软件开发的常态，甚至是开发者的自豪。可以说<strong>开源和 Wikipedia 是目前人类两项最大的集体智慧活动，无数人在无偿地、自愿地付出时间和精力去做共享。</strong></p><p>大多开源是为了交流和单纯的分享，想给其他人看看怎么样，也许社区会有反馈，也去其他人可以帮忙完善一部分等等。</p><p>另一部分原因是为了名声，如果一个开源作品得到很多关注，可以给自己增光不少。如果一个开源项目被大公司用了，通常会怎样？作者会把大公司的名称列到 README 的用户列表中。开发者可能内心会希望大公司多少能捐赠些，但其实大公司白嫖也能给项目带来曝光度和知名度。</p><h2 id="公司为什么要开源"><a href="#公司为什么要开源" class="headerlink" title="公司为什么要开源"></a>公司为什么要开源</h2><p>公司是否开源是个很复杂的问题。很多公司开源是为了形成社区和生态，比如 VSCode，要是不开放源肯定没有现在的几乎垄断的态势。比如 TiDB、TDEngine ，他们巴不得各位来学习、研究他们的代码，这样会渐渐形成开发生态。用户一看关注度这么高，用的信心也增强了。但你说这源码都给用户了，该怎么挣钱啊。事实上他们总会有付费的功能不会在社区版本，然后用户中只要有一小部分能赚钱就可以了。</p><p>我理解这是行业发展到一定程度必然出现的结果，就是先让大家用起来，然后再通过技术支持和付费功能收费。开源软件的商业化也不好走，比如 Docker 影响力这么大的开源项目也难以找到合适的盈利模式。</p><h2 id="开源是否拉低了行业门槛"><a href="#开源是否拉低了行业门槛" class="headerlink" title="开源是否拉低了行业门槛"></a>开源是否拉低了行业门槛</h2><p><a href="https://www.zhihu.com/people/banfoxianren">半佛仙人</a>提到其他行业的聪明人，比如律师、医生都在提高行业门槛，为什么 IT 行业的傻傻程序员在免费分享，降低行业门槛？</p><p>现实确实如此，现在学习编程的资料多如牛毛、唾手可得，任何想学编程的都可以面对电脑开始学。开源的、可复用的代码太多，任何人稍微学学可能就能弄出一个产品。比如搭网站，在二十年前可能需要一个专业的程序员，耗费好几天才可以搞定。现在既然有了这么多代码可以参考，这么多现有的框架可以用，可能一个学了一个月的初级程序员花上一天就能搞定。</p><p>那这到底是门槛低了还是生产率提高了？</p><p>我认为都有。但我不认为这是这个行业内卷的原因，内卷化的本质是生存与发展问题，国内很多人涌进来学 IT 本身因为这个行业相对好找工作、工资高点。开源提高了程序员生产力，同时也加速了各行各业的数字化进程，蛋糕越来越大了。中国 IT 行业内卷是因为年轻人多，而公司做的都是业务型工作多，导致老人容易被新人替代。你看腐朽的资本主义国家，IT 行业还是处于极度缺人状态，行业从业人员也不用 996。</p><hr><p>有人说：<strong>开源软件是程序员的自媒体。</strong></p><p>我觉得这种说法很恰当，作为开发者你可以开个自媒体，也可以不跟这个风气。现状是有小部分人因为自媒体富了起来，绝大部分在用爱发电。</p><p>假如，作为一个自媒体的作者，我一直说我的东西是免费的，结果 10 年后进入币圈觉得自己穷，高呼你们这些粉丝和读者都是白嫖党，看了我的文章的都该给我钱，没多少人给钱我就把老文章给删了。</p><p>这，就很诡异！</p><p>所以我觉得这事件的结论是：<strong>币圈容易让人黑化。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这些天因为 &lt;a href=&quot;https://www.zhihu.com/question/510180628&quot;&gt;faker.js 开源作者 Marak 删除代码&lt;/a&gt;事件让开源出圈了，好多非 IT 的自媒体都跟风写上了。我花了些时间查找资料，也说说自己的理解。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="技术，开源" scheme="http://catcoding.me/tags/%E6%8A%80%E6%9C%AF%EF%BC%8C%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>花 10 年写一本编程语言实现的书</title>
    <link href="http://catcoding.me/2022/01/12/a-book-on-programming-language.html"/>
    <id>http://catcoding.me/2022/01/12/a-book-on-programming-language.html</id>
    <published>2022-01-12T00:10:31.000Z</published>
    <updated>2022-01-28T03:46:25.760Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.linkedin.com/in/robert-nystrom-3124052/">Robert Nystrom</a> 是一位拥有 20 年工作经验的软件工程师，之前在 EA 做了 9 年多，2010 年入职 Google ，目前工作在 Dart 项目。</p><p>2009 年开始写一本设计模式方面的书，叫 <a href="http://gameprogrammingpatterns.com/">Game Programming Patterns</a>，写到一半发现自己对编程语言实现很感兴趣。强忍着兴奋继续写第一本，直到 2014 年第一本书完成.。这本书收获很高的评价，建议想学习设计模式的同学看看这本书，电子版本的完全公开。</p><p>而后就开始了第二本关于编程语言实现的书，断断续续写了这么多年，直到 2020 年完成了：<a href="http://craftinginterpreters.com/">Crafting Interpreters</a>，整个过程居然花费了接近 10 年时间。</p><p>在这篇 <a href="http://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/">Crafting “Crafting Interpreters” </a> 中，作者详细记录了完成这本书的过程。反正我看完后很震惊，一本技术书籍可以按照这种制作工艺和水准，最后的成书是我见过的质量最高的技术书籍，而且成书和代码可以完全免费阅读！</p><p>其实写技术书是投入产出比很低的事情，只有纯粹的热情才能让一个人花这么多年去写这种书。为了完成这本书，作者看了这么多关于语言实现的书：</p><p><img src="/images/ob_pasted-image-20220111221812.png" alt="/images/ob_pasted-image-20220111221812.png"></p><p>里面的插图是自己手画的，配文是手写的 ，完成之后再通过扫描机扫描成电子版本：<br><img src="/images/ob_pasted-image-20220111222217.png" alt="/images/ob_pasted-image-20220111222217.png"></p><p><img src="/images/ob_pasted-image-20220111222336.png" alt="/images/ob_pasted-image-20220111222336.png"></p><p><img src="/images/ob_pasted-image-20220111222408.png" alt="/images/ob_pasted-image-20220111222408.png"></p><p>所有想深入学习编程的人都应该去理解一个编程语言是如何实现的，因为：</p><ul><li>克服对语言的恐惧，解释器、编译器不过是另外一个程序。我们可以自己去实现一些常见的语法和特性，编程语言对我们是可以改变和理解的工具，而不是黑盒。</li><li>这是一个绝佳的提升编程技能的方式。</li><li>工作中会接触到各种小语言和 DSL (Domain-specific language)，parser 或者编译相关的技能可能会有用。</li></ul><p>我大学本科的时候挂了一门课叫做形式语言和自动机，这门课当然是对 Parser 很重要的，但是我觉得枯燥之极，我记得需要手画状态机。</p><p>后来我工作之后，找了一些具体的代码来看，才能理解状态机这些东西如何应用在实际中。所以，我认为在学习编程中最重要的还是读代码和写代码。我通过读 <a href="https://github.com/chenyukang/eopl">Essentials of programming languages</a> 学到了很多编程语言相关的东西，在这里面可以实现好多小解释器。</p><p>理解编程语言的过程中，Parser 只是其中第一步，而且也是不重要的一步。Parser 如何做已经有了很成熟和规范的做法，一门编程语言更重要的是语法、语义和实现。编译部分又涉及到更多底层和高深的东西，现在 LLVM 是常用的编译后端。所以要理解一门编程语言的实现，一个小语言的解释器就是很好的方向。</p><p>在这本书里，作者详细讲解了一个解释器的两遍实现，第一遍用 Java 实现，注重主要概念和原理；第二遍用 C 实现，bytecode、VM 、GC，注重优化和底层实现。</p><p>这些主题对于非编译器从业人员来说已经足够了。编程语言的实现比很多日常项目难，但这值得一个想更深入学习编程的人锻炼：</p><blockquote><p>长跑运动员有时在脚踝上绑上重物，或者在空气稀薄的高海拔地区进行训练。<br>然后卸下包袱时，相对轻松的四肢和富含氧气的空气使它们跑得更远更快。</p></blockquote><p>另外这本书中有一些英语俚语，不过不会对阅读造成干扰。相比较 EOPL，我更推荐这本书来学习编程语言原理，因为 EOPL 偏函数式一些，相对更小众。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/robert-nystrom-3124052/&quot;&gt;Robert Nystrom&lt;/a&gt; 是一位拥有 20 年工作经验的软件工程师，之前在 EA 做了 9 年多，2010 年入职 Google ，目前工
      
    
    </summary>
    
    
      <category term="技术" scheme="http://catcoding.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>深刻启发我的 3 篇文章</title>
    <link href="http://catcoding.me/2022/01/10/share-3-articles.html"/>
    <id>http://catcoding.me/2022/01/10/share-3-articles.html</id>
    <published>2022-01-10T22:07:55.000Z</published>
    <updated>2022-01-28T03:46:25.772Z</updated>
    
    <content type="html"><![CDATA[<p>这些年读过很多的文章，绝大部分看了就忘记了，其中这三篇对我启发很大，这里分享给大家。</p><h2 id="十年学会编程"><a href="#十年学会编程" class="headerlink" title="十年学会编程"></a>十年学会编程</h2><ul><li><a href="https://norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a></li><li><a href="http://daiyuwen.freeshell.org/gb/misc/21-days-cn.html">十年学会编程</a></li></ul><p>这篇文章是 <a href="http://www.norvig.com/index.html" title="Peter Norvig (Copyright 2001)">Peter Norvig</a> 发表于二十年前。现在和二十年前都一样，很多人学习编程都会浮躁，渴望 21 天甚至是 7 天 就能学会编程，这篇文章很好的解释了为什么不行。甚至是，初学者理解的编程和一个高手理解的编程可能都不是一回事。</p><p>对我的启发是，永远不要妄想有什么捷径，不要浮躁，编程不是一门科学，更像是一种技艺，如同绘画、音乐一样的技能，只有通过长时间的砺练才会有所成。</p><p>另外不要拘泥于单一技术，因为技术可能会过时，这样年纪越大越容易被淘汰。需要不断加基础知识和核心能力，因为技术原理相通，无论适应学习新技术、还是发挥经验优势，都是比年轻人强很多的。</p><p>学习编程这么多年后，反而更加觉得自己渺小和无知，看着那些后浪做出的漂亮东西有时候会感叹，这十年可荒废了不少，想再上一台阶再花十年吧。</p><h2 id="Learn-in-Public"><a href="#Learn-in-Public" class="headerlink" title="Learn in Public"></a>Learn in Public</h2><ul><li><a href="https://www.swyx.io/learn-in-public">Learn In Public</a> </li><li><a href="https://juejin.cn/post/6855456536056037389">当众学习 - 最快的学习方式 </a></li></ul><p>我之前写了 10 来年的博客，但我基本是当作自己的一个私人记录在写，我甚至不希望身边的朋友、同事发现我写的东西，因为我会觉得不舒服，后来我才知道这其实就是<strong>冒名顶替综合症</strong>。我的域名也丢了两次，所以最终导致我写的东西除了自己看没有什么很多人看过。</p><p>这会有什么问题？</p><p>其实也没什么大问题，只是我丧失了很多提高自己的机会。</p><p>写出来的东西并没有其他人看，就相当于我只是在消费，实际并没有产出。因为没有得到太多的反馈、激励，即使我写了 10 年，这也是断断续续写的，兴致来了写上一篇，通常每年十篇左右，这样没有形成习作的习惯。而且我丧失了让其他人纠正我，以及从其他人学习的机会。</p><p>我认为 Learn In Public 是费曼学习法的加强版，能在公共场合传授我们所学，这是更高的标准。</p><p>具体执行起来可能是在 Github 上通过做贡献，或者是建立一个持久的开源的知识库，或者去做公开的技术分享等等。长久来说，人们会注意到真正的学习者和生产者，然后会向其提供帮助或者寻求帮助，这个过程就能产生价值。</p><p>我正在实践这个理念，比如我正在写的这个公众号，我想让自己变得更自信和开放，推广自己的想法，让自己成为生产者，同时还能和更多人交流。</p><h2 id="别让自己“墙”了自己"><a href="#别让自己“墙”了自己" class="headerlink" title="别让自己“墙”了自己"></a>别让自己“墙”了自己</h2><ul><li><a href="https://coolshell.cn/articles/20276.html">别让自己“墙”了自己</a></li></ul><p>CoolShell 上有很多不错的文章，其中这篇我会时不时再看。</p><p><strong>偏见和不开放，对一个人的限制是真正有毁灭性的</strong>。</p><p>持有强烈偏见是技术人员经常会出现的问题，大概是因为我们在编程的时候其实是在构建一个简单的世界，所以自认为一切都可控，自己擅长的就是最好的。</p><p>比如有的人认为 C++ 是最强的，所以鄙视其他语言；比如我之前认为 Emacs 是最好的，所以排斥一些现代先进的编辑器；比如自认为是后端开发，所以前端的东西不想碰。行业里这样的偏见到处可见，能形成各种鄙视链。这种不开放的心态就是作茧自缚。</p><p>这篇文章还谈了很多其他的方面：</p><ul><li>站在更高维度上思考和学习</li></ul><blockquote><p>整天在焦虑那些低维度的事（比如自己的薪水、工作的地点、稳不稳定、有没有户口……），只会让你变得越来越平庸，只要你站在更高的维度（比如： 眼界有没有扩大、可能性是不是更多、竞争力是不是更强、能不能解决更大更难的问题、能创造多大的价值……），时间会让你明白那些低维度的东西全都不是事儿。</p><p>技术学习上也一样，站在学习编程语法特性的维度和站在学习编程范式、设计模式的维度是两种完全不一样的学习方式。</p></blockquote><ul><li>扩大眼界</li></ul><p><strong>英文语言能力对你能不能融入世界是起决定性的作用</strong>，所以我也还在提高英语写作和口语。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这些年读过很多的文章，绝大部分看了就忘记了，其中这三篇对我启发很大，这里分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;十年学会编程&quot;&gt;&lt;a href=&quot;#十年学会编程&quot; class=&quot;headerlink&quot; title=&quot;十年学会编程&quot;&gt;&lt;/a&gt;十年学会编程&lt;/h2&gt;&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="写作，个人成长" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C%EF%BC%8C%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>35 岁，我用这三种方法克服焦虑</title>
    <link href="http://catcoding.me/2022/01/07/how-to-beat-anxiety.html"/>
    <id>http://catcoding.me/2022/01/07/how-to-beat-anxiety.html</id>
    <published>2022-01-07T00:10:33.000Z</published>
    <updated>2022-01-28T03:46:25.764Z</updated>
    
    <content type="html"><![CDATA[<p>去年我刚好满 35 岁。</p><p>我 2011 年研究生毕业后参加工作，一直工作在 IT 领域，这些年发展也算比较顺利。毕业后我待了一个创业团队三年，后面六年一直待在深圳一个独角兽企业。这十年算是赶上了行业红利和房产红利，经济上没什么大的压力。</p><p>但是在 2019 年开始我开始焦虑。</p><p>主要压力来自家庭，亲人查出严重疾病，幸好手术后渐渐恢复。另一方面压力来自工作，因为在同一公司工作六年后我感觉到了瓶颈，对自己的工作内容也提不起兴趣。还有一方面来自自己的身体，因为经常晚上睡不好觉导致出了一些肠胃方面的慢性疾病。有段时间我不敢去医院检查，因为怕是什么绝症之类的。后来鼓起勇气去做了比较彻底的检查，医生说这病只能慢慢养，心情要放松才行。</p><p>总之，人生进入后半场不如意十之八九，家庭、工作、健康，突然各方面都需要应对，而精力又大不如前。</p><p>经过一年多的调整，我感觉现在基本摆脱了焦虑，自认为算是迈过了这道坎。总的来说我用了三种方法：</p><ul><li>做让自己进入心流的事</li><li>换工作和城市</li><li>找到自己的长期驱动力，做 PlanB</li></ul><p>分别再详细阐述一下。</p><p>当一个人焦虑的时候，就很容易东想西想、瞻前顾后，这样会加重精神内耗，反过来加重焦虑。如何避免自己想得太多从而进入恶性循环？</p><p><strong>一个好办法是让自己进去心流状态</strong>，尝试找自己感兴趣的、喜欢做的事情，留出较长一段时间来做。这就好像是躲避，但是是一种安全的躲避方式。</p><p>我喜欢编程，有段时间我就也没想到写哪方面的代码，就在 LeetCode 上刷题。后来有一段时间很热衷于玩乐高，所以买了一些夜深人静的时候自己玩。后来我又觉得写作能让自己进去心流，所以那段时间我每天写一篇技术类的英文文章，然后发布到 <a href="https://medium.com/@coderscat">Medium</a> 上。我发现这样也能赚一些钱，所以就动机更大，投入了更多时间在这上面。<strong>兴趣和爱好可以让自己从工作、生活中暂时逃离，可以让人应对心理、精神上的疲劳。</strong></p><p>2020 年中，因为一次偶然的面试，我拿了一个苏州某著名外企的 Offer。然后大概经过了一个多月的考虑，我决定举家从深圳搬迁到苏州。这需要很大的勇气，我甚至让女儿来抽签决定是否离开已经定居的深圳。最终做出换城市和工作的决定还是因为我想多一些不同的体验和尝试。就像是优化算法进入了一个局部最优解，我需要趁还不那么老的时候去做一个更大的改变。</p><p>在苏州待了一年之后，我有些庆幸自己当时做了那个决定。人焦虑很多时候是因为所处的环境。苏州整个城市都是有一种养老的气质，稍晚点街上就没什么人，路上没什么车，完全没有奋斗的氛围。</p><p><strong>如果要在一个公司长待，那么公司企业文化是否和自己贴合特别重要</strong>。外企工作节奏和氛围轻松多了，我工作上时间投入少很多，基本是上午十点上班晚上六点下班。更重要的是成熟的公司管理方式反而更简单些，上班做事下班闪人。</p><p>人到中年有时候得把工作别看得太重，这需要做取舍。在纪伯伦的《先知》中谈论到工作时写道：</p><blockquote><p>所有知识都是无用的，除非有了工作，<br>所有工作都是空洞的，除非有了爱；</p></blockquote><p>毕竟工作也还是为了家。工作相对轻松了，我可以每天晚上回家吃饭，陪女儿玩耍，看书，给她洗漱哄她睡觉。这些陪伴对她的成长很重要，从长远来看这也许比赚钱还重要。在陪小孩的过程中，自己也像是在重新过一个童年，玩积木和拼图都很有趣。</p><p>另外苏州的风景和天气都很不错，所以这一年我经常周末开车出去逛，太湖、阳澄湖、古镇等等，风景好的地方太多了。当一个人整个心态慢下来，漫步在风景优美的自然环境里，就会觉得人间美好，我没心情焦虑了。肠胃方面的问题也渐渐地就没什么症状了。</p><p>说了这么多，有的人可能就说这不就是躺平么？</p><p>我认为不是。我是在调整工作和生活，更好地应对衰老这个自然规律。<strong>职场上的中年危机，本质上就是一种对不确定性的恐惧和焦虑。</strong> 如果是作为工薪阶层，年纪大了还一直还是只盯着职位和工资看，难免为失望，因为命运掌握在公司手里就会有不确定性。</p><p>即使到了 35 岁，后面的路还有很长，不要自己局限在公司和职场上。作为个体来说，我认为需要花时间思考自己的后路，如何能不断保持自己能力的提高，如何能不依赖公司或者机构创造自己的价值，如何找到自己的内在驱动力，如何做复利和时间的朋友。</p><p>这需要不断尝试，找到自己的激情所在，并且需要保持一种开放，终生学习成长的心态。比如我通过摸索，现在能通过写作赚钱，这一年我花了更多时间在<a href="http://github.com/chenyukang">开源</a>上，对技术反而有了更大的兴趣，也能通过做开源软件赚钱。即使这两样加起来目前都不足以养活家庭，但是这是我自己的兴趣和爱好。</p><p>最坏的情况下我失业了，我还可以用此谋生，而且我相信如果投入更多时间，这两块都能做得更好。总之，PlanB 能让人自信和安宁，<strong>只要还在学习和进步就不算躺平</strong>。</p><hr><p>经过了这个焦虑的阶段，回忆起来那种焦虑会让人更深入的认识自己。经过毕业后这么些年，我们也许还不是很确定自己所求，但肯定知道哪些是自己不要的。在某个阶段必须做取舍，就需要不断问自己想要的生活和人生是什么样的，想清楚之后去做决定然后执行，焦虑就少了。</p><p><img src="/images/ob_pasted-image-20220103090311.png" alt="/images/ob_pasted-image-20220103090311.png"></p><p>如果按照中国平均寿命 70 多岁来算，35 岁刚好是一个分界点，在人生四季中算是进入秋季。前段时间在东太湖生态公园看到一排排的红杉树，觉得特别美。</p><p>正如人生的每一个年龄段自有其痛苦和动人之处。努力学会适应和享受，就能克服中年危机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;去年我刚好满 35 岁。&lt;/p&gt;
&lt;p&gt;我 2011 年研究生毕业后参加工作，一直工作在 IT 领域，这些年发展也算比较顺利。毕业后我待了一个创业团队三年，后面六年一直待在深圳一个独角兽企业。这十年算是赶上了行业红利和房产红利，经济上没什么大的压力。&lt;/p&gt;
&lt;p&gt;但是在 
      
    
    </summary>
    
    
      <category term="写作" scheme="http://catcoding.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>那些年，我们终将碰上的 Bug</title>
    <link href="http://catcoding.me/2022/01/05/those-bugs-will-always-happen.html"/>
    <id>http://catcoding.me/2022/01/05/those-bugs-will-always-happen.html</id>
    <published>2022-01-05T15:12:02.000Z</published>
    <updated>2022-01-28T03:46:25.772Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ob_pasted-image-20220103215102.png" alt="/images/ob_pasted-image-20220103215102.png"></p><p>2022 年的新年钟声刚敲响，时钟从 2021 年 12 月 31 日跳转到 2022 年 1  月 1 日，微软 Exchange 准时给大家带来了第一个世界范围内的 Bug。人们写好的新年祝福等邮件，突然发不出去了！大量用户在 Reddit 、Twitter 上亮出新年第一骂。</p><p>那些正准备休假的倒霉的 IT 管理员，被紧急电话呼进公司，排查后发现邮件队列卡住了，日志里显示的是：</p><p><img src="/images/ob_pasted-image-20220103215401.png" alt="/images/ob_pasted-image-20220103215401.png"></p><p>随后微软官方确认了这个 Bug。 这些错误是由 Microsoft Exchange Server 检查 FIP-FS 防病毒扫描引擎的版本，并试图将日期存储在带符号的 int32 变量中引起的。</p><p><img src="/images/ob_pasted-image-20220103214745.png" alt="/images/ob_pasted-image-20220103214745.png"></p><p>在这个变量中使用了 <code>yymmddHHMM</code> 这种格式的约定，我们知道 int32 能表示的最大值是 2,147,483,647，但是到了 2020.01.01  这个值将是 2,201,010,001，所以就溢出了！</p><p>这是一个典型的类似<code>千年虫</code> 问题，即由于时间的数据格式不对导致溢出或者日期逻辑错误，进而导致大量软件出现 Bug。千年虫的问题很多是因为很多老程序使用了两位来表示年份，比如 99 代表 1999 年，那 2000 年只能用 <code>00</code> 来表示了，但是 00 在程序里本意指的是 1900。</p><p>可能现在的新生代程序员会感叹，这些老古董为什么会犯这样低级的错误？</p><p><img src="/images/ob_pasted-image-20220104122103.png" alt="/images/ob_pasted-image-20220104122103.png"></p><p>这就牵扯到一些更复杂的问题：</p><p>一个是约定习俗，1931 年后很多人在写年份的时候，自然就开始用两位来代表年份，因为 1931 年后年和日已经不重合了，例如写成 35 ，任何人看了都是理解为 1935 年。 </p><p>另一个原因是内存曾经又贵又稀缺，早期核心内存的价格是每比特 1 美元，老一辈程序员在写代码的时候都是按 bit 抠的。 前美联储主席 Alan Greenspan 曾经也写过程序：</p><blockquote><p>我是造成这个问题的罪魁祸首之一。<br>我曾在20世纪60年代和70年代编写过这些程序，<br>我为自己能够在程序中挤出一些空格元素而感到自豪，<br>因为我不需要在年份前加上一个19。</p><p>在当时，这是非常重要的。<br>在我们开始编写程序之前，<br>我们曾经花了很多时间进行各种数学练习，<br>这样它们就可以很清楚地根据空间和容量的使用进行划分。</p><p>我们从来没有想到，这些项目会持续几年以上。</p></blockquote><p>“过早优化是万恶之源”，高老头真是诚不我欺：</p><p><img src="/images/ob_pasted-image-20220104114834.png" alt="/images/ob_pasted-image-20220104114834.png"></p><p>这种类型的 Bug 是可以预测的，比如千年虫问题，其实在 1985 年左右就已经有计算机专家发现了。问题是代码已经写好并且运行了，甚至因为早期的系统和软件通用性不高，有很多固化在芯片内部的程序，所以要解决也是大费周折。而且日期的问题与各个地方的不同习俗也有关系，比如台湾某些程序在 2011 年出现了日期溢出问题，大家考虑一下为什么😉？</p><p>总而言之，这些 Bug 就很神奇，我们知道在某些年份这类 Bug 必然会发生，但是我们无法完全消除，我们可以简称为 <strong>那些年，我们终将碰上的 Bug</strong>。</p><p>我们可以列举一下今后会碰到 Bug 的重要年份：</p><h3 id="GPS-星期技术归零"><a href="#GPS-星期技术归零" class="headerlink" title="GPS 星期技术归零"></a>GPS 星期技术归零</h3><p>GPS(全球定位系统) 广播时采用周计数(WN) + 周内时(TOW)的方式组合发布，早期的 GPS 采用 10bits 存储 WN，所以当计数达到 1024 时会翻转为 0。因此每 1024 周(也就是 19.6年) 会轮回一次。</p><p>最近几年发生是 1999，2019，下一次预计就是 2038 年。</p><p><img src="/images/ob_pasted-image-20220104232522.png" alt="/images/ob_pasted-image-20220104232522.png"></p><p>2019 年的这次看起来没有发生特别严重的事故，霍尼韦尔的飞行管理和导航软件因为没有及时打上补丁导致航班延误。一些 2012 年之前生产的 iPhone 和 iPad 可能因此连不上网络。</p><p>为了解决这一问题，现代化的 GPS 导航消息使用 13 位字段，该字段重复周期变成了 8,192 周（157岁），也就是说会直到 2137 年附近才清零。</p><h2 id="Unix-系统-time-溢出"><a href="#Unix-系统-time-溢出" class="headerlink" title="Unix 系统 time 溢出"></a>Unix 系统 time 溢出</h2><p><img src="/images/ob_pasted-image-20220104235957.png" alt="/images/ob_pasted-image-20220104235957.png"></p><p><strong>2038 年将是软件历史上史诗级别的灾难年。</strong></p><p>因为 Unix 系统最初实现的时候采用的是有符号整数 int 来保存时间，而时间系统是由 Epoch 开始计算起，单位为秒，Epoch 则是指定为 1970 年 1 月 1 日凌晨 00:00:00，格林威治时间。</p><p>很多古老的 UNIX 系统都是用 32 位元来记录时间，正值表示为 1970 以后，负值则表示 1970 年以前。也就是说最大为 0xFFFFFFFF 的一半，除以一天 86400 秒的话，就是 68 年。1970 年往后延 68 年刚好是 2038 年。</p><p>2038 年问题比 2000 的千年虫问题更麻烦。虽然目前很多 OS 和硬件已经升级到 64 位系统，32 位的嵌入式系统仍然大量运行。另外因为这涉及到系统层面的改动，如果我们直接修改 time_t 的定义，则会出现兼容性问题。</p><p>乐观情况，在还剩下不到 20 年的时间里，这些 32 位的系统逐渐被 64 位替换掉，这样就不会出现大问题。有可能导致严重问题的是那些无法升级的嵌入式系统，运行这些系统的设备寿命通常比较长，例如交通系统、汽车的稳定控制系统等。</p><h2 id="2106-年"><a href="#2106-年" class="headerlink" title="2106 年"></a>2106 年</h2><p>很多文件格式、通讯协议采用的是类似 Unix 的日期格式，差别是把时间存储在无符号 32 bit 整数里。按照这个范围计算，日期将在 2106 年溢出。</p><h2 id="4501-年"><a href="#4501-年" class="headerlink" title="4501  年"></a>4501  年</h2><p>Microsoft Outlook 使用 4501 年 1 月 1 日作为“none”或“empty”的占位符，不知道那天会出现什么神奇的 Bug，反正我们已经不在了。</p><hr><p>这种类型的 Bug 其实还有很多，时间和日期是程序和系统中非常重要的一个概念，在分布式系统中时间也很容易造成 Bug。我们作为程序员在写代码的时候，<strong>尽量眼光放远一点</strong>，多想想自己的程序一千年以后还在跑🤣，这样大概就没这类问题了。</p><p>不过一千年后还在运行的代码，得多伟大。这时候我脑海里回想起来那首歌：</p><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">别等到 一千年以后<br>所有人都遗忘了我<br>那时红色黄昏的沙漠<br>能有谁 解开缠绕千年的寂寞<br></code></pre></td></tr></table></figure><p><img src="/images/ob_pasted-image-20220105001744.png" alt="/images/ob_pasted-image-20220105001744.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ob_pasted-image-20220103215102.png&quot; alt=&quot;/images/ob_pasted-image-20220103215102.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2022 年的新年钟声刚敲响，时钟从 2021 年 
      
    
    </summary>
    
    
      <category term="技术，写作" scheme="http://catcoding.me/tags/%E6%8A%80%E6%9C%AF%EF%BC%8C%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
</feed>
